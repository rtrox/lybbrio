// Code generated by ent, DO NOT EDIT.

package series

import (
	"lybbrio/internal/ent/predicate"
	"lybbrio/internal/ent/schema/ksuid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id ksuid.ID) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id ksuid.ID) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id ksuid.ID) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...ksuid.ID) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...ksuid.ID) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id ksuid.ID) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id ksuid.ID) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id ksuid.ID) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id ksuid.ID) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldUpdateTime, v))
}

// CalibreID applies equality check predicate on the "calibre_id" field. It's identical to CalibreIDEQ.
func CalibreID(v int64) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldCalibreID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldName, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldSort, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldUpdateTime, v))
}

// CalibreIDEQ applies the EQ predicate on the "calibre_id" field.
func CalibreIDEQ(v int64) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldCalibreID, v))
}

// CalibreIDNEQ applies the NEQ predicate on the "calibre_id" field.
func CalibreIDNEQ(v int64) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldCalibreID, v))
}

// CalibreIDIn applies the In predicate on the "calibre_id" field.
func CalibreIDIn(vs ...int64) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldCalibreID, vs...))
}

// CalibreIDNotIn applies the NotIn predicate on the "calibre_id" field.
func CalibreIDNotIn(vs ...int64) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldCalibreID, vs...))
}

// CalibreIDGT applies the GT predicate on the "calibre_id" field.
func CalibreIDGT(v int64) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldCalibreID, v))
}

// CalibreIDGTE applies the GTE predicate on the "calibre_id" field.
func CalibreIDGTE(v int64) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldCalibreID, v))
}

// CalibreIDLT applies the LT predicate on the "calibre_id" field.
func CalibreIDLT(v int64) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldCalibreID, v))
}

// CalibreIDLTE applies the LTE predicate on the "calibre_id" field.
func CalibreIDLTE(v int64) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldCalibreID, v))
}

// CalibreIDIsNil applies the IsNil predicate on the "calibre_id" field.
func CalibreIDIsNil() predicate.Series {
	return predicate.Series(sql.FieldIsNull(FieldCalibreID))
}

// CalibreIDNotNil applies the NotNil predicate on the "calibre_id" field.
func CalibreIDNotNil() predicate.Series {
	return predicate.Series(sql.FieldNotNull(FieldCalibreID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldName, v))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldSort, v))
}

// SortContains applies the Contains predicate on the "sort" field.
func SortContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldSort, v))
}

// SortHasPrefix applies the HasPrefix predicate on the "sort" field.
func SortHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldSort, v))
}

// SortHasSuffix applies the HasSuffix predicate on the "sort" field.
func SortHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldSort, v))
}

// SortEqualFold applies the EqualFold predicate on the "sort" field.
func SortEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldSort, v))
}

// SortContainsFold applies the ContainsFold predicate on the "sort" field.
func SortContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldSort, v))
}

// HasBooks applies the HasEdge predicate on the "books" edge.
func HasBooks() predicate.Series {
	return predicate.Series(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, BooksTable, BooksPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBooksWith applies the HasEdge predicate on the "books" edge with a given conditions (other predicates).
func HasBooksWith(preds ...predicate.Book) predicate.Series {
	return predicate.Series(func(s *sql.Selector) {
		step := newBooksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Series) predicate.Series {
	return predicate.Series(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Series) predicate.Series {
	return predicate.Series(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Series) predicate.Series {
	return predicate.Series(sql.NotPredicates(p))
}
