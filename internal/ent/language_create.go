// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/language"
	"lybbrio/internal/ent/schema/ksuid"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LanguageCreate is the builder for creating a Language entity.
type LanguageCreate struct {
	config
	mutation *LanguageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (lc *LanguageCreate) SetCreateTime(t time.Time) *LanguageCreate {
	lc.mutation.SetCreateTime(t)
	return lc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (lc *LanguageCreate) SetNillableCreateTime(t *time.Time) *LanguageCreate {
	if t != nil {
		lc.SetCreateTime(*t)
	}
	return lc
}

// SetUpdateTime sets the "update_time" field.
func (lc *LanguageCreate) SetUpdateTime(t time.Time) *LanguageCreate {
	lc.mutation.SetUpdateTime(t)
	return lc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (lc *LanguageCreate) SetNillableUpdateTime(t *time.Time) *LanguageCreate {
	if t != nil {
		lc.SetUpdateTime(*t)
	}
	return lc
}

// SetCalibreID sets the "calibre_id" field.
func (lc *LanguageCreate) SetCalibreID(i int64) *LanguageCreate {
	lc.mutation.SetCalibreID(i)
	return lc
}

// SetNillableCalibreID sets the "calibre_id" field if the given value is not nil.
func (lc *LanguageCreate) SetNillableCalibreID(i *int64) *LanguageCreate {
	if i != nil {
		lc.SetCalibreID(*i)
	}
	return lc
}

// SetCode sets the "code" field.
func (lc *LanguageCreate) SetCode(s string) *LanguageCreate {
	lc.mutation.SetCode(s)
	return lc
}

// SetID sets the "id" field.
func (lc *LanguageCreate) SetID(k ksuid.ID) *LanguageCreate {
	lc.mutation.SetID(k)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *LanguageCreate) SetNillableID(k *ksuid.ID) *LanguageCreate {
	if k != nil {
		lc.SetID(*k)
	}
	return lc
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (lc *LanguageCreate) AddBookIDs(ids ...ksuid.ID) *LanguageCreate {
	lc.mutation.AddBookIDs(ids...)
	return lc
}

// AddBooks adds the "books" edges to the Book entity.
func (lc *LanguageCreate) AddBooks(b ...*Book) *LanguageCreate {
	ids := make([]ksuid.ID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lc.AddBookIDs(ids...)
}

// Mutation returns the LanguageMutation object of the builder.
func (lc *LanguageCreate) Mutation() *LanguageMutation {
	return lc.mutation
}

// Save creates the Language in the database.
func (lc *LanguageCreate) Save(ctx context.Context) (*Language, error) {
	if err := lc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LanguageCreate) SaveX(ctx context.Context) *Language {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LanguageCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LanguageCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LanguageCreate) defaults() error {
	if _, ok := lc.mutation.CreateTime(); !ok {
		if language.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized language.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := language.DefaultCreateTime()
		lc.mutation.SetCreateTime(v)
	}
	if _, ok := lc.mutation.UpdateTime(); !ok {
		if language.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized language.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := language.DefaultUpdateTime()
		lc.mutation.SetUpdateTime(v)
	}
	if _, ok := lc.mutation.ID(); !ok {
		if language.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized language.DefaultID (forgotten import ent/runtime?)")
		}
		v := language.DefaultID()
		lc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (lc *LanguageCreate) check() error {
	if _, ok := lc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Language.create_time"`)}
	}
	if _, ok := lc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Language.update_time"`)}
	}
	if _, ok := lc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Language.code"`)}
	}
	if v, ok := lc.mutation.Code(); ok {
		if err := language.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Language.code": %w`, err)}
		}
	}
	return nil
}

func (lc *LanguageCreate) sqlSave(ctx context.Context) (*Language, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(ksuid.ID); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Language.ID type: %T", _spec.ID.Value)
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LanguageCreate) createSpec() (*Language, *sqlgraph.CreateSpec) {
	var (
		_node = &Language{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(language.Table, sqlgraph.NewFieldSpec(language.FieldID, field.TypeString))
	)
	_spec.OnConflict = lc.conflict
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.CreateTime(); ok {
		_spec.SetField(language.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := lc.mutation.UpdateTime(); ok {
		_spec.SetField(language.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := lc.mutation.CalibreID(); ok {
		_spec.SetField(language.FieldCalibreID, field.TypeInt64, value)
		_node.CalibreID = value
	}
	if value, ok := lc.mutation.Code(); ok {
		_spec.SetField(language.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if nodes := lc.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   language.BooksTable,
			Columns: language.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Language.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LanguageUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (lc *LanguageCreate) OnConflict(opts ...sql.ConflictOption) *LanguageUpsertOne {
	lc.conflict = opts
	return &LanguageUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Language.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lc *LanguageCreate) OnConflictColumns(columns ...string) *LanguageUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LanguageUpsertOne{
		create: lc,
	}
}

type (
	// LanguageUpsertOne is the builder for "upsert"-ing
	//  one Language node.
	LanguageUpsertOne struct {
		create *LanguageCreate
	}

	// LanguageUpsert is the "OnConflict" setter.
	LanguageUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *LanguageUpsert) SetUpdateTime(v time.Time) *LanguageUpsert {
	u.Set(language.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateUpdateTime() *LanguageUpsert {
	u.SetExcluded(language.FieldUpdateTime)
	return u
}

// SetCalibreID sets the "calibre_id" field.
func (u *LanguageUpsert) SetCalibreID(v int64) *LanguageUpsert {
	u.Set(language.FieldCalibreID, v)
	return u
}

// UpdateCalibreID sets the "calibre_id" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateCalibreID() *LanguageUpsert {
	u.SetExcluded(language.FieldCalibreID)
	return u
}

// AddCalibreID adds v to the "calibre_id" field.
func (u *LanguageUpsert) AddCalibreID(v int64) *LanguageUpsert {
	u.Add(language.FieldCalibreID, v)
	return u
}

// ClearCalibreID clears the value of the "calibre_id" field.
func (u *LanguageUpsert) ClearCalibreID() *LanguageUpsert {
	u.SetNull(language.FieldCalibreID)
	return u
}

// SetCode sets the "code" field.
func (u *LanguageUpsert) SetCode(v string) *LanguageUpsert {
	u.Set(language.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *LanguageUpsert) UpdateCode() *LanguageUpsert {
	u.SetExcluded(language.FieldCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Language.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(language.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LanguageUpsertOne) UpdateNewValues() *LanguageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(language.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(language.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Language.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LanguageUpsertOne) Ignore() *LanguageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LanguageUpsertOne) DoNothing() *LanguageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LanguageCreate.OnConflict
// documentation for more info.
func (u *LanguageUpsertOne) Update(set func(*LanguageUpsert)) *LanguageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LanguageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *LanguageUpsertOne) SetUpdateTime(v time.Time) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateUpdateTime() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetCalibreID sets the "calibre_id" field.
func (u *LanguageUpsertOne) SetCalibreID(v int64) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetCalibreID(v)
	})
}

// AddCalibreID adds v to the "calibre_id" field.
func (u *LanguageUpsertOne) AddCalibreID(v int64) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.AddCalibreID(v)
	})
}

// UpdateCalibreID sets the "calibre_id" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateCalibreID() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateCalibreID()
	})
}

// ClearCalibreID clears the value of the "calibre_id" field.
func (u *LanguageUpsertOne) ClearCalibreID() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearCalibreID()
	})
}

// SetCode sets the "code" field.
func (u *LanguageUpsertOne) SetCode(v string) *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *LanguageUpsertOne) UpdateCode() *LanguageUpsertOne {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateCode()
	})
}

// Exec executes the query.
func (u *LanguageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LanguageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LanguageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LanguageUpsertOne) ID(ctx context.Context) (id ksuid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LanguageUpsertOne.ID is not supported by MySQL driver. Use LanguageUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LanguageUpsertOne) IDX(ctx context.Context) ksuid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LanguageCreateBulk is the builder for creating many Language entities in bulk.
type LanguageCreateBulk struct {
	config
	err      error
	builders []*LanguageCreate
	conflict []sql.ConflictOption
}

// Save creates the Language entities in the database.
func (lcb *LanguageCreateBulk) Save(ctx context.Context) ([]*Language, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Language, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LanguageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LanguageCreateBulk) SaveX(ctx context.Context) []*Language {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LanguageCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LanguageCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Language.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LanguageUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (lcb *LanguageCreateBulk) OnConflict(opts ...sql.ConflictOption) *LanguageUpsertBulk {
	lcb.conflict = opts
	return &LanguageUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Language.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcb *LanguageCreateBulk) OnConflictColumns(columns ...string) *LanguageUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LanguageUpsertBulk{
		create: lcb,
	}
}

// LanguageUpsertBulk is the builder for "upsert"-ing
// a bulk of Language nodes.
type LanguageUpsertBulk struct {
	create *LanguageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Language.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(language.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LanguageUpsertBulk) UpdateNewValues() *LanguageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(language.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(language.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Language.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LanguageUpsertBulk) Ignore() *LanguageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LanguageUpsertBulk) DoNothing() *LanguageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LanguageCreateBulk.OnConflict
// documentation for more info.
func (u *LanguageUpsertBulk) Update(set func(*LanguageUpsert)) *LanguageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LanguageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *LanguageUpsertBulk) SetUpdateTime(v time.Time) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateUpdateTime() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetCalibreID sets the "calibre_id" field.
func (u *LanguageUpsertBulk) SetCalibreID(v int64) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetCalibreID(v)
	})
}

// AddCalibreID adds v to the "calibre_id" field.
func (u *LanguageUpsertBulk) AddCalibreID(v int64) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.AddCalibreID(v)
	})
}

// UpdateCalibreID sets the "calibre_id" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateCalibreID() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateCalibreID()
	})
}

// ClearCalibreID clears the value of the "calibre_id" field.
func (u *LanguageUpsertBulk) ClearCalibreID() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.ClearCalibreID()
	})
}

// SetCode sets the "code" field.
func (u *LanguageUpsertBulk) SetCode(v string) *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *LanguageUpsertBulk) UpdateCode() *LanguageUpsertBulk {
	return u.Update(func(s *LanguageUpsert) {
		s.UpdateCode()
	})
}

// Exec executes the query.
func (u *LanguageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LanguageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LanguageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LanguageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
