// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/identifier"
	"lybbrio/internal/ent/predicate"
	"lybbrio/internal/ent/schema/ksuid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IdentifierUpdate is the builder for updating Identifier entities.
type IdentifierUpdate struct {
	config
	hooks    []Hook
	mutation *IdentifierMutation
}

// Where appends a list predicates to the IdentifierUpdate builder.
func (iu *IdentifierUpdate) Where(ps ...predicate.Identifier) *IdentifierUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdateTime sets the "update_time" field.
func (iu *IdentifierUpdate) SetUpdateTime(t time.Time) *IdentifierUpdate {
	iu.mutation.SetUpdateTime(t)
	return iu
}

// SetCalibreID sets the "calibre_id" field.
func (iu *IdentifierUpdate) SetCalibreID(i int64) *IdentifierUpdate {
	iu.mutation.ResetCalibreID()
	iu.mutation.SetCalibreID(i)
	return iu
}

// SetNillableCalibreID sets the "calibre_id" field if the given value is not nil.
func (iu *IdentifierUpdate) SetNillableCalibreID(i *int64) *IdentifierUpdate {
	if i != nil {
		iu.SetCalibreID(*i)
	}
	return iu
}

// AddCalibreID adds i to the "calibre_id" field.
func (iu *IdentifierUpdate) AddCalibreID(i int64) *IdentifierUpdate {
	iu.mutation.AddCalibreID(i)
	return iu
}

// ClearCalibreID clears the value of the "calibre_id" field.
func (iu *IdentifierUpdate) ClearCalibreID() *IdentifierUpdate {
	iu.mutation.ClearCalibreID()
	return iu
}

// SetType sets the "type" field.
func (iu *IdentifierUpdate) SetType(s string) *IdentifierUpdate {
	iu.mutation.SetType(s)
	return iu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iu *IdentifierUpdate) SetNillableType(s *string) *IdentifierUpdate {
	if s != nil {
		iu.SetType(*s)
	}
	return iu
}

// SetValue sets the "value" field.
func (iu *IdentifierUpdate) SetValue(s string) *IdentifierUpdate {
	iu.mutation.SetValue(s)
	return iu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (iu *IdentifierUpdate) SetNillableValue(s *string) *IdentifierUpdate {
	if s != nil {
		iu.SetValue(*s)
	}
	return iu
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (iu *IdentifierUpdate) SetBookID(id ksuid.ID) *IdentifierUpdate {
	iu.mutation.SetBookID(id)
	return iu
}

// SetBook sets the "book" edge to the Book entity.
func (iu *IdentifierUpdate) SetBook(b *Book) *IdentifierUpdate {
	return iu.SetBookID(b.ID)
}

// Mutation returns the IdentifierMutation object of the builder.
func (iu *IdentifierUpdate) Mutation() *IdentifierMutation {
	return iu.mutation
}

// ClearBook clears the "book" edge to the Book entity.
func (iu *IdentifierUpdate) ClearBook() *IdentifierUpdate {
	iu.mutation.ClearBook()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IdentifierUpdate) Save(ctx context.Context) (int, error) {
	if err := iu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IdentifierUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IdentifierUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IdentifierUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *IdentifierUpdate) defaults() error {
	if _, ok := iu.mutation.UpdateTime(); !ok {
		if identifier.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized identifier.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := identifier.UpdateDefaultUpdateTime()
		iu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iu *IdentifierUpdate) check() error {
	if v, ok := iu.mutation.GetType(); ok {
		if err := identifier.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Identifier.type": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Value(); ok {
		if err := identifier.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Identifier.value": %w`, err)}
		}
	}
	if _, ok := iu.mutation.BookID(); iu.mutation.BookCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Identifier.book"`)
	}
	return nil
}

func (iu *IdentifierUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(identifier.Table, identifier.Columns, sqlgraph.NewFieldSpec(identifier.FieldID, field.TypeString))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdateTime(); ok {
		_spec.SetField(identifier.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := iu.mutation.CalibreID(); ok {
		_spec.SetField(identifier.FieldCalibreID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedCalibreID(); ok {
		_spec.AddField(identifier.FieldCalibreID, field.TypeInt64, value)
	}
	if iu.mutation.CalibreIDCleared() {
		_spec.ClearField(identifier.FieldCalibreID, field.TypeInt64)
	}
	if value, ok := iu.mutation.GetType(); ok {
		_spec.SetField(identifier.FieldType, field.TypeString, value)
	}
	if value, ok := iu.mutation.Value(); ok {
		_spec.SetField(identifier.FieldValue, field.TypeString, value)
	}
	if iu.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   identifier.BookTable,
			Columns: []string{identifier.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   identifier.BookTable,
			Columns: []string{identifier.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identifier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IdentifierUpdateOne is the builder for updating a single Identifier entity.
type IdentifierUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdentifierMutation
}

// SetUpdateTime sets the "update_time" field.
func (iuo *IdentifierUpdateOne) SetUpdateTime(t time.Time) *IdentifierUpdateOne {
	iuo.mutation.SetUpdateTime(t)
	return iuo
}

// SetCalibreID sets the "calibre_id" field.
func (iuo *IdentifierUpdateOne) SetCalibreID(i int64) *IdentifierUpdateOne {
	iuo.mutation.ResetCalibreID()
	iuo.mutation.SetCalibreID(i)
	return iuo
}

// SetNillableCalibreID sets the "calibre_id" field if the given value is not nil.
func (iuo *IdentifierUpdateOne) SetNillableCalibreID(i *int64) *IdentifierUpdateOne {
	if i != nil {
		iuo.SetCalibreID(*i)
	}
	return iuo
}

// AddCalibreID adds i to the "calibre_id" field.
func (iuo *IdentifierUpdateOne) AddCalibreID(i int64) *IdentifierUpdateOne {
	iuo.mutation.AddCalibreID(i)
	return iuo
}

// ClearCalibreID clears the value of the "calibre_id" field.
func (iuo *IdentifierUpdateOne) ClearCalibreID() *IdentifierUpdateOne {
	iuo.mutation.ClearCalibreID()
	return iuo
}

// SetType sets the "type" field.
func (iuo *IdentifierUpdateOne) SetType(s string) *IdentifierUpdateOne {
	iuo.mutation.SetType(s)
	return iuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iuo *IdentifierUpdateOne) SetNillableType(s *string) *IdentifierUpdateOne {
	if s != nil {
		iuo.SetType(*s)
	}
	return iuo
}

// SetValue sets the "value" field.
func (iuo *IdentifierUpdateOne) SetValue(s string) *IdentifierUpdateOne {
	iuo.mutation.SetValue(s)
	return iuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (iuo *IdentifierUpdateOne) SetNillableValue(s *string) *IdentifierUpdateOne {
	if s != nil {
		iuo.SetValue(*s)
	}
	return iuo
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (iuo *IdentifierUpdateOne) SetBookID(id ksuid.ID) *IdentifierUpdateOne {
	iuo.mutation.SetBookID(id)
	return iuo
}

// SetBook sets the "book" edge to the Book entity.
func (iuo *IdentifierUpdateOne) SetBook(b *Book) *IdentifierUpdateOne {
	return iuo.SetBookID(b.ID)
}

// Mutation returns the IdentifierMutation object of the builder.
func (iuo *IdentifierUpdateOne) Mutation() *IdentifierMutation {
	return iuo.mutation
}

// ClearBook clears the "book" edge to the Book entity.
func (iuo *IdentifierUpdateOne) ClearBook() *IdentifierUpdateOne {
	iuo.mutation.ClearBook()
	return iuo
}

// Where appends a list predicates to the IdentifierUpdate builder.
func (iuo *IdentifierUpdateOne) Where(ps ...predicate.Identifier) *IdentifierUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IdentifierUpdateOne) Select(field string, fields ...string) *IdentifierUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Identifier entity.
func (iuo *IdentifierUpdateOne) Save(ctx context.Context) (*Identifier, error) {
	if err := iuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IdentifierUpdateOne) SaveX(ctx context.Context) *Identifier {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IdentifierUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IdentifierUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *IdentifierUpdateOne) defaults() error {
	if _, ok := iuo.mutation.UpdateTime(); !ok {
		if identifier.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized identifier.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := identifier.UpdateDefaultUpdateTime()
		iuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IdentifierUpdateOne) check() error {
	if v, ok := iuo.mutation.GetType(); ok {
		if err := identifier.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Identifier.type": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Value(); ok {
		if err := identifier.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Identifier.value": %w`, err)}
		}
	}
	if _, ok := iuo.mutation.BookID(); iuo.mutation.BookCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Identifier.book"`)
	}
	return nil
}

func (iuo *IdentifierUpdateOne) sqlSave(ctx context.Context) (_node *Identifier, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(identifier.Table, identifier.Columns, sqlgraph.NewFieldSpec(identifier.FieldID, field.TypeString))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Identifier.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, identifier.FieldID)
		for _, f := range fields {
			if !identifier.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != identifier.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdateTime(); ok {
		_spec.SetField(identifier.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.CalibreID(); ok {
		_spec.SetField(identifier.FieldCalibreID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedCalibreID(); ok {
		_spec.AddField(identifier.FieldCalibreID, field.TypeInt64, value)
	}
	if iuo.mutation.CalibreIDCleared() {
		_spec.ClearField(identifier.FieldCalibreID, field.TypeInt64)
	}
	if value, ok := iuo.mutation.GetType(); ok {
		_spec.SetField(identifier.FieldType, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Value(); ok {
		_spec.SetField(identifier.FieldValue, field.TypeString, value)
	}
	if iuo.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   identifier.BookTable,
			Columns: []string{identifier.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   identifier.BookTable,
			Columns: []string{identifier.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Identifier{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identifier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
