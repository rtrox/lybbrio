// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lybbrio/internal/ent/author"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/schema/ksuid"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthorCreate is the builder for creating a Author entity.
type AuthorCreate struct {
	config
	mutation *AuthorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (ac *AuthorCreate) SetCreateTime(t time.Time) *AuthorCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AuthorCreate) SetNillableCreateTime(t *time.Time) *AuthorCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AuthorCreate) SetUpdateTime(t time.Time) *AuthorCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AuthorCreate) SetNillableUpdateTime(t *time.Time) *AuthorCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetCalibreID sets the "calibre_id" field.
func (ac *AuthorCreate) SetCalibreID(i int64) *AuthorCreate {
	ac.mutation.SetCalibreID(i)
	return ac
}

// SetNillableCalibreID sets the "calibre_id" field if the given value is not nil.
func (ac *AuthorCreate) SetNillableCalibreID(i *int64) *AuthorCreate {
	if i != nil {
		ac.SetCalibreID(*i)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AuthorCreate) SetName(s string) *AuthorCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetSort sets the "sort" field.
func (ac *AuthorCreate) SetSort(s string) *AuthorCreate {
	ac.mutation.SetSort(s)
	return ac
}

// SetLink sets the "link" field.
func (ac *AuthorCreate) SetLink(s string) *AuthorCreate {
	ac.mutation.SetLink(s)
	return ac
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (ac *AuthorCreate) SetNillableLink(s *string) *AuthorCreate {
	if s != nil {
		ac.SetLink(*s)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AuthorCreate) SetID(k ksuid.ID) *AuthorCreate {
	ac.mutation.SetID(k)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AuthorCreate) SetNillableID(k *ksuid.ID) *AuthorCreate {
	if k != nil {
		ac.SetID(*k)
	}
	return ac
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (ac *AuthorCreate) AddBookIDs(ids ...ksuid.ID) *AuthorCreate {
	ac.mutation.AddBookIDs(ids...)
	return ac
}

// AddBooks adds the "books" edges to the Book entity.
func (ac *AuthorCreate) AddBooks(b ...*Book) *AuthorCreate {
	ids := make([]ksuid.ID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ac.AddBookIDs(ids...)
}

// Mutation returns the AuthorMutation object of the builder.
func (ac *AuthorCreate) Mutation() *AuthorMutation {
	return ac.mutation
}

// Save creates the Author in the database.
func (ac *AuthorCreate) Save(ctx context.Context) (*Author, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AuthorCreate) SaveX(ctx context.Context) *Author {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AuthorCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AuthorCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AuthorCreate) defaults() error {
	if _, ok := ac.mutation.CreateTime(); !ok {
		if author.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized author.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := author.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		if author.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized author.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := author.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		if author.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized author.DefaultID (forgotten import ent/runtime?)")
		}
		v := author.DefaultID()
		ac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AuthorCreate) check() error {
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Author.create_time"`)}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Author.update_time"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Author.name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := author.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Author.name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Author.sort"`)}
	}
	return nil
}

func (ac *AuthorCreate) sqlSave(ctx context.Context) (*Author, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(ksuid.ID); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Author.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AuthorCreate) createSpec() (*Author, *sqlgraph.CreateSpec) {
	var (
		_node = &Author{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(author.Table, sqlgraph.NewFieldSpec(author.FieldID, field.TypeString))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.SetField(author.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.SetField(author.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ac.mutation.CalibreID(); ok {
		_spec.SetField(author.FieldCalibreID, field.TypeInt64, value)
		_node.CalibreID = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(author.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Sort(); ok {
		_spec.SetField(author.FieldSort, field.TypeString, value)
		_node.Sort = value
	}
	if value, ok := ac.mutation.Link(); ok {
		_spec.SetField(author.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if nodes := ac.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   author.BooksTable,
			Columns: author.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Author.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AuthorUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ac *AuthorCreate) OnConflict(opts ...sql.ConflictOption) *AuthorUpsertOne {
	ac.conflict = opts
	return &AuthorUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Author.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AuthorCreate) OnConflictColumns(columns ...string) *AuthorUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AuthorUpsertOne{
		create: ac,
	}
}

type (
	// AuthorUpsertOne is the builder for "upsert"-ing
	//  one Author node.
	AuthorUpsertOne struct {
		create *AuthorCreate
	}

	// AuthorUpsert is the "OnConflict" setter.
	AuthorUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *AuthorUpsert) SetUpdateTime(v time.Time) *AuthorUpsert {
	u.Set(author.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AuthorUpsert) UpdateUpdateTime() *AuthorUpsert {
	u.SetExcluded(author.FieldUpdateTime)
	return u
}

// SetCalibreID sets the "calibre_id" field.
func (u *AuthorUpsert) SetCalibreID(v int64) *AuthorUpsert {
	u.Set(author.FieldCalibreID, v)
	return u
}

// UpdateCalibreID sets the "calibre_id" field to the value that was provided on create.
func (u *AuthorUpsert) UpdateCalibreID() *AuthorUpsert {
	u.SetExcluded(author.FieldCalibreID)
	return u
}

// AddCalibreID adds v to the "calibre_id" field.
func (u *AuthorUpsert) AddCalibreID(v int64) *AuthorUpsert {
	u.Add(author.FieldCalibreID, v)
	return u
}

// ClearCalibreID clears the value of the "calibre_id" field.
func (u *AuthorUpsert) ClearCalibreID() *AuthorUpsert {
	u.SetNull(author.FieldCalibreID)
	return u
}

// SetName sets the "name" field.
func (u *AuthorUpsert) SetName(v string) *AuthorUpsert {
	u.Set(author.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AuthorUpsert) UpdateName() *AuthorUpsert {
	u.SetExcluded(author.FieldName)
	return u
}

// SetSort sets the "sort" field.
func (u *AuthorUpsert) SetSort(v string) *AuthorUpsert {
	u.Set(author.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *AuthorUpsert) UpdateSort() *AuthorUpsert {
	u.SetExcluded(author.FieldSort)
	return u
}

// SetLink sets the "link" field.
func (u *AuthorUpsert) SetLink(v string) *AuthorUpsert {
	u.Set(author.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *AuthorUpsert) UpdateLink() *AuthorUpsert {
	u.SetExcluded(author.FieldLink)
	return u
}

// ClearLink clears the value of the "link" field.
func (u *AuthorUpsert) ClearLink() *AuthorUpsert {
	u.SetNull(author.FieldLink)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Author.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(author.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AuthorUpsertOne) UpdateNewValues() *AuthorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(author.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(author.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Author.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AuthorUpsertOne) Ignore() *AuthorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AuthorUpsertOne) DoNothing() *AuthorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AuthorCreate.OnConflict
// documentation for more info.
func (u *AuthorUpsertOne) Update(set func(*AuthorUpsert)) *AuthorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AuthorUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AuthorUpsertOne) SetUpdateTime(v time.Time) *AuthorUpsertOne {
	return u.Update(func(s *AuthorUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AuthorUpsertOne) UpdateUpdateTime() *AuthorUpsertOne {
	return u.Update(func(s *AuthorUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetCalibreID sets the "calibre_id" field.
func (u *AuthorUpsertOne) SetCalibreID(v int64) *AuthorUpsertOne {
	return u.Update(func(s *AuthorUpsert) {
		s.SetCalibreID(v)
	})
}

// AddCalibreID adds v to the "calibre_id" field.
func (u *AuthorUpsertOne) AddCalibreID(v int64) *AuthorUpsertOne {
	return u.Update(func(s *AuthorUpsert) {
		s.AddCalibreID(v)
	})
}

// UpdateCalibreID sets the "calibre_id" field to the value that was provided on create.
func (u *AuthorUpsertOne) UpdateCalibreID() *AuthorUpsertOne {
	return u.Update(func(s *AuthorUpsert) {
		s.UpdateCalibreID()
	})
}

// ClearCalibreID clears the value of the "calibre_id" field.
func (u *AuthorUpsertOne) ClearCalibreID() *AuthorUpsertOne {
	return u.Update(func(s *AuthorUpsert) {
		s.ClearCalibreID()
	})
}

// SetName sets the "name" field.
func (u *AuthorUpsertOne) SetName(v string) *AuthorUpsertOne {
	return u.Update(func(s *AuthorUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AuthorUpsertOne) UpdateName() *AuthorUpsertOne {
	return u.Update(func(s *AuthorUpsert) {
		s.UpdateName()
	})
}

// SetSort sets the "sort" field.
func (u *AuthorUpsertOne) SetSort(v string) *AuthorUpsertOne {
	return u.Update(func(s *AuthorUpsert) {
		s.SetSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *AuthorUpsertOne) UpdateSort() *AuthorUpsertOne {
	return u.Update(func(s *AuthorUpsert) {
		s.UpdateSort()
	})
}

// SetLink sets the "link" field.
func (u *AuthorUpsertOne) SetLink(v string) *AuthorUpsertOne {
	return u.Update(func(s *AuthorUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *AuthorUpsertOne) UpdateLink() *AuthorUpsertOne {
	return u.Update(func(s *AuthorUpsert) {
		s.UpdateLink()
	})
}

// ClearLink clears the value of the "link" field.
func (u *AuthorUpsertOne) ClearLink() *AuthorUpsertOne {
	return u.Update(func(s *AuthorUpsert) {
		s.ClearLink()
	})
}

// Exec executes the query.
func (u *AuthorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AuthorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AuthorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AuthorUpsertOne) ID(ctx context.Context) (id ksuid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AuthorUpsertOne.ID is not supported by MySQL driver. Use AuthorUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AuthorUpsertOne) IDX(ctx context.Context) ksuid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AuthorCreateBulk is the builder for creating many Author entities in bulk.
type AuthorCreateBulk struct {
	config
	err      error
	builders []*AuthorCreate
	conflict []sql.ConflictOption
}

// Save creates the Author entities in the database.
func (acb *AuthorCreateBulk) Save(ctx context.Context) ([]*Author, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Author, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AuthorCreateBulk) SaveX(ctx context.Context) []*Author {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AuthorCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AuthorCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Author.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AuthorUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (acb *AuthorCreateBulk) OnConflict(opts ...sql.ConflictOption) *AuthorUpsertBulk {
	acb.conflict = opts
	return &AuthorUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Author.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AuthorCreateBulk) OnConflictColumns(columns ...string) *AuthorUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AuthorUpsertBulk{
		create: acb,
	}
}

// AuthorUpsertBulk is the builder for "upsert"-ing
// a bulk of Author nodes.
type AuthorUpsertBulk struct {
	create *AuthorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Author.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(author.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AuthorUpsertBulk) UpdateNewValues() *AuthorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(author.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(author.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Author.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AuthorUpsertBulk) Ignore() *AuthorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AuthorUpsertBulk) DoNothing() *AuthorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AuthorCreateBulk.OnConflict
// documentation for more info.
func (u *AuthorUpsertBulk) Update(set func(*AuthorUpsert)) *AuthorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AuthorUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AuthorUpsertBulk) SetUpdateTime(v time.Time) *AuthorUpsertBulk {
	return u.Update(func(s *AuthorUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AuthorUpsertBulk) UpdateUpdateTime() *AuthorUpsertBulk {
	return u.Update(func(s *AuthorUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetCalibreID sets the "calibre_id" field.
func (u *AuthorUpsertBulk) SetCalibreID(v int64) *AuthorUpsertBulk {
	return u.Update(func(s *AuthorUpsert) {
		s.SetCalibreID(v)
	})
}

// AddCalibreID adds v to the "calibre_id" field.
func (u *AuthorUpsertBulk) AddCalibreID(v int64) *AuthorUpsertBulk {
	return u.Update(func(s *AuthorUpsert) {
		s.AddCalibreID(v)
	})
}

// UpdateCalibreID sets the "calibre_id" field to the value that was provided on create.
func (u *AuthorUpsertBulk) UpdateCalibreID() *AuthorUpsertBulk {
	return u.Update(func(s *AuthorUpsert) {
		s.UpdateCalibreID()
	})
}

// ClearCalibreID clears the value of the "calibre_id" field.
func (u *AuthorUpsertBulk) ClearCalibreID() *AuthorUpsertBulk {
	return u.Update(func(s *AuthorUpsert) {
		s.ClearCalibreID()
	})
}

// SetName sets the "name" field.
func (u *AuthorUpsertBulk) SetName(v string) *AuthorUpsertBulk {
	return u.Update(func(s *AuthorUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AuthorUpsertBulk) UpdateName() *AuthorUpsertBulk {
	return u.Update(func(s *AuthorUpsert) {
		s.UpdateName()
	})
}

// SetSort sets the "sort" field.
func (u *AuthorUpsertBulk) SetSort(v string) *AuthorUpsertBulk {
	return u.Update(func(s *AuthorUpsert) {
		s.SetSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *AuthorUpsertBulk) UpdateSort() *AuthorUpsertBulk {
	return u.Update(func(s *AuthorUpsert) {
		s.UpdateSort()
	})
}

// SetLink sets the "link" field.
func (u *AuthorUpsertBulk) SetLink(v string) *AuthorUpsertBulk {
	return u.Update(func(s *AuthorUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *AuthorUpsertBulk) UpdateLink() *AuthorUpsertBulk {
	return u.Update(func(s *AuthorUpsert) {
		s.UpdateLink()
	})
}

// ClearLink clears the value of the "link" field.
func (u *AuthorUpsertBulk) ClearLink() *AuthorUpsertBulk {
	return u.Update(func(s *AuthorUpsert) {
		s.ClearLink()
	})
}

// Exec executes the query.
func (u *AuthorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AuthorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AuthorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AuthorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
