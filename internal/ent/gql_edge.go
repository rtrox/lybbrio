// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Author) Books(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*BookOrder, where *BookWhereInput,
) (*BookConnection, error) {
	opts := []BookPaginateOption{
		WithBookOrder(orderBy),
		WithBookFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := a.Edges.totalCount[0][alias]
	if nodes, err := a.NamedBooks(alias); err == nil || hasTotalCount {
		pager, err := newBookPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &BookConnection{Edges: []*BookEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return a.QueryBooks().Paginate(ctx, after, first, before, last, opts...)
}

func (b *Book) Authors(ctx context.Context) (result []*Author, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedAuthors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.AuthorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryAuthors().All(ctx)
	}
	return result, err
}

func (b *Book) Publisher(ctx context.Context) (result []*Publisher, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedPublisher(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.PublisherOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryPublisher().All(ctx)
	}
	return result, err
}

func (b *Book) Series(ctx context.Context) (result []*Series, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedSeries(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.SeriesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QuerySeries().All(ctx)
	}
	return result, err
}

func (b *Book) Identifiers(ctx context.Context) (result []*Identifier, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedIdentifiers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.IdentifiersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryIdentifiers().All(ctx)
	}
	return result, err
}

func (b *Book) Tags(ctx context.Context) (result []*Tag, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedTags(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.TagsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryTags().All(ctx)
	}
	return result, err
}

func (b *Book) Language(ctx context.Context) (result []*Language, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedLanguage(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.LanguageOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryLanguage().All(ctx)
	}
	return result, err
}

func (b *Book) Shelf(ctx context.Context) (result []*Shelf, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedShelf(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.ShelfOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryShelf().All(ctx)
	}
	return result, err
}

func (b *Book) Files(ctx context.Context) (result []*BookFile, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedFiles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.FilesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryFiles().All(ctx)
	}
	return result, err
}

func (bf *BookFile) Book(ctx context.Context) (*Book, error) {
	result, err := bf.Edges.BookOrErr()
	if IsNotLoaded(err) {
		result, err = bf.QueryBook().Only(ctx)
	}
	return result, err
}

func (i *Identifier) Book(ctx context.Context) (*Book, error) {
	result, err := i.Edges.BookOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryBook().Only(ctx)
	}
	return result, err
}

func (l *Language) Books(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*BookOrder, where *BookWhereInput,
) (*BookConnection, error) {
	opts := []BookPaginateOption{
		WithBookOrder(orderBy),
		WithBookFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := l.Edges.totalCount[0][alias]
	if nodes, err := l.NamedBooks(alias); err == nil || hasTotalCount {
		pager, err := newBookPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &BookConnection{Edges: []*BookEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return l.QueryBooks().Paginate(ctx, after, first, before, last, opts...)
}

func (pu *Publisher) Books(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*BookOrder, where *BookWhereInput,
) (*BookConnection, error) {
	opts := []BookPaginateOption{
		WithBookOrder(orderBy),
		WithBookFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pu.Edges.totalCount[0][alias]
	if nodes, err := pu.NamedBooks(alias); err == nil || hasTotalCount {
		pager, err := newBookPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &BookConnection{Edges: []*BookEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pu.QueryBooks().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Series) Books(ctx context.Context) (result []*Book, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = s.NamedBooks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = s.Edges.BooksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = s.QueryBooks().All(ctx)
	}
	return result, err
}

func (s *Shelf) User(ctx context.Context) (*User, error) {
	result, err := s.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryUser().Only(ctx)
	}
	return result, err
}

func (s *Shelf) Books(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*BookOrder, where *BookWhereInput,
) (*BookConnection, error) {
	opts := []BookPaginateOption{
		WithBookOrder(orderBy),
		WithBookFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[1][alias]
	if nodes, err := s.NamedBooks(alias); err == nil || hasTotalCount {
		pager, err := newBookPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &BookConnection{Edges: []*BookEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryBooks().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Tag) Books(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*BookOrder, where *BookWhereInput,
) (*BookConnection, error) {
	opts := []BookPaginateOption{
		WithBookOrder(orderBy),
		WithBookFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[0][alias]
	if nodes, err := t.NamedBooks(alias); err == nil || hasTotalCount {
		pager, err := newBookPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &BookConnection{Edges: []*BookEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryBooks().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Task) User(ctx context.Context) (*User, error) {
	result, err := t.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Shelves(ctx context.Context) (result []*Shelf, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedShelves(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ShelvesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryShelves().All(ctx)
	}
	return result, err
}

func (u *User) UserPermissions(ctx context.Context) (*UserPermissions, error) {
	result, err := u.Edges.UserPermissionsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryUserPermissions().Only(ctx)
	}
	return result, err
}

func (up *UserPermissions) User(ctx context.Context) (*User, error) {
	result, err := up.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = up.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}
