// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"lybbrio/internal/ent/author"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/bookcover"
	"lybbrio/internal/ent/bookfile"
	"lybbrio/internal/ent/identifier"
	"lybbrio/internal/ent/language"
	"lybbrio/internal/ent/predicate"
	"lybbrio/internal/ent/publisher"
	"lybbrio/internal/ent/schema/argon2id"
	"lybbrio/internal/ent/schema/ksuid"
	"lybbrio/internal/ent/schema/task_enums"
	"lybbrio/internal/ent/series"
	"lybbrio/internal/ent/shelf"
	"lybbrio/internal/ent/tag"
	"lybbrio/internal/ent/task"
	"lybbrio/internal/ent/user"
	"lybbrio/internal/ent/userpermissions"
	"time"
)

// AuthorWhereInput represents a where input for filtering Author queries.
type AuthorWhereInput struct {
	Predicates []predicate.Author  `json:"-"`
	Not        *AuthorWhereInput   `json:"not,omitempty"`
	Or         []*AuthorWhereInput `json:"or,omitempty"`
	And        []*AuthorWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "calibre_id" field predicates.
	CalibreID       *int64  `json:"calibreID,omitempty"`
	CalibreIDNEQ    *int64  `json:"calibreIDNEQ,omitempty"`
	CalibreIDIn     []int64 `json:"calibreIDIn,omitempty"`
	CalibreIDNotIn  []int64 `json:"calibreIDNotIn,omitempty"`
	CalibreIDGT     *int64  `json:"calibreIDGT,omitempty"`
	CalibreIDGTE    *int64  `json:"calibreIDGTE,omitempty"`
	CalibreIDLT     *int64  `json:"calibreIDLT,omitempty"`
	CalibreIDLTE    *int64  `json:"calibreIDLTE,omitempty"`
	CalibreIDIsNil  bool    `json:"calibreIDIsNil,omitempty"`
	CalibreIDNotNil bool    `json:"calibreIDNotNil,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "sort" field predicates.
	Sort             *string  `json:"sort,omitempty"`
	SortNEQ          *string  `json:"sortNEQ,omitempty"`
	SortIn           []string `json:"sortIn,omitempty"`
	SortNotIn        []string `json:"sortNotIn,omitempty"`
	SortGT           *string  `json:"sortGT,omitempty"`
	SortGTE          *string  `json:"sortGTE,omitempty"`
	SortLT           *string  `json:"sortLT,omitempty"`
	SortLTE          *string  `json:"sortLTE,omitempty"`
	SortContains     *string  `json:"sortContains,omitempty"`
	SortHasPrefix    *string  `json:"sortHasPrefix,omitempty"`
	SortHasSuffix    *string  `json:"sortHasSuffix,omitempty"`
	SortEqualFold    *string  `json:"sortEqualFold,omitempty"`
	SortContainsFold *string  `json:"sortContainsFold,omitempty"`

	// "link" field predicates.
	Link             *string  `json:"link,omitempty"`
	LinkNEQ          *string  `json:"linkNEQ,omitempty"`
	LinkIn           []string `json:"linkIn,omitempty"`
	LinkNotIn        []string `json:"linkNotIn,omitempty"`
	LinkGT           *string  `json:"linkGT,omitempty"`
	LinkGTE          *string  `json:"linkGTE,omitempty"`
	LinkLT           *string  `json:"linkLT,omitempty"`
	LinkLTE          *string  `json:"linkLTE,omitempty"`
	LinkContains     *string  `json:"linkContains,omitempty"`
	LinkHasPrefix    *string  `json:"linkHasPrefix,omitempty"`
	LinkHasSuffix    *string  `json:"linkHasSuffix,omitempty"`
	LinkIsNil        bool     `json:"linkIsNil,omitempty"`
	LinkNotNil       bool     `json:"linkNotNil,omitempty"`
	LinkEqualFold    *string  `json:"linkEqualFold,omitempty"`
	LinkContainsFold *string  `json:"linkContainsFold,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *AuthorWhereInput) AddPredicates(predicates ...predicate.Author) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the AuthorWhereInput filter on the AuthorQuery builder.
func (i *AuthorWhereInput) Filter(q *AuthorQuery) (*AuthorQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyAuthorWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyAuthorWhereInput is returned in case the AuthorWhereInput is empty.
var ErrEmptyAuthorWhereInput = errors.New("ent: empty predicate AuthorWhereInput")

// P returns a predicate for filtering authors.
// An error is returned if the input is empty or invalid.
func (i *AuthorWhereInput) P() (predicate.Author, error) {
	var predicates []predicate.Author
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, author.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Author, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, author.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Author, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, author.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, author.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, author.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, author.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, author.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, author.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, author.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, author.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, author.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, author.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, author.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, author.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, author.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, author.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, author.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, author.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, author.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, author.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, author.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, author.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, author.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, author.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, author.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, author.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, author.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.CalibreID != nil {
		predicates = append(predicates, author.CalibreIDEQ(*i.CalibreID))
	}
	if i.CalibreIDNEQ != nil {
		predicates = append(predicates, author.CalibreIDNEQ(*i.CalibreIDNEQ))
	}
	if len(i.CalibreIDIn) > 0 {
		predicates = append(predicates, author.CalibreIDIn(i.CalibreIDIn...))
	}
	if len(i.CalibreIDNotIn) > 0 {
		predicates = append(predicates, author.CalibreIDNotIn(i.CalibreIDNotIn...))
	}
	if i.CalibreIDGT != nil {
		predicates = append(predicates, author.CalibreIDGT(*i.CalibreIDGT))
	}
	if i.CalibreIDGTE != nil {
		predicates = append(predicates, author.CalibreIDGTE(*i.CalibreIDGTE))
	}
	if i.CalibreIDLT != nil {
		predicates = append(predicates, author.CalibreIDLT(*i.CalibreIDLT))
	}
	if i.CalibreIDLTE != nil {
		predicates = append(predicates, author.CalibreIDLTE(*i.CalibreIDLTE))
	}
	if i.CalibreIDIsNil {
		predicates = append(predicates, author.CalibreIDIsNil())
	}
	if i.CalibreIDNotNil {
		predicates = append(predicates, author.CalibreIDNotNil())
	}
	if i.Name != nil {
		predicates = append(predicates, author.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, author.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, author.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, author.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, author.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, author.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, author.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, author.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, author.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, author.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, author.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, author.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, author.NameContainsFold(*i.NameContainsFold))
	}
	if i.Sort != nil {
		predicates = append(predicates, author.SortEQ(*i.Sort))
	}
	if i.SortNEQ != nil {
		predicates = append(predicates, author.SortNEQ(*i.SortNEQ))
	}
	if len(i.SortIn) > 0 {
		predicates = append(predicates, author.SortIn(i.SortIn...))
	}
	if len(i.SortNotIn) > 0 {
		predicates = append(predicates, author.SortNotIn(i.SortNotIn...))
	}
	if i.SortGT != nil {
		predicates = append(predicates, author.SortGT(*i.SortGT))
	}
	if i.SortGTE != nil {
		predicates = append(predicates, author.SortGTE(*i.SortGTE))
	}
	if i.SortLT != nil {
		predicates = append(predicates, author.SortLT(*i.SortLT))
	}
	if i.SortLTE != nil {
		predicates = append(predicates, author.SortLTE(*i.SortLTE))
	}
	if i.SortContains != nil {
		predicates = append(predicates, author.SortContains(*i.SortContains))
	}
	if i.SortHasPrefix != nil {
		predicates = append(predicates, author.SortHasPrefix(*i.SortHasPrefix))
	}
	if i.SortHasSuffix != nil {
		predicates = append(predicates, author.SortHasSuffix(*i.SortHasSuffix))
	}
	if i.SortEqualFold != nil {
		predicates = append(predicates, author.SortEqualFold(*i.SortEqualFold))
	}
	if i.SortContainsFold != nil {
		predicates = append(predicates, author.SortContainsFold(*i.SortContainsFold))
	}
	if i.Link != nil {
		predicates = append(predicates, author.LinkEQ(*i.Link))
	}
	if i.LinkNEQ != nil {
		predicates = append(predicates, author.LinkNEQ(*i.LinkNEQ))
	}
	if len(i.LinkIn) > 0 {
		predicates = append(predicates, author.LinkIn(i.LinkIn...))
	}
	if len(i.LinkNotIn) > 0 {
		predicates = append(predicates, author.LinkNotIn(i.LinkNotIn...))
	}
	if i.LinkGT != nil {
		predicates = append(predicates, author.LinkGT(*i.LinkGT))
	}
	if i.LinkGTE != nil {
		predicates = append(predicates, author.LinkGTE(*i.LinkGTE))
	}
	if i.LinkLT != nil {
		predicates = append(predicates, author.LinkLT(*i.LinkLT))
	}
	if i.LinkLTE != nil {
		predicates = append(predicates, author.LinkLTE(*i.LinkLTE))
	}
	if i.LinkContains != nil {
		predicates = append(predicates, author.LinkContains(*i.LinkContains))
	}
	if i.LinkHasPrefix != nil {
		predicates = append(predicates, author.LinkHasPrefix(*i.LinkHasPrefix))
	}
	if i.LinkHasSuffix != nil {
		predicates = append(predicates, author.LinkHasSuffix(*i.LinkHasSuffix))
	}
	if i.LinkIsNil {
		predicates = append(predicates, author.LinkIsNil())
	}
	if i.LinkNotNil {
		predicates = append(predicates, author.LinkNotNil())
	}
	if i.LinkEqualFold != nil {
		predicates = append(predicates, author.LinkEqualFold(*i.LinkEqualFold))
	}
	if i.LinkContainsFold != nil {
		predicates = append(predicates, author.LinkContainsFold(*i.LinkContainsFold))
	}

	if i.HasBooks != nil {
		p := author.HasBooks()
		if !*i.HasBooks {
			p = author.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, author.HasBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyAuthorWhereInput
	case 1:
		return predicates[0], nil
	default:
		return author.And(predicates...), nil
	}
}

// BookWhereInput represents a where input for filtering Book queries.
type BookWhereInput struct {
	Predicates []predicate.Book  `json:"-"`
	Not        *BookWhereInput   `json:"not,omitempty"`
	Or         []*BookWhereInput `json:"or,omitempty"`
	And        []*BookWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "calibre_id" field predicates.
	CalibreID       *int64  `json:"calibreID,omitempty"`
	CalibreIDNEQ    *int64  `json:"calibreIDNEQ,omitempty"`
	CalibreIDIn     []int64 `json:"calibreIDIn,omitempty"`
	CalibreIDNotIn  []int64 `json:"calibreIDNotIn,omitempty"`
	CalibreIDGT     *int64  `json:"calibreIDGT,omitempty"`
	CalibreIDGTE    *int64  `json:"calibreIDGTE,omitempty"`
	CalibreIDLT     *int64  `json:"calibreIDLT,omitempty"`
	CalibreIDLTE    *int64  `json:"calibreIDLTE,omitempty"`
	CalibreIDIsNil  bool    `json:"calibreIDIsNil,omitempty"`
	CalibreIDNotNil bool    `json:"calibreIDNotNil,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "sort" field predicates.
	Sort             *string  `json:"sort,omitempty"`
	SortNEQ          *string  `json:"sortNEQ,omitempty"`
	SortIn           []string `json:"sortIn,omitempty"`
	SortNotIn        []string `json:"sortNotIn,omitempty"`
	SortGT           *string  `json:"sortGT,omitempty"`
	SortGTE          *string  `json:"sortGTE,omitempty"`
	SortLT           *string  `json:"sortLT,omitempty"`
	SortLTE          *string  `json:"sortLTE,omitempty"`
	SortContains     *string  `json:"sortContains,omitempty"`
	SortHasPrefix    *string  `json:"sortHasPrefix,omitempty"`
	SortHasSuffix    *string  `json:"sortHasSuffix,omitempty"`
	SortEqualFold    *string  `json:"sortEqualFold,omitempty"`
	SortContainsFold *string  `json:"sortContainsFold,omitempty"`

	// "published_date" field predicates.
	PublishedDate       *time.Time  `json:"publishedDate,omitempty"`
	PublishedDateNEQ    *time.Time  `json:"publishedDateNEQ,omitempty"`
	PublishedDateIn     []time.Time `json:"publishedDateIn,omitempty"`
	PublishedDateNotIn  []time.Time `json:"publishedDateNotIn,omitempty"`
	PublishedDateGT     *time.Time  `json:"publishedDateGT,omitempty"`
	PublishedDateGTE    *time.Time  `json:"publishedDateGTE,omitempty"`
	PublishedDateLT     *time.Time  `json:"publishedDateLT,omitempty"`
	PublishedDateLTE    *time.Time  `json:"publishedDateLTE,omitempty"`
	PublishedDateIsNil  bool        `json:"publishedDateIsNil,omitempty"`
	PublishedDateNotNil bool        `json:"publishedDateNotNil,omitempty"`

	// "path" field predicates.
	Path             *string  `json:"path,omitempty"`
	PathNEQ          *string  `json:"pathNEQ,omitempty"`
	PathIn           []string `json:"pathIn,omitempty"`
	PathNotIn        []string `json:"pathNotIn,omitempty"`
	PathGT           *string  `json:"pathGT,omitempty"`
	PathGTE          *string  `json:"pathGTE,omitempty"`
	PathLT           *string  `json:"pathLT,omitempty"`
	PathLTE          *string  `json:"pathLTE,omitempty"`
	PathContains     *string  `json:"pathContains,omitempty"`
	PathHasPrefix    *string  `json:"pathHasPrefix,omitempty"`
	PathHasSuffix    *string  `json:"pathHasSuffix,omitempty"`
	PathEqualFold    *string  `json:"pathEqualFold,omitempty"`
	PathContainsFold *string  `json:"pathContainsFold,omitempty"`

	// "isbn" field predicates.
	Isbn             *string  `json:"isbn,omitempty"`
	IsbnNEQ          *string  `json:"isbnNEQ,omitempty"`
	IsbnIn           []string `json:"isbnIn,omitempty"`
	IsbnNotIn        []string `json:"isbnNotIn,omitempty"`
	IsbnGT           *string  `json:"isbnGT,omitempty"`
	IsbnGTE          *string  `json:"isbnGTE,omitempty"`
	IsbnLT           *string  `json:"isbnLT,omitempty"`
	IsbnLTE          *string  `json:"isbnLTE,omitempty"`
	IsbnContains     *string  `json:"isbnContains,omitempty"`
	IsbnHasPrefix    *string  `json:"isbnHasPrefix,omitempty"`
	IsbnHasSuffix    *string  `json:"isbnHasSuffix,omitempty"`
	IsbnIsNil        bool     `json:"isbnIsNil,omitempty"`
	IsbnNotNil       bool     `json:"isbnNotNil,omitempty"`
	IsbnEqualFold    *string  `json:"isbnEqualFold,omitempty"`
	IsbnContainsFold *string  `json:"isbnContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "series_index" field predicates.
	SeriesIndex       *float64  `json:"seriesIndex,omitempty"`
	SeriesIndexNEQ    *float64  `json:"seriesIndexNEQ,omitempty"`
	SeriesIndexIn     []float64 `json:"seriesIndexIn,omitempty"`
	SeriesIndexNotIn  []float64 `json:"seriesIndexNotIn,omitempty"`
	SeriesIndexGT     *float64  `json:"seriesIndexGT,omitempty"`
	SeriesIndexGTE    *float64  `json:"seriesIndexGTE,omitempty"`
	SeriesIndexLT     *float64  `json:"seriesIndexLT,omitempty"`
	SeriesIndexLTE    *float64  `json:"seriesIndexLTE,omitempty"`
	SeriesIndexIsNil  bool      `json:"seriesIndexIsNil,omitempty"`
	SeriesIndexNotNil bool      `json:"seriesIndexNotNil,omitempty"`

	// "authors" edge predicates.
	HasAuthors     *bool               `json:"hasAuthors,omitempty"`
	HasAuthorsWith []*AuthorWhereInput `json:"hasAuthorsWith,omitempty"`

	// "publisher" edge predicates.
	HasPublisher     *bool                  `json:"hasPublisher,omitempty"`
	HasPublisherWith []*PublisherWhereInput `json:"hasPublisherWith,omitempty"`

	// "series" edge predicates.
	HasSeries     *bool               `json:"hasSeries,omitempty"`
	HasSeriesWith []*SeriesWhereInput `json:"hasSeriesWith,omitempty"`

	// "identifiers" edge predicates.
	HasIdentifiers     *bool                   `json:"hasIdentifiers,omitempty"`
	HasIdentifiersWith []*IdentifierWhereInput `json:"hasIdentifiersWith,omitempty"`

	// "tags" edge predicates.
	HasTags     *bool            `json:"hasTags,omitempty"`
	HasTagsWith []*TagWhereInput `json:"hasTagsWith,omitempty"`

	// "language" edge predicates.
	HasLanguage     *bool                 `json:"hasLanguage,omitempty"`
	HasLanguageWith []*LanguageWhereInput `json:"hasLanguageWith,omitempty"`

	// "shelf" edge predicates.
	HasShelf     *bool              `json:"hasShelf,omitempty"`
	HasShelfWith []*ShelfWhereInput `json:"hasShelfWith,omitempty"`

	// "files" edge predicates.
	HasFiles     *bool                 `json:"hasFiles,omitempty"`
	HasFilesWith []*BookFileWhereInput `json:"hasFilesWith,omitempty"`

	// "covers" edge predicates.
	HasCovers     *bool                  `json:"hasCovers,omitempty"`
	HasCoversWith []*BookCoverWhereInput `json:"hasCoversWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *BookWhereInput) AddPredicates(predicates ...predicate.Book) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the BookWhereInput filter on the BookQuery builder.
func (i *BookWhereInput) Filter(q *BookQuery) (*BookQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyBookWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyBookWhereInput is returned in case the BookWhereInput is empty.
var ErrEmptyBookWhereInput = errors.New("ent: empty predicate BookWhereInput")

// P returns a predicate for filtering books.
// An error is returned if the input is empty or invalid.
func (i *BookWhereInput) P() (predicate.Book, error) {
	var predicates []predicate.Book
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, book.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Book, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, book.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Book, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, book.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, book.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, book.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, book.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, book.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, book.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, book.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, book.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, book.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, book.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, book.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, book.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, book.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, book.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, book.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, book.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, book.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, book.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, book.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, book.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, book.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, book.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, book.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, book.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, book.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.CalibreID != nil {
		predicates = append(predicates, book.CalibreIDEQ(*i.CalibreID))
	}
	if i.CalibreIDNEQ != nil {
		predicates = append(predicates, book.CalibreIDNEQ(*i.CalibreIDNEQ))
	}
	if len(i.CalibreIDIn) > 0 {
		predicates = append(predicates, book.CalibreIDIn(i.CalibreIDIn...))
	}
	if len(i.CalibreIDNotIn) > 0 {
		predicates = append(predicates, book.CalibreIDNotIn(i.CalibreIDNotIn...))
	}
	if i.CalibreIDGT != nil {
		predicates = append(predicates, book.CalibreIDGT(*i.CalibreIDGT))
	}
	if i.CalibreIDGTE != nil {
		predicates = append(predicates, book.CalibreIDGTE(*i.CalibreIDGTE))
	}
	if i.CalibreIDLT != nil {
		predicates = append(predicates, book.CalibreIDLT(*i.CalibreIDLT))
	}
	if i.CalibreIDLTE != nil {
		predicates = append(predicates, book.CalibreIDLTE(*i.CalibreIDLTE))
	}
	if i.CalibreIDIsNil {
		predicates = append(predicates, book.CalibreIDIsNil())
	}
	if i.CalibreIDNotNil {
		predicates = append(predicates, book.CalibreIDNotNil())
	}
	if i.Title != nil {
		predicates = append(predicates, book.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, book.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, book.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, book.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, book.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, book.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, book.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, book.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, book.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, book.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, book.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, book.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, book.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Sort != nil {
		predicates = append(predicates, book.SortEQ(*i.Sort))
	}
	if i.SortNEQ != nil {
		predicates = append(predicates, book.SortNEQ(*i.SortNEQ))
	}
	if len(i.SortIn) > 0 {
		predicates = append(predicates, book.SortIn(i.SortIn...))
	}
	if len(i.SortNotIn) > 0 {
		predicates = append(predicates, book.SortNotIn(i.SortNotIn...))
	}
	if i.SortGT != nil {
		predicates = append(predicates, book.SortGT(*i.SortGT))
	}
	if i.SortGTE != nil {
		predicates = append(predicates, book.SortGTE(*i.SortGTE))
	}
	if i.SortLT != nil {
		predicates = append(predicates, book.SortLT(*i.SortLT))
	}
	if i.SortLTE != nil {
		predicates = append(predicates, book.SortLTE(*i.SortLTE))
	}
	if i.SortContains != nil {
		predicates = append(predicates, book.SortContains(*i.SortContains))
	}
	if i.SortHasPrefix != nil {
		predicates = append(predicates, book.SortHasPrefix(*i.SortHasPrefix))
	}
	if i.SortHasSuffix != nil {
		predicates = append(predicates, book.SortHasSuffix(*i.SortHasSuffix))
	}
	if i.SortEqualFold != nil {
		predicates = append(predicates, book.SortEqualFold(*i.SortEqualFold))
	}
	if i.SortContainsFold != nil {
		predicates = append(predicates, book.SortContainsFold(*i.SortContainsFold))
	}
	if i.PublishedDate != nil {
		predicates = append(predicates, book.PublishedDateEQ(*i.PublishedDate))
	}
	if i.PublishedDateNEQ != nil {
		predicates = append(predicates, book.PublishedDateNEQ(*i.PublishedDateNEQ))
	}
	if len(i.PublishedDateIn) > 0 {
		predicates = append(predicates, book.PublishedDateIn(i.PublishedDateIn...))
	}
	if len(i.PublishedDateNotIn) > 0 {
		predicates = append(predicates, book.PublishedDateNotIn(i.PublishedDateNotIn...))
	}
	if i.PublishedDateGT != nil {
		predicates = append(predicates, book.PublishedDateGT(*i.PublishedDateGT))
	}
	if i.PublishedDateGTE != nil {
		predicates = append(predicates, book.PublishedDateGTE(*i.PublishedDateGTE))
	}
	if i.PublishedDateLT != nil {
		predicates = append(predicates, book.PublishedDateLT(*i.PublishedDateLT))
	}
	if i.PublishedDateLTE != nil {
		predicates = append(predicates, book.PublishedDateLTE(*i.PublishedDateLTE))
	}
	if i.PublishedDateIsNil {
		predicates = append(predicates, book.PublishedDateIsNil())
	}
	if i.PublishedDateNotNil {
		predicates = append(predicates, book.PublishedDateNotNil())
	}
	if i.Path != nil {
		predicates = append(predicates, book.PathEQ(*i.Path))
	}
	if i.PathNEQ != nil {
		predicates = append(predicates, book.PathNEQ(*i.PathNEQ))
	}
	if len(i.PathIn) > 0 {
		predicates = append(predicates, book.PathIn(i.PathIn...))
	}
	if len(i.PathNotIn) > 0 {
		predicates = append(predicates, book.PathNotIn(i.PathNotIn...))
	}
	if i.PathGT != nil {
		predicates = append(predicates, book.PathGT(*i.PathGT))
	}
	if i.PathGTE != nil {
		predicates = append(predicates, book.PathGTE(*i.PathGTE))
	}
	if i.PathLT != nil {
		predicates = append(predicates, book.PathLT(*i.PathLT))
	}
	if i.PathLTE != nil {
		predicates = append(predicates, book.PathLTE(*i.PathLTE))
	}
	if i.PathContains != nil {
		predicates = append(predicates, book.PathContains(*i.PathContains))
	}
	if i.PathHasPrefix != nil {
		predicates = append(predicates, book.PathHasPrefix(*i.PathHasPrefix))
	}
	if i.PathHasSuffix != nil {
		predicates = append(predicates, book.PathHasSuffix(*i.PathHasSuffix))
	}
	if i.PathEqualFold != nil {
		predicates = append(predicates, book.PathEqualFold(*i.PathEqualFold))
	}
	if i.PathContainsFold != nil {
		predicates = append(predicates, book.PathContainsFold(*i.PathContainsFold))
	}
	if i.Isbn != nil {
		predicates = append(predicates, book.IsbnEQ(*i.Isbn))
	}
	if i.IsbnNEQ != nil {
		predicates = append(predicates, book.IsbnNEQ(*i.IsbnNEQ))
	}
	if len(i.IsbnIn) > 0 {
		predicates = append(predicates, book.IsbnIn(i.IsbnIn...))
	}
	if len(i.IsbnNotIn) > 0 {
		predicates = append(predicates, book.IsbnNotIn(i.IsbnNotIn...))
	}
	if i.IsbnGT != nil {
		predicates = append(predicates, book.IsbnGT(*i.IsbnGT))
	}
	if i.IsbnGTE != nil {
		predicates = append(predicates, book.IsbnGTE(*i.IsbnGTE))
	}
	if i.IsbnLT != nil {
		predicates = append(predicates, book.IsbnLT(*i.IsbnLT))
	}
	if i.IsbnLTE != nil {
		predicates = append(predicates, book.IsbnLTE(*i.IsbnLTE))
	}
	if i.IsbnContains != nil {
		predicates = append(predicates, book.IsbnContains(*i.IsbnContains))
	}
	if i.IsbnHasPrefix != nil {
		predicates = append(predicates, book.IsbnHasPrefix(*i.IsbnHasPrefix))
	}
	if i.IsbnHasSuffix != nil {
		predicates = append(predicates, book.IsbnHasSuffix(*i.IsbnHasSuffix))
	}
	if i.IsbnIsNil {
		predicates = append(predicates, book.IsbnIsNil())
	}
	if i.IsbnNotNil {
		predicates = append(predicates, book.IsbnNotNil())
	}
	if i.IsbnEqualFold != nil {
		predicates = append(predicates, book.IsbnEqualFold(*i.IsbnEqualFold))
	}
	if i.IsbnContainsFold != nil {
		predicates = append(predicates, book.IsbnContainsFold(*i.IsbnContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, book.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, book.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, book.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, book.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, book.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, book.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, book.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, book.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, book.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, book.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, book.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, book.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, book.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, book.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, book.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.SeriesIndex != nil {
		predicates = append(predicates, book.SeriesIndexEQ(*i.SeriesIndex))
	}
	if i.SeriesIndexNEQ != nil {
		predicates = append(predicates, book.SeriesIndexNEQ(*i.SeriesIndexNEQ))
	}
	if len(i.SeriesIndexIn) > 0 {
		predicates = append(predicates, book.SeriesIndexIn(i.SeriesIndexIn...))
	}
	if len(i.SeriesIndexNotIn) > 0 {
		predicates = append(predicates, book.SeriesIndexNotIn(i.SeriesIndexNotIn...))
	}
	if i.SeriesIndexGT != nil {
		predicates = append(predicates, book.SeriesIndexGT(*i.SeriesIndexGT))
	}
	if i.SeriesIndexGTE != nil {
		predicates = append(predicates, book.SeriesIndexGTE(*i.SeriesIndexGTE))
	}
	if i.SeriesIndexLT != nil {
		predicates = append(predicates, book.SeriesIndexLT(*i.SeriesIndexLT))
	}
	if i.SeriesIndexLTE != nil {
		predicates = append(predicates, book.SeriesIndexLTE(*i.SeriesIndexLTE))
	}
	if i.SeriesIndexIsNil {
		predicates = append(predicates, book.SeriesIndexIsNil())
	}
	if i.SeriesIndexNotNil {
		predicates = append(predicates, book.SeriesIndexNotNil())
	}

	if i.HasAuthors != nil {
		p := book.HasAuthors()
		if !*i.HasAuthors {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAuthorsWith) > 0 {
		with := make([]predicate.Author, 0, len(i.HasAuthorsWith))
		for _, w := range i.HasAuthorsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAuthorsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasAuthorsWith(with...))
	}
	if i.HasPublisher != nil {
		p := book.HasPublisher()
		if !*i.HasPublisher {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPublisherWith) > 0 {
		with := make([]predicate.Publisher, 0, len(i.HasPublisherWith))
		for _, w := range i.HasPublisherWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPublisherWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasPublisherWith(with...))
	}
	if i.HasSeries != nil {
		p := book.HasSeries()
		if !*i.HasSeries {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSeriesWith) > 0 {
		with := make([]predicate.Series, 0, len(i.HasSeriesWith))
		for _, w := range i.HasSeriesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSeriesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasSeriesWith(with...))
	}
	if i.HasIdentifiers != nil {
		p := book.HasIdentifiers()
		if !*i.HasIdentifiers {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIdentifiersWith) > 0 {
		with := make([]predicate.Identifier, 0, len(i.HasIdentifiersWith))
		for _, w := range i.HasIdentifiersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasIdentifiersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasIdentifiersWith(with...))
	}
	if i.HasTags != nil {
		p := book.HasTags()
		if !*i.HasTags {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTagsWith) > 0 {
		with := make([]predicate.Tag, 0, len(i.HasTagsWith))
		for _, w := range i.HasTagsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTagsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasTagsWith(with...))
	}
	if i.HasLanguage != nil {
		p := book.HasLanguage()
		if !*i.HasLanguage {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLanguageWith) > 0 {
		with := make([]predicate.Language, 0, len(i.HasLanguageWith))
		for _, w := range i.HasLanguageWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLanguageWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasLanguageWith(with...))
	}
	if i.HasShelf != nil {
		p := book.HasShelf()
		if !*i.HasShelf {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasShelfWith) > 0 {
		with := make([]predicate.Shelf, 0, len(i.HasShelfWith))
		for _, w := range i.HasShelfWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasShelfWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasShelfWith(with...))
	}
	if i.HasFiles != nil {
		p := book.HasFiles()
		if !*i.HasFiles {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFilesWith) > 0 {
		with := make([]predicate.BookFile, 0, len(i.HasFilesWith))
		for _, w := range i.HasFilesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFilesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasFilesWith(with...))
	}
	if i.HasCovers != nil {
		p := book.HasCovers()
		if !*i.HasCovers {
			p = book.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCoversWith) > 0 {
		with := make([]predicate.BookCover, 0, len(i.HasCoversWith))
		for _, w := range i.HasCoversWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCoversWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, book.HasCoversWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyBookWhereInput
	case 1:
		return predicates[0], nil
	default:
		return book.And(predicates...), nil
	}
}

// BookCoverWhereInput represents a where input for filtering BookCover queries.
type BookCoverWhereInput struct {
	Predicates []predicate.BookCover  `json:"-"`
	Not        *BookCoverWhereInput   `json:"not,omitempty"`
	Or         []*BookCoverWhereInput `json:"or,omitempty"`
	And        []*BookCoverWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "path" field predicates.
	Path             *string  `json:"path,omitempty"`
	PathNEQ          *string  `json:"pathNEQ,omitempty"`
	PathIn           []string `json:"pathIn,omitempty"`
	PathNotIn        []string `json:"pathNotIn,omitempty"`
	PathGT           *string  `json:"pathGT,omitempty"`
	PathGTE          *string  `json:"pathGTE,omitempty"`
	PathLT           *string  `json:"pathLT,omitempty"`
	PathLTE          *string  `json:"pathLTE,omitempty"`
	PathContains     *string  `json:"pathContains,omitempty"`
	PathHasPrefix    *string  `json:"pathHasPrefix,omitempty"`
	PathHasSuffix    *string  `json:"pathHasSuffix,omitempty"`
	PathEqualFold    *string  `json:"pathEqualFold,omitempty"`
	PathContainsFold *string  `json:"pathContainsFold,omitempty"`

	// "size" field predicates.
	Size      *int64  `json:"size,omitempty"`
	SizeNEQ   *int64  `json:"sizeNEQ,omitempty"`
	SizeIn    []int64 `json:"sizeIn,omitempty"`
	SizeNotIn []int64 `json:"sizeNotIn,omitempty"`
	SizeGT    *int64  `json:"sizeGT,omitempty"`
	SizeGTE   *int64  `json:"sizeGTE,omitempty"`
	SizeLT    *int64  `json:"sizeLT,omitempty"`
	SizeLTE   *int64  `json:"sizeLTE,omitempty"`

	// "width" field predicates.
	Width      *int  `json:"width,omitempty"`
	WidthNEQ   *int  `json:"widthNEQ,omitempty"`
	WidthIn    []int `json:"widthIn,omitempty"`
	WidthNotIn []int `json:"widthNotIn,omitempty"`
	WidthGT    *int  `json:"widthGT,omitempty"`
	WidthGTE   *int  `json:"widthGTE,omitempty"`
	WidthLT    *int  `json:"widthLT,omitempty"`
	WidthLTE   *int  `json:"widthLTE,omitempty"`

	// "height" field predicates.
	Height      *int  `json:"height,omitempty"`
	HeightNEQ   *int  `json:"heightNEQ,omitempty"`
	HeightIn    []int `json:"heightIn,omitempty"`
	HeightNotIn []int `json:"heightNotIn,omitempty"`
	HeightGT    *int  `json:"heightGT,omitempty"`
	HeightGTE   *int  `json:"heightGTE,omitempty"`
	HeightLT    *int  `json:"heightLT,omitempty"`
	HeightLTE   *int  `json:"heightLTE,omitempty"`

	// "url" field predicates.
	URL             *string  `json:"url,omitempty"`
	URLNEQ          *string  `json:"urlNEQ,omitempty"`
	URLIn           []string `json:"urlIn,omitempty"`
	URLNotIn        []string `json:"urlNotIn,omitempty"`
	URLGT           *string  `json:"urlGT,omitempty"`
	URLGTE          *string  `json:"urlGTE,omitempty"`
	URLLT           *string  `json:"urlLT,omitempty"`
	URLLTE          *string  `json:"urlLTE,omitempty"`
	URLContains     *string  `json:"urlContains,omitempty"`
	URLHasPrefix    *string  `json:"urlHasPrefix,omitempty"`
	URLHasSuffix    *string  `json:"urlHasSuffix,omitempty"`
	URLEqualFold    *string  `json:"urlEqualFold,omitempty"`
	URLContainsFold *string  `json:"urlContainsFold,omitempty"`

	// "contentType" field predicates.
	ContentType             *string  `json:"contenttype,omitempty"`
	ContentTypeNEQ          *string  `json:"contenttypeNEQ,omitempty"`
	ContentTypeIn           []string `json:"contenttypeIn,omitempty"`
	ContentTypeNotIn        []string `json:"contenttypeNotIn,omitempty"`
	ContentTypeGT           *string  `json:"contenttypeGT,omitempty"`
	ContentTypeGTE          *string  `json:"contenttypeGTE,omitempty"`
	ContentTypeLT           *string  `json:"contenttypeLT,omitempty"`
	ContentTypeLTE          *string  `json:"contenttypeLTE,omitempty"`
	ContentTypeContains     *string  `json:"contenttypeContains,omitempty"`
	ContentTypeHasPrefix    *string  `json:"contenttypeHasPrefix,omitempty"`
	ContentTypeHasSuffix    *string  `json:"contenttypeHasSuffix,omitempty"`
	ContentTypeEqualFold    *string  `json:"contenttypeEqualFold,omitempty"`
	ContentTypeContainsFold *string  `json:"contenttypeContainsFold,omitempty"`

	// "book" edge predicates.
	HasBook     *bool             `json:"hasBook,omitempty"`
	HasBookWith []*BookWhereInput `json:"hasBookWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *BookCoverWhereInput) AddPredicates(predicates ...predicate.BookCover) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the BookCoverWhereInput filter on the BookCoverQuery builder.
func (i *BookCoverWhereInput) Filter(q *BookCoverQuery) (*BookCoverQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyBookCoverWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyBookCoverWhereInput is returned in case the BookCoverWhereInput is empty.
var ErrEmptyBookCoverWhereInput = errors.New("ent: empty predicate BookCoverWhereInput")

// P returns a predicate for filtering bookcovers.
// An error is returned if the input is empty or invalid.
func (i *BookCoverWhereInput) P() (predicate.BookCover, error) {
	var predicates []predicate.BookCover
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, bookcover.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.BookCover, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, bookcover.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.BookCover, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, bookcover.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, bookcover.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, bookcover.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, bookcover.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, bookcover.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, bookcover.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, bookcover.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, bookcover.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, bookcover.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, bookcover.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, bookcover.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, bookcover.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, bookcover.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, bookcover.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, bookcover.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, bookcover.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, bookcover.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, bookcover.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, bookcover.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, bookcover.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, bookcover.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, bookcover.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, bookcover.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, bookcover.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, bookcover.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Path != nil {
		predicates = append(predicates, bookcover.PathEQ(*i.Path))
	}
	if i.PathNEQ != nil {
		predicates = append(predicates, bookcover.PathNEQ(*i.PathNEQ))
	}
	if len(i.PathIn) > 0 {
		predicates = append(predicates, bookcover.PathIn(i.PathIn...))
	}
	if len(i.PathNotIn) > 0 {
		predicates = append(predicates, bookcover.PathNotIn(i.PathNotIn...))
	}
	if i.PathGT != nil {
		predicates = append(predicates, bookcover.PathGT(*i.PathGT))
	}
	if i.PathGTE != nil {
		predicates = append(predicates, bookcover.PathGTE(*i.PathGTE))
	}
	if i.PathLT != nil {
		predicates = append(predicates, bookcover.PathLT(*i.PathLT))
	}
	if i.PathLTE != nil {
		predicates = append(predicates, bookcover.PathLTE(*i.PathLTE))
	}
	if i.PathContains != nil {
		predicates = append(predicates, bookcover.PathContains(*i.PathContains))
	}
	if i.PathHasPrefix != nil {
		predicates = append(predicates, bookcover.PathHasPrefix(*i.PathHasPrefix))
	}
	if i.PathHasSuffix != nil {
		predicates = append(predicates, bookcover.PathHasSuffix(*i.PathHasSuffix))
	}
	if i.PathEqualFold != nil {
		predicates = append(predicates, bookcover.PathEqualFold(*i.PathEqualFold))
	}
	if i.PathContainsFold != nil {
		predicates = append(predicates, bookcover.PathContainsFold(*i.PathContainsFold))
	}
	if i.Size != nil {
		predicates = append(predicates, bookcover.SizeEQ(*i.Size))
	}
	if i.SizeNEQ != nil {
		predicates = append(predicates, bookcover.SizeNEQ(*i.SizeNEQ))
	}
	if len(i.SizeIn) > 0 {
		predicates = append(predicates, bookcover.SizeIn(i.SizeIn...))
	}
	if len(i.SizeNotIn) > 0 {
		predicates = append(predicates, bookcover.SizeNotIn(i.SizeNotIn...))
	}
	if i.SizeGT != nil {
		predicates = append(predicates, bookcover.SizeGT(*i.SizeGT))
	}
	if i.SizeGTE != nil {
		predicates = append(predicates, bookcover.SizeGTE(*i.SizeGTE))
	}
	if i.SizeLT != nil {
		predicates = append(predicates, bookcover.SizeLT(*i.SizeLT))
	}
	if i.SizeLTE != nil {
		predicates = append(predicates, bookcover.SizeLTE(*i.SizeLTE))
	}
	if i.Width != nil {
		predicates = append(predicates, bookcover.WidthEQ(*i.Width))
	}
	if i.WidthNEQ != nil {
		predicates = append(predicates, bookcover.WidthNEQ(*i.WidthNEQ))
	}
	if len(i.WidthIn) > 0 {
		predicates = append(predicates, bookcover.WidthIn(i.WidthIn...))
	}
	if len(i.WidthNotIn) > 0 {
		predicates = append(predicates, bookcover.WidthNotIn(i.WidthNotIn...))
	}
	if i.WidthGT != nil {
		predicates = append(predicates, bookcover.WidthGT(*i.WidthGT))
	}
	if i.WidthGTE != nil {
		predicates = append(predicates, bookcover.WidthGTE(*i.WidthGTE))
	}
	if i.WidthLT != nil {
		predicates = append(predicates, bookcover.WidthLT(*i.WidthLT))
	}
	if i.WidthLTE != nil {
		predicates = append(predicates, bookcover.WidthLTE(*i.WidthLTE))
	}
	if i.Height != nil {
		predicates = append(predicates, bookcover.HeightEQ(*i.Height))
	}
	if i.HeightNEQ != nil {
		predicates = append(predicates, bookcover.HeightNEQ(*i.HeightNEQ))
	}
	if len(i.HeightIn) > 0 {
		predicates = append(predicates, bookcover.HeightIn(i.HeightIn...))
	}
	if len(i.HeightNotIn) > 0 {
		predicates = append(predicates, bookcover.HeightNotIn(i.HeightNotIn...))
	}
	if i.HeightGT != nil {
		predicates = append(predicates, bookcover.HeightGT(*i.HeightGT))
	}
	if i.HeightGTE != nil {
		predicates = append(predicates, bookcover.HeightGTE(*i.HeightGTE))
	}
	if i.HeightLT != nil {
		predicates = append(predicates, bookcover.HeightLT(*i.HeightLT))
	}
	if i.HeightLTE != nil {
		predicates = append(predicates, bookcover.HeightLTE(*i.HeightLTE))
	}
	if i.URL != nil {
		predicates = append(predicates, bookcover.URLEQ(*i.URL))
	}
	if i.URLNEQ != nil {
		predicates = append(predicates, bookcover.URLNEQ(*i.URLNEQ))
	}
	if len(i.URLIn) > 0 {
		predicates = append(predicates, bookcover.URLIn(i.URLIn...))
	}
	if len(i.URLNotIn) > 0 {
		predicates = append(predicates, bookcover.URLNotIn(i.URLNotIn...))
	}
	if i.URLGT != nil {
		predicates = append(predicates, bookcover.URLGT(*i.URLGT))
	}
	if i.URLGTE != nil {
		predicates = append(predicates, bookcover.URLGTE(*i.URLGTE))
	}
	if i.URLLT != nil {
		predicates = append(predicates, bookcover.URLLT(*i.URLLT))
	}
	if i.URLLTE != nil {
		predicates = append(predicates, bookcover.URLLTE(*i.URLLTE))
	}
	if i.URLContains != nil {
		predicates = append(predicates, bookcover.URLContains(*i.URLContains))
	}
	if i.URLHasPrefix != nil {
		predicates = append(predicates, bookcover.URLHasPrefix(*i.URLHasPrefix))
	}
	if i.URLHasSuffix != nil {
		predicates = append(predicates, bookcover.URLHasSuffix(*i.URLHasSuffix))
	}
	if i.URLEqualFold != nil {
		predicates = append(predicates, bookcover.URLEqualFold(*i.URLEqualFold))
	}
	if i.URLContainsFold != nil {
		predicates = append(predicates, bookcover.URLContainsFold(*i.URLContainsFold))
	}
	if i.ContentType != nil {
		predicates = append(predicates, bookcover.ContentTypeEQ(*i.ContentType))
	}
	if i.ContentTypeNEQ != nil {
		predicates = append(predicates, bookcover.ContentTypeNEQ(*i.ContentTypeNEQ))
	}
	if len(i.ContentTypeIn) > 0 {
		predicates = append(predicates, bookcover.ContentTypeIn(i.ContentTypeIn...))
	}
	if len(i.ContentTypeNotIn) > 0 {
		predicates = append(predicates, bookcover.ContentTypeNotIn(i.ContentTypeNotIn...))
	}
	if i.ContentTypeGT != nil {
		predicates = append(predicates, bookcover.ContentTypeGT(*i.ContentTypeGT))
	}
	if i.ContentTypeGTE != nil {
		predicates = append(predicates, bookcover.ContentTypeGTE(*i.ContentTypeGTE))
	}
	if i.ContentTypeLT != nil {
		predicates = append(predicates, bookcover.ContentTypeLT(*i.ContentTypeLT))
	}
	if i.ContentTypeLTE != nil {
		predicates = append(predicates, bookcover.ContentTypeLTE(*i.ContentTypeLTE))
	}
	if i.ContentTypeContains != nil {
		predicates = append(predicates, bookcover.ContentTypeContains(*i.ContentTypeContains))
	}
	if i.ContentTypeHasPrefix != nil {
		predicates = append(predicates, bookcover.ContentTypeHasPrefix(*i.ContentTypeHasPrefix))
	}
	if i.ContentTypeHasSuffix != nil {
		predicates = append(predicates, bookcover.ContentTypeHasSuffix(*i.ContentTypeHasSuffix))
	}
	if i.ContentTypeEqualFold != nil {
		predicates = append(predicates, bookcover.ContentTypeEqualFold(*i.ContentTypeEqualFold))
	}
	if i.ContentTypeContainsFold != nil {
		predicates = append(predicates, bookcover.ContentTypeContainsFold(*i.ContentTypeContainsFold))
	}

	if i.HasBook != nil {
		p := bookcover.HasBook()
		if !*i.HasBook {
			p = bookcover.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBookWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBookWith))
		for _, w := range i.HasBookWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBookWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, bookcover.HasBookWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyBookCoverWhereInput
	case 1:
		return predicates[0], nil
	default:
		return bookcover.And(predicates...), nil
	}
}

// BookFileWhereInput represents a where input for filtering BookFile queries.
type BookFileWhereInput struct {
	Predicates []predicate.BookFile  `json:"-"`
	Not        *BookFileWhereInput   `json:"not,omitempty"`
	Or         []*BookFileWhereInput `json:"or,omitempty"`
	And        []*BookFileWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "path" field predicates.
	Path             *string  `json:"path,omitempty"`
	PathNEQ          *string  `json:"pathNEQ,omitempty"`
	PathIn           []string `json:"pathIn,omitempty"`
	PathNotIn        []string `json:"pathNotIn,omitempty"`
	PathGT           *string  `json:"pathGT,omitempty"`
	PathGTE          *string  `json:"pathGTE,omitempty"`
	PathLT           *string  `json:"pathLT,omitempty"`
	PathLTE          *string  `json:"pathLTE,omitempty"`
	PathContains     *string  `json:"pathContains,omitempty"`
	PathHasPrefix    *string  `json:"pathHasPrefix,omitempty"`
	PathHasSuffix    *string  `json:"pathHasSuffix,omitempty"`
	PathEqualFold    *string  `json:"pathEqualFold,omitempty"`
	PathContainsFold *string  `json:"pathContainsFold,omitempty"`

	// "size" field predicates.
	Size      *int64  `json:"size,omitempty"`
	SizeNEQ   *int64  `json:"sizeNEQ,omitempty"`
	SizeIn    []int64 `json:"sizeIn,omitempty"`
	SizeNotIn []int64 `json:"sizeNotIn,omitempty"`
	SizeGT    *int64  `json:"sizeGT,omitempty"`
	SizeGTE   *int64  `json:"sizeGTE,omitempty"`
	SizeLT    *int64  `json:"sizeLT,omitempty"`
	SizeLTE   *int64  `json:"sizeLTE,omitempty"`

	// "format" field predicates.
	Format      *bookfile.Format  `json:"format,omitempty"`
	FormatNEQ   *bookfile.Format  `json:"formatNEQ,omitempty"`
	FormatIn    []bookfile.Format `json:"formatIn,omitempty"`
	FormatNotIn []bookfile.Format `json:"formatNotIn,omitempty"`

	// "book" edge predicates.
	HasBook     *bool             `json:"hasBook,omitempty"`
	HasBookWith []*BookWhereInput `json:"hasBookWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *BookFileWhereInput) AddPredicates(predicates ...predicate.BookFile) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the BookFileWhereInput filter on the BookFileQuery builder.
func (i *BookFileWhereInput) Filter(q *BookFileQuery) (*BookFileQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyBookFileWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyBookFileWhereInput is returned in case the BookFileWhereInput is empty.
var ErrEmptyBookFileWhereInput = errors.New("ent: empty predicate BookFileWhereInput")

// P returns a predicate for filtering bookfiles.
// An error is returned if the input is empty or invalid.
func (i *BookFileWhereInput) P() (predicate.BookFile, error) {
	var predicates []predicate.BookFile
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, bookfile.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.BookFile, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, bookfile.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.BookFile, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, bookfile.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, bookfile.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, bookfile.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, bookfile.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, bookfile.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, bookfile.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, bookfile.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, bookfile.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, bookfile.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, bookfile.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, bookfile.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, bookfile.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, bookfile.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, bookfile.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, bookfile.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, bookfile.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, bookfile.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, bookfile.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, bookfile.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, bookfile.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, bookfile.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, bookfile.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, bookfile.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, bookfile.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, bookfile.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, bookfile.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, bookfile.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, bookfile.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, bookfile.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, bookfile.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, bookfile.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, bookfile.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, bookfile.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, bookfile.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, bookfile.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, bookfile.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, bookfile.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, bookfile.NameContainsFold(*i.NameContainsFold))
	}
	if i.Path != nil {
		predicates = append(predicates, bookfile.PathEQ(*i.Path))
	}
	if i.PathNEQ != nil {
		predicates = append(predicates, bookfile.PathNEQ(*i.PathNEQ))
	}
	if len(i.PathIn) > 0 {
		predicates = append(predicates, bookfile.PathIn(i.PathIn...))
	}
	if len(i.PathNotIn) > 0 {
		predicates = append(predicates, bookfile.PathNotIn(i.PathNotIn...))
	}
	if i.PathGT != nil {
		predicates = append(predicates, bookfile.PathGT(*i.PathGT))
	}
	if i.PathGTE != nil {
		predicates = append(predicates, bookfile.PathGTE(*i.PathGTE))
	}
	if i.PathLT != nil {
		predicates = append(predicates, bookfile.PathLT(*i.PathLT))
	}
	if i.PathLTE != nil {
		predicates = append(predicates, bookfile.PathLTE(*i.PathLTE))
	}
	if i.PathContains != nil {
		predicates = append(predicates, bookfile.PathContains(*i.PathContains))
	}
	if i.PathHasPrefix != nil {
		predicates = append(predicates, bookfile.PathHasPrefix(*i.PathHasPrefix))
	}
	if i.PathHasSuffix != nil {
		predicates = append(predicates, bookfile.PathHasSuffix(*i.PathHasSuffix))
	}
	if i.PathEqualFold != nil {
		predicates = append(predicates, bookfile.PathEqualFold(*i.PathEqualFold))
	}
	if i.PathContainsFold != nil {
		predicates = append(predicates, bookfile.PathContainsFold(*i.PathContainsFold))
	}
	if i.Size != nil {
		predicates = append(predicates, bookfile.SizeEQ(*i.Size))
	}
	if i.SizeNEQ != nil {
		predicates = append(predicates, bookfile.SizeNEQ(*i.SizeNEQ))
	}
	if len(i.SizeIn) > 0 {
		predicates = append(predicates, bookfile.SizeIn(i.SizeIn...))
	}
	if len(i.SizeNotIn) > 0 {
		predicates = append(predicates, bookfile.SizeNotIn(i.SizeNotIn...))
	}
	if i.SizeGT != nil {
		predicates = append(predicates, bookfile.SizeGT(*i.SizeGT))
	}
	if i.SizeGTE != nil {
		predicates = append(predicates, bookfile.SizeGTE(*i.SizeGTE))
	}
	if i.SizeLT != nil {
		predicates = append(predicates, bookfile.SizeLT(*i.SizeLT))
	}
	if i.SizeLTE != nil {
		predicates = append(predicates, bookfile.SizeLTE(*i.SizeLTE))
	}
	if i.Format != nil {
		predicates = append(predicates, bookfile.FormatEQ(*i.Format))
	}
	if i.FormatNEQ != nil {
		predicates = append(predicates, bookfile.FormatNEQ(*i.FormatNEQ))
	}
	if len(i.FormatIn) > 0 {
		predicates = append(predicates, bookfile.FormatIn(i.FormatIn...))
	}
	if len(i.FormatNotIn) > 0 {
		predicates = append(predicates, bookfile.FormatNotIn(i.FormatNotIn...))
	}

	if i.HasBook != nil {
		p := bookfile.HasBook()
		if !*i.HasBook {
			p = bookfile.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBookWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBookWith))
		for _, w := range i.HasBookWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBookWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, bookfile.HasBookWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyBookFileWhereInput
	case 1:
		return predicates[0], nil
	default:
		return bookfile.And(predicates...), nil
	}
}

// IdentifierWhereInput represents a where input for filtering Identifier queries.
type IdentifierWhereInput struct {
	Predicates []predicate.Identifier  `json:"-"`
	Not        *IdentifierWhereInput   `json:"not,omitempty"`
	Or         []*IdentifierWhereInput `json:"or,omitempty"`
	And        []*IdentifierWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "calibre_id" field predicates.
	CalibreID       *int64  `json:"calibreID,omitempty"`
	CalibreIDNEQ    *int64  `json:"calibreIDNEQ,omitempty"`
	CalibreIDIn     []int64 `json:"calibreIDIn,omitempty"`
	CalibreIDNotIn  []int64 `json:"calibreIDNotIn,omitempty"`
	CalibreIDGT     *int64  `json:"calibreIDGT,omitempty"`
	CalibreIDGTE    *int64  `json:"calibreIDGTE,omitempty"`
	CalibreIDLT     *int64  `json:"calibreIDLT,omitempty"`
	CalibreIDLTE    *int64  `json:"calibreIDLTE,omitempty"`
	CalibreIDIsNil  bool    `json:"calibreIDIsNil,omitempty"`
	CalibreIDNotNil bool    `json:"calibreIDNotNil,omitempty"`

	// "type" field predicates.
	Type             *string  `json:"type,omitempty"`
	TypeNEQ          *string  `json:"typeNEQ,omitempty"`
	TypeIn           []string `json:"typeIn,omitempty"`
	TypeNotIn        []string `json:"typeNotIn,omitempty"`
	TypeGT           *string  `json:"typeGT,omitempty"`
	TypeGTE          *string  `json:"typeGTE,omitempty"`
	TypeLT           *string  `json:"typeLT,omitempty"`
	TypeLTE          *string  `json:"typeLTE,omitempty"`
	TypeContains     *string  `json:"typeContains,omitempty"`
	TypeHasPrefix    *string  `json:"typeHasPrefix,omitempty"`
	TypeHasSuffix    *string  `json:"typeHasSuffix,omitempty"`
	TypeEqualFold    *string  `json:"typeEqualFold,omitempty"`
	TypeContainsFold *string  `json:"typeContainsFold,omitempty"`

	// "value" field predicates.
	Value             *string  `json:"value,omitempty"`
	ValueNEQ          *string  `json:"valueNEQ,omitempty"`
	ValueIn           []string `json:"valueIn,omitempty"`
	ValueNotIn        []string `json:"valueNotIn,omitempty"`
	ValueGT           *string  `json:"valueGT,omitempty"`
	ValueGTE          *string  `json:"valueGTE,omitempty"`
	ValueLT           *string  `json:"valueLT,omitempty"`
	ValueLTE          *string  `json:"valueLTE,omitempty"`
	ValueContains     *string  `json:"valueContains,omitempty"`
	ValueHasPrefix    *string  `json:"valueHasPrefix,omitempty"`
	ValueHasSuffix    *string  `json:"valueHasSuffix,omitempty"`
	ValueEqualFold    *string  `json:"valueEqualFold,omitempty"`
	ValueContainsFold *string  `json:"valueContainsFold,omitempty"`

	// "book" edge predicates.
	HasBook     *bool             `json:"hasBook,omitempty"`
	HasBookWith []*BookWhereInput `json:"hasBookWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *IdentifierWhereInput) AddPredicates(predicates ...predicate.Identifier) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the IdentifierWhereInput filter on the IdentifierQuery builder.
func (i *IdentifierWhereInput) Filter(q *IdentifierQuery) (*IdentifierQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyIdentifierWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyIdentifierWhereInput is returned in case the IdentifierWhereInput is empty.
var ErrEmptyIdentifierWhereInput = errors.New("ent: empty predicate IdentifierWhereInput")

// P returns a predicate for filtering identifiers.
// An error is returned if the input is empty or invalid.
func (i *IdentifierWhereInput) P() (predicate.Identifier, error) {
	var predicates []predicate.Identifier
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, identifier.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Identifier, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, identifier.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Identifier, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, identifier.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, identifier.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, identifier.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, identifier.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, identifier.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, identifier.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, identifier.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, identifier.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, identifier.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, identifier.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, identifier.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, identifier.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, identifier.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, identifier.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, identifier.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, identifier.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, identifier.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, identifier.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, identifier.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, identifier.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, identifier.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, identifier.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, identifier.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, identifier.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, identifier.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.CalibreID != nil {
		predicates = append(predicates, identifier.CalibreIDEQ(*i.CalibreID))
	}
	if i.CalibreIDNEQ != nil {
		predicates = append(predicates, identifier.CalibreIDNEQ(*i.CalibreIDNEQ))
	}
	if len(i.CalibreIDIn) > 0 {
		predicates = append(predicates, identifier.CalibreIDIn(i.CalibreIDIn...))
	}
	if len(i.CalibreIDNotIn) > 0 {
		predicates = append(predicates, identifier.CalibreIDNotIn(i.CalibreIDNotIn...))
	}
	if i.CalibreIDGT != nil {
		predicates = append(predicates, identifier.CalibreIDGT(*i.CalibreIDGT))
	}
	if i.CalibreIDGTE != nil {
		predicates = append(predicates, identifier.CalibreIDGTE(*i.CalibreIDGTE))
	}
	if i.CalibreIDLT != nil {
		predicates = append(predicates, identifier.CalibreIDLT(*i.CalibreIDLT))
	}
	if i.CalibreIDLTE != nil {
		predicates = append(predicates, identifier.CalibreIDLTE(*i.CalibreIDLTE))
	}
	if i.CalibreIDIsNil {
		predicates = append(predicates, identifier.CalibreIDIsNil())
	}
	if i.CalibreIDNotNil {
		predicates = append(predicates, identifier.CalibreIDNotNil())
	}
	if i.Type != nil {
		predicates = append(predicates, identifier.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, identifier.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, identifier.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, identifier.TypeNotIn(i.TypeNotIn...))
	}
	if i.TypeGT != nil {
		predicates = append(predicates, identifier.TypeGT(*i.TypeGT))
	}
	if i.TypeGTE != nil {
		predicates = append(predicates, identifier.TypeGTE(*i.TypeGTE))
	}
	if i.TypeLT != nil {
		predicates = append(predicates, identifier.TypeLT(*i.TypeLT))
	}
	if i.TypeLTE != nil {
		predicates = append(predicates, identifier.TypeLTE(*i.TypeLTE))
	}
	if i.TypeContains != nil {
		predicates = append(predicates, identifier.TypeContains(*i.TypeContains))
	}
	if i.TypeHasPrefix != nil {
		predicates = append(predicates, identifier.TypeHasPrefix(*i.TypeHasPrefix))
	}
	if i.TypeHasSuffix != nil {
		predicates = append(predicates, identifier.TypeHasSuffix(*i.TypeHasSuffix))
	}
	if i.TypeEqualFold != nil {
		predicates = append(predicates, identifier.TypeEqualFold(*i.TypeEqualFold))
	}
	if i.TypeContainsFold != nil {
		predicates = append(predicates, identifier.TypeContainsFold(*i.TypeContainsFold))
	}
	if i.Value != nil {
		predicates = append(predicates, identifier.ValueEQ(*i.Value))
	}
	if i.ValueNEQ != nil {
		predicates = append(predicates, identifier.ValueNEQ(*i.ValueNEQ))
	}
	if len(i.ValueIn) > 0 {
		predicates = append(predicates, identifier.ValueIn(i.ValueIn...))
	}
	if len(i.ValueNotIn) > 0 {
		predicates = append(predicates, identifier.ValueNotIn(i.ValueNotIn...))
	}
	if i.ValueGT != nil {
		predicates = append(predicates, identifier.ValueGT(*i.ValueGT))
	}
	if i.ValueGTE != nil {
		predicates = append(predicates, identifier.ValueGTE(*i.ValueGTE))
	}
	if i.ValueLT != nil {
		predicates = append(predicates, identifier.ValueLT(*i.ValueLT))
	}
	if i.ValueLTE != nil {
		predicates = append(predicates, identifier.ValueLTE(*i.ValueLTE))
	}
	if i.ValueContains != nil {
		predicates = append(predicates, identifier.ValueContains(*i.ValueContains))
	}
	if i.ValueHasPrefix != nil {
		predicates = append(predicates, identifier.ValueHasPrefix(*i.ValueHasPrefix))
	}
	if i.ValueHasSuffix != nil {
		predicates = append(predicates, identifier.ValueHasSuffix(*i.ValueHasSuffix))
	}
	if i.ValueEqualFold != nil {
		predicates = append(predicates, identifier.ValueEqualFold(*i.ValueEqualFold))
	}
	if i.ValueContainsFold != nil {
		predicates = append(predicates, identifier.ValueContainsFold(*i.ValueContainsFold))
	}

	if i.HasBook != nil {
		p := identifier.HasBook()
		if !*i.HasBook {
			p = identifier.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBookWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBookWith))
		for _, w := range i.HasBookWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBookWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, identifier.HasBookWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyIdentifierWhereInput
	case 1:
		return predicates[0], nil
	default:
		return identifier.And(predicates...), nil
	}
}

// LanguageWhereInput represents a where input for filtering Language queries.
type LanguageWhereInput struct {
	Predicates []predicate.Language  `json:"-"`
	Not        *LanguageWhereInput   `json:"not,omitempty"`
	Or         []*LanguageWhereInput `json:"or,omitempty"`
	And        []*LanguageWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "calibre_id" field predicates.
	CalibreID       *int64  `json:"calibreID,omitempty"`
	CalibreIDNEQ    *int64  `json:"calibreIDNEQ,omitempty"`
	CalibreIDIn     []int64 `json:"calibreIDIn,omitempty"`
	CalibreIDNotIn  []int64 `json:"calibreIDNotIn,omitempty"`
	CalibreIDGT     *int64  `json:"calibreIDGT,omitempty"`
	CalibreIDGTE    *int64  `json:"calibreIDGTE,omitempty"`
	CalibreIDLT     *int64  `json:"calibreIDLT,omitempty"`
	CalibreIDLTE    *int64  `json:"calibreIDLTE,omitempty"`
	CalibreIDIsNil  bool    `json:"calibreIDIsNil,omitempty"`
	CalibreIDNotNil bool    `json:"calibreIDNotNil,omitempty"`

	// "code" field predicates.
	Code             *string  `json:"code,omitempty"`
	CodeNEQ          *string  `json:"codeNEQ,omitempty"`
	CodeIn           []string `json:"codeIn,omitempty"`
	CodeNotIn        []string `json:"codeNotIn,omitempty"`
	CodeGT           *string  `json:"codeGT,omitempty"`
	CodeGTE          *string  `json:"codeGTE,omitempty"`
	CodeLT           *string  `json:"codeLT,omitempty"`
	CodeLTE          *string  `json:"codeLTE,omitempty"`
	CodeContains     *string  `json:"codeContains,omitempty"`
	CodeHasPrefix    *string  `json:"codeHasPrefix,omitempty"`
	CodeHasSuffix    *string  `json:"codeHasSuffix,omitempty"`
	CodeEqualFold    *string  `json:"codeEqualFold,omitempty"`
	CodeContainsFold *string  `json:"codeContainsFold,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *LanguageWhereInput) AddPredicates(predicates ...predicate.Language) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the LanguageWhereInput filter on the LanguageQuery builder.
func (i *LanguageWhereInput) Filter(q *LanguageQuery) (*LanguageQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyLanguageWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyLanguageWhereInput is returned in case the LanguageWhereInput is empty.
var ErrEmptyLanguageWhereInput = errors.New("ent: empty predicate LanguageWhereInput")

// P returns a predicate for filtering languages.
// An error is returned if the input is empty or invalid.
func (i *LanguageWhereInput) P() (predicate.Language, error) {
	var predicates []predicate.Language
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, language.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Language, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, language.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Language, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, language.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, language.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, language.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, language.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, language.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, language.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, language.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, language.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, language.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, language.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, language.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, language.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, language.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, language.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, language.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, language.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, language.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, language.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, language.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, language.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, language.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, language.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, language.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, language.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, language.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.CalibreID != nil {
		predicates = append(predicates, language.CalibreIDEQ(*i.CalibreID))
	}
	if i.CalibreIDNEQ != nil {
		predicates = append(predicates, language.CalibreIDNEQ(*i.CalibreIDNEQ))
	}
	if len(i.CalibreIDIn) > 0 {
		predicates = append(predicates, language.CalibreIDIn(i.CalibreIDIn...))
	}
	if len(i.CalibreIDNotIn) > 0 {
		predicates = append(predicates, language.CalibreIDNotIn(i.CalibreIDNotIn...))
	}
	if i.CalibreIDGT != nil {
		predicates = append(predicates, language.CalibreIDGT(*i.CalibreIDGT))
	}
	if i.CalibreIDGTE != nil {
		predicates = append(predicates, language.CalibreIDGTE(*i.CalibreIDGTE))
	}
	if i.CalibreIDLT != nil {
		predicates = append(predicates, language.CalibreIDLT(*i.CalibreIDLT))
	}
	if i.CalibreIDLTE != nil {
		predicates = append(predicates, language.CalibreIDLTE(*i.CalibreIDLTE))
	}
	if i.CalibreIDIsNil {
		predicates = append(predicates, language.CalibreIDIsNil())
	}
	if i.CalibreIDNotNil {
		predicates = append(predicates, language.CalibreIDNotNil())
	}
	if i.Code != nil {
		predicates = append(predicates, language.CodeEQ(*i.Code))
	}
	if i.CodeNEQ != nil {
		predicates = append(predicates, language.CodeNEQ(*i.CodeNEQ))
	}
	if len(i.CodeIn) > 0 {
		predicates = append(predicates, language.CodeIn(i.CodeIn...))
	}
	if len(i.CodeNotIn) > 0 {
		predicates = append(predicates, language.CodeNotIn(i.CodeNotIn...))
	}
	if i.CodeGT != nil {
		predicates = append(predicates, language.CodeGT(*i.CodeGT))
	}
	if i.CodeGTE != nil {
		predicates = append(predicates, language.CodeGTE(*i.CodeGTE))
	}
	if i.CodeLT != nil {
		predicates = append(predicates, language.CodeLT(*i.CodeLT))
	}
	if i.CodeLTE != nil {
		predicates = append(predicates, language.CodeLTE(*i.CodeLTE))
	}
	if i.CodeContains != nil {
		predicates = append(predicates, language.CodeContains(*i.CodeContains))
	}
	if i.CodeHasPrefix != nil {
		predicates = append(predicates, language.CodeHasPrefix(*i.CodeHasPrefix))
	}
	if i.CodeHasSuffix != nil {
		predicates = append(predicates, language.CodeHasSuffix(*i.CodeHasSuffix))
	}
	if i.CodeEqualFold != nil {
		predicates = append(predicates, language.CodeEqualFold(*i.CodeEqualFold))
	}
	if i.CodeContainsFold != nil {
		predicates = append(predicates, language.CodeContainsFold(*i.CodeContainsFold))
	}

	if i.HasBooks != nil {
		p := language.HasBooks()
		if !*i.HasBooks {
			p = language.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, language.HasBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyLanguageWhereInput
	case 1:
		return predicates[0], nil
	default:
		return language.And(predicates...), nil
	}
}

// PublisherWhereInput represents a where input for filtering Publisher queries.
type PublisherWhereInput struct {
	Predicates []predicate.Publisher  `json:"-"`
	Not        *PublisherWhereInput   `json:"not,omitempty"`
	Or         []*PublisherWhereInput `json:"or,omitempty"`
	And        []*PublisherWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "calibre_id" field predicates.
	CalibreID       *int64  `json:"calibreID,omitempty"`
	CalibreIDNEQ    *int64  `json:"calibreIDNEQ,omitempty"`
	CalibreIDIn     []int64 `json:"calibreIDIn,omitempty"`
	CalibreIDNotIn  []int64 `json:"calibreIDNotIn,omitempty"`
	CalibreIDGT     *int64  `json:"calibreIDGT,omitempty"`
	CalibreIDGTE    *int64  `json:"calibreIDGTE,omitempty"`
	CalibreIDLT     *int64  `json:"calibreIDLT,omitempty"`
	CalibreIDLTE    *int64  `json:"calibreIDLTE,omitempty"`
	CalibreIDIsNil  bool    `json:"calibreIDIsNil,omitempty"`
	CalibreIDNotNil bool    `json:"calibreIDNotNil,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PublisherWhereInput) AddPredicates(predicates ...predicate.Publisher) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PublisherWhereInput filter on the PublisherQuery builder.
func (i *PublisherWhereInput) Filter(q *PublisherQuery) (*PublisherQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPublisherWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPublisherWhereInput is returned in case the PublisherWhereInput is empty.
var ErrEmptyPublisherWhereInput = errors.New("ent: empty predicate PublisherWhereInput")

// P returns a predicate for filtering publishers.
// An error is returned if the input is empty or invalid.
func (i *PublisherWhereInput) P() (predicate.Publisher, error) {
	var predicates []predicate.Publisher
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, publisher.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Publisher, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, publisher.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Publisher, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, publisher.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, publisher.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, publisher.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, publisher.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, publisher.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, publisher.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, publisher.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, publisher.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, publisher.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, publisher.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, publisher.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, publisher.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, publisher.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, publisher.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, publisher.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, publisher.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, publisher.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, publisher.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, publisher.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, publisher.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, publisher.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, publisher.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, publisher.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, publisher.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, publisher.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.CalibreID != nil {
		predicates = append(predicates, publisher.CalibreIDEQ(*i.CalibreID))
	}
	if i.CalibreIDNEQ != nil {
		predicates = append(predicates, publisher.CalibreIDNEQ(*i.CalibreIDNEQ))
	}
	if len(i.CalibreIDIn) > 0 {
		predicates = append(predicates, publisher.CalibreIDIn(i.CalibreIDIn...))
	}
	if len(i.CalibreIDNotIn) > 0 {
		predicates = append(predicates, publisher.CalibreIDNotIn(i.CalibreIDNotIn...))
	}
	if i.CalibreIDGT != nil {
		predicates = append(predicates, publisher.CalibreIDGT(*i.CalibreIDGT))
	}
	if i.CalibreIDGTE != nil {
		predicates = append(predicates, publisher.CalibreIDGTE(*i.CalibreIDGTE))
	}
	if i.CalibreIDLT != nil {
		predicates = append(predicates, publisher.CalibreIDLT(*i.CalibreIDLT))
	}
	if i.CalibreIDLTE != nil {
		predicates = append(predicates, publisher.CalibreIDLTE(*i.CalibreIDLTE))
	}
	if i.CalibreIDIsNil {
		predicates = append(predicates, publisher.CalibreIDIsNil())
	}
	if i.CalibreIDNotNil {
		predicates = append(predicates, publisher.CalibreIDNotNil())
	}
	if i.Name != nil {
		predicates = append(predicates, publisher.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, publisher.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, publisher.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, publisher.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, publisher.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, publisher.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, publisher.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, publisher.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, publisher.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, publisher.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, publisher.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, publisher.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, publisher.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasBooks != nil {
		p := publisher.HasBooks()
		if !*i.HasBooks {
			p = publisher.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, publisher.HasBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPublisherWhereInput
	case 1:
		return predicates[0], nil
	default:
		return publisher.And(predicates...), nil
	}
}

// SeriesWhereInput represents a where input for filtering Series queries.
type SeriesWhereInput struct {
	Predicates []predicate.Series  `json:"-"`
	Not        *SeriesWhereInput   `json:"not,omitempty"`
	Or         []*SeriesWhereInput `json:"or,omitempty"`
	And        []*SeriesWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "calibre_id" field predicates.
	CalibreID       *int64  `json:"calibreID,omitempty"`
	CalibreIDNEQ    *int64  `json:"calibreIDNEQ,omitempty"`
	CalibreIDIn     []int64 `json:"calibreIDIn,omitempty"`
	CalibreIDNotIn  []int64 `json:"calibreIDNotIn,omitempty"`
	CalibreIDGT     *int64  `json:"calibreIDGT,omitempty"`
	CalibreIDGTE    *int64  `json:"calibreIDGTE,omitempty"`
	CalibreIDLT     *int64  `json:"calibreIDLT,omitempty"`
	CalibreIDLTE    *int64  `json:"calibreIDLTE,omitempty"`
	CalibreIDIsNil  bool    `json:"calibreIDIsNil,omitempty"`
	CalibreIDNotNil bool    `json:"calibreIDNotNil,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "sort" field predicates.
	Sort             *string  `json:"sort,omitempty"`
	SortNEQ          *string  `json:"sortNEQ,omitempty"`
	SortIn           []string `json:"sortIn,omitempty"`
	SortNotIn        []string `json:"sortNotIn,omitempty"`
	SortGT           *string  `json:"sortGT,omitempty"`
	SortGTE          *string  `json:"sortGTE,omitempty"`
	SortLT           *string  `json:"sortLT,omitempty"`
	SortLTE          *string  `json:"sortLTE,omitempty"`
	SortContains     *string  `json:"sortContains,omitempty"`
	SortHasPrefix    *string  `json:"sortHasPrefix,omitempty"`
	SortHasSuffix    *string  `json:"sortHasSuffix,omitempty"`
	SortEqualFold    *string  `json:"sortEqualFold,omitempty"`
	SortContainsFold *string  `json:"sortContainsFold,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *SeriesWhereInput) AddPredicates(predicates ...predicate.Series) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the SeriesWhereInput filter on the SeriesQuery builder.
func (i *SeriesWhereInput) Filter(q *SeriesQuery) (*SeriesQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptySeriesWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptySeriesWhereInput is returned in case the SeriesWhereInput is empty.
var ErrEmptySeriesWhereInput = errors.New("ent: empty predicate SeriesWhereInput")

// P returns a predicate for filtering seriesslice.
// An error is returned if the input is empty or invalid.
func (i *SeriesWhereInput) P() (predicate.Series, error) {
	var predicates []predicate.Series
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, series.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Series, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, series.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Series, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, series.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, series.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, series.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, series.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, series.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, series.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, series.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, series.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, series.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, series.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, series.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, series.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, series.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, series.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, series.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, series.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, series.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, series.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, series.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, series.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, series.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, series.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, series.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, series.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, series.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.CalibreID != nil {
		predicates = append(predicates, series.CalibreIDEQ(*i.CalibreID))
	}
	if i.CalibreIDNEQ != nil {
		predicates = append(predicates, series.CalibreIDNEQ(*i.CalibreIDNEQ))
	}
	if len(i.CalibreIDIn) > 0 {
		predicates = append(predicates, series.CalibreIDIn(i.CalibreIDIn...))
	}
	if len(i.CalibreIDNotIn) > 0 {
		predicates = append(predicates, series.CalibreIDNotIn(i.CalibreIDNotIn...))
	}
	if i.CalibreIDGT != nil {
		predicates = append(predicates, series.CalibreIDGT(*i.CalibreIDGT))
	}
	if i.CalibreIDGTE != nil {
		predicates = append(predicates, series.CalibreIDGTE(*i.CalibreIDGTE))
	}
	if i.CalibreIDLT != nil {
		predicates = append(predicates, series.CalibreIDLT(*i.CalibreIDLT))
	}
	if i.CalibreIDLTE != nil {
		predicates = append(predicates, series.CalibreIDLTE(*i.CalibreIDLTE))
	}
	if i.CalibreIDIsNil {
		predicates = append(predicates, series.CalibreIDIsNil())
	}
	if i.CalibreIDNotNil {
		predicates = append(predicates, series.CalibreIDNotNil())
	}
	if i.Name != nil {
		predicates = append(predicates, series.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, series.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, series.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, series.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, series.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, series.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, series.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, series.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, series.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, series.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, series.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, series.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, series.NameContainsFold(*i.NameContainsFold))
	}
	if i.Sort != nil {
		predicates = append(predicates, series.SortEQ(*i.Sort))
	}
	if i.SortNEQ != nil {
		predicates = append(predicates, series.SortNEQ(*i.SortNEQ))
	}
	if len(i.SortIn) > 0 {
		predicates = append(predicates, series.SortIn(i.SortIn...))
	}
	if len(i.SortNotIn) > 0 {
		predicates = append(predicates, series.SortNotIn(i.SortNotIn...))
	}
	if i.SortGT != nil {
		predicates = append(predicates, series.SortGT(*i.SortGT))
	}
	if i.SortGTE != nil {
		predicates = append(predicates, series.SortGTE(*i.SortGTE))
	}
	if i.SortLT != nil {
		predicates = append(predicates, series.SortLT(*i.SortLT))
	}
	if i.SortLTE != nil {
		predicates = append(predicates, series.SortLTE(*i.SortLTE))
	}
	if i.SortContains != nil {
		predicates = append(predicates, series.SortContains(*i.SortContains))
	}
	if i.SortHasPrefix != nil {
		predicates = append(predicates, series.SortHasPrefix(*i.SortHasPrefix))
	}
	if i.SortHasSuffix != nil {
		predicates = append(predicates, series.SortHasSuffix(*i.SortHasSuffix))
	}
	if i.SortEqualFold != nil {
		predicates = append(predicates, series.SortEqualFold(*i.SortEqualFold))
	}
	if i.SortContainsFold != nil {
		predicates = append(predicates, series.SortContainsFold(*i.SortContainsFold))
	}

	if i.HasBooks != nil {
		p := series.HasBooks()
		if !*i.HasBooks {
			p = series.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, series.HasBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptySeriesWhereInput
	case 1:
		return predicates[0], nil
	default:
		return series.And(predicates...), nil
	}
}

// ShelfWhereInput represents a where input for filtering Shelf queries.
type ShelfWhereInput struct {
	Predicates []predicate.Shelf  `json:"-"`
	Not        *ShelfWhereInput   `json:"not,omitempty"`
	Or         []*ShelfWhereInput `json:"or,omitempty"`
	And        []*ShelfWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "public" field predicates.
	Public    *bool `json:"public,omitempty"`
	PublicNEQ *bool `json:"publicNEQ,omitempty"`

	// "user_id" field predicates.
	UserID             *ksuid.ID  `json:"userID,omitempty"`
	UserIDNEQ          *ksuid.ID  `json:"userIDNEQ,omitempty"`
	UserIDIn           []ksuid.ID `json:"userIDIn,omitempty"`
	UserIDNotIn        []ksuid.ID `json:"userIDNotIn,omitempty"`
	UserIDGT           *ksuid.ID  `json:"userIDGT,omitempty"`
	UserIDGTE          *ksuid.ID  `json:"userIDGTE,omitempty"`
	UserIDLT           *ksuid.ID  `json:"userIDLT,omitempty"`
	UserIDLTE          *ksuid.ID  `json:"userIDLTE,omitempty"`
	UserIDContains     *ksuid.ID  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *ksuid.ID  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *ksuid.ID  `json:"userIDHasSuffix,omitempty"`
	UserIDEqualFold    *ksuid.ID  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *ksuid.ID  `json:"userIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ShelfWhereInput) AddPredicates(predicates ...predicate.Shelf) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ShelfWhereInput filter on the ShelfQuery builder.
func (i *ShelfWhereInput) Filter(q *ShelfQuery) (*ShelfQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyShelfWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyShelfWhereInput is returned in case the ShelfWhereInput is empty.
var ErrEmptyShelfWhereInput = errors.New("ent: empty predicate ShelfWhereInput")

// P returns a predicate for filtering shelves.
// An error is returned if the input is empty or invalid.
func (i *ShelfWhereInput) P() (predicate.Shelf, error) {
	var predicates []predicate.Shelf
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, shelf.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Shelf, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, shelf.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Shelf, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, shelf.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, shelf.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, shelf.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, shelf.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, shelf.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, shelf.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, shelf.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, shelf.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, shelf.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, shelf.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, shelf.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, shelf.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, shelf.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, shelf.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, shelf.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, shelf.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, shelf.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, shelf.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, shelf.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, shelf.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, shelf.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, shelf.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, shelf.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, shelf.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, shelf.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Public != nil {
		predicates = append(predicates, shelf.PublicEQ(*i.Public))
	}
	if i.PublicNEQ != nil {
		predicates = append(predicates, shelf.PublicNEQ(*i.PublicNEQ))
	}
	if i.UserID != nil {
		predicates = append(predicates, shelf.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, shelf.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, shelf.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, shelf.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, shelf.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, shelf.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, shelf.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, shelf.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, shelf.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, shelf.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, shelf.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, shelf.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, shelf.UserIDContainsFold(*i.UserIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, shelf.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, shelf.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, shelf.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, shelf.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, shelf.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, shelf.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, shelf.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, shelf.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, shelf.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, shelf.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, shelf.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, shelf.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, shelf.NameContainsFold(*i.NameContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, shelf.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, shelf.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, shelf.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, shelf.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, shelf.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, shelf.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, shelf.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, shelf.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, shelf.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, shelf.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, shelf.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, shelf.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, shelf.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, shelf.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, shelf.DescriptionContainsFold(*i.DescriptionContainsFold))
	}

	if i.HasUser != nil {
		p := shelf.HasUser()
		if !*i.HasUser {
			p = shelf.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, shelf.HasUserWith(with...))
	}
	if i.HasBooks != nil {
		p := shelf.HasBooks()
		if !*i.HasBooks {
			p = shelf.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, shelf.HasBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyShelfWhereInput
	case 1:
		return predicates[0], nil
	default:
		return shelf.And(predicates...), nil
	}
}

// TagWhereInput represents a where input for filtering Tag queries.
type TagWhereInput struct {
	Predicates []predicate.Tag  `json:"-"`
	Not        *TagWhereInput   `json:"not,omitempty"`
	Or         []*TagWhereInput `json:"or,omitempty"`
	And        []*TagWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "calibre_id" field predicates.
	CalibreID       *int64  `json:"calibreID,omitempty"`
	CalibreIDNEQ    *int64  `json:"calibreIDNEQ,omitempty"`
	CalibreIDIn     []int64 `json:"calibreIDIn,omitempty"`
	CalibreIDNotIn  []int64 `json:"calibreIDNotIn,omitempty"`
	CalibreIDGT     *int64  `json:"calibreIDGT,omitempty"`
	CalibreIDGTE    *int64  `json:"calibreIDGTE,omitempty"`
	CalibreIDLT     *int64  `json:"calibreIDLT,omitempty"`
	CalibreIDLTE    *int64  `json:"calibreIDLTE,omitempty"`
	CalibreIDIsNil  bool    `json:"calibreIDIsNil,omitempty"`
	CalibreIDNotNil bool    `json:"calibreIDNotNil,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "books" edge predicates.
	HasBooks     *bool             `json:"hasBooks,omitempty"`
	HasBooksWith []*BookWhereInput `json:"hasBooksWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TagWhereInput) AddPredicates(predicates ...predicate.Tag) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TagWhereInput filter on the TagQuery builder.
func (i *TagWhereInput) Filter(q *TagQuery) (*TagQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTagWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTagWhereInput is returned in case the TagWhereInput is empty.
var ErrEmptyTagWhereInput = errors.New("ent: empty predicate TagWhereInput")

// P returns a predicate for filtering tags.
// An error is returned if the input is empty or invalid.
func (i *TagWhereInput) P() (predicate.Tag, error) {
	var predicates []predicate.Tag
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, tag.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Tag, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, tag.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Tag, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, tag.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, tag.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tag.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tag.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tag.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tag.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tag.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tag.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tag.IDLTE(*i.IDLTE))
	}
	if i.CalibreID != nil {
		predicates = append(predicates, tag.CalibreIDEQ(*i.CalibreID))
	}
	if i.CalibreIDNEQ != nil {
		predicates = append(predicates, tag.CalibreIDNEQ(*i.CalibreIDNEQ))
	}
	if len(i.CalibreIDIn) > 0 {
		predicates = append(predicates, tag.CalibreIDIn(i.CalibreIDIn...))
	}
	if len(i.CalibreIDNotIn) > 0 {
		predicates = append(predicates, tag.CalibreIDNotIn(i.CalibreIDNotIn...))
	}
	if i.CalibreIDGT != nil {
		predicates = append(predicates, tag.CalibreIDGT(*i.CalibreIDGT))
	}
	if i.CalibreIDGTE != nil {
		predicates = append(predicates, tag.CalibreIDGTE(*i.CalibreIDGTE))
	}
	if i.CalibreIDLT != nil {
		predicates = append(predicates, tag.CalibreIDLT(*i.CalibreIDLT))
	}
	if i.CalibreIDLTE != nil {
		predicates = append(predicates, tag.CalibreIDLTE(*i.CalibreIDLTE))
	}
	if i.CalibreIDIsNil {
		predicates = append(predicates, tag.CalibreIDIsNil())
	}
	if i.CalibreIDNotNil {
		predicates = append(predicates, tag.CalibreIDNotNil())
	}
	if i.Name != nil {
		predicates = append(predicates, tag.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, tag.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, tag.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, tag.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, tag.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, tag.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, tag.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, tag.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, tag.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, tag.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, tag.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, tag.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, tag.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasBooks != nil {
		p := tag.HasBooks()
		if !*i.HasBooks {
			p = tag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBooksWith) > 0 {
		with := make([]predicate.Book, 0, len(i.HasBooksWith))
		for _, w := range i.HasBooksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBooksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tag.HasBooksWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTagWhereInput
	case 1:
		return predicates[0], nil
	default:
		return tag.And(predicates...), nil
	}
}

// TaskWhereInput represents a where input for filtering Task queries.
type TaskWhereInput struct {
	Predicates []predicate.Task  `json:"-"`
	Not        *TaskWhereInput   `json:"not,omitempty"`
	Or         []*TaskWhereInput `json:"or,omitempty"`
	And        []*TaskWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "type" field predicates.
	Type      *task_enums.TaskType  `json:"type,omitempty"`
	TypeNEQ   *task_enums.TaskType  `json:"typeNEQ,omitempty"`
	TypeIn    []task_enums.TaskType `json:"typeIn,omitempty"`
	TypeNotIn []task_enums.TaskType `json:"typeNotIn,omitempty"`

	// "status" field predicates.
	Status      *task_enums.Status  `json:"status,omitempty"`
	StatusNEQ   *task_enums.Status  `json:"statusNEQ,omitempty"`
	StatusIn    []task_enums.Status `json:"statusIn,omitempty"`
	StatusNotIn []task_enums.Status `json:"statusNotIn,omitempty"`

	// "progress" field predicates.
	Progress      *float64  `json:"progress,omitempty"`
	ProgressNEQ   *float64  `json:"progressNEQ,omitempty"`
	ProgressIn    []float64 `json:"progressIn,omitempty"`
	ProgressNotIn []float64 `json:"progressNotIn,omitempty"`
	ProgressGT    *float64  `json:"progressGT,omitempty"`
	ProgressGTE   *float64  `json:"progressGTE,omitempty"`
	ProgressLT    *float64  `json:"progressLT,omitempty"`
	ProgressLTE   *float64  `json:"progressLTE,omitempty"`

	// "message" field predicates.
	Message             *string  `json:"message,omitempty"`
	MessageNEQ          *string  `json:"messageNEQ,omitempty"`
	MessageIn           []string `json:"messageIn,omitempty"`
	MessageNotIn        []string `json:"messageNotIn,omitempty"`
	MessageGT           *string  `json:"messageGT,omitempty"`
	MessageGTE          *string  `json:"messageGTE,omitempty"`
	MessageLT           *string  `json:"messageLT,omitempty"`
	MessageLTE          *string  `json:"messageLTE,omitempty"`
	MessageContains     *string  `json:"messageContains,omitempty"`
	MessageHasPrefix    *string  `json:"messageHasPrefix,omitempty"`
	MessageHasSuffix    *string  `json:"messageHasSuffix,omitempty"`
	MessageIsNil        bool     `json:"messageIsNil,omitempty"`
	MessageNotNil       bool     `json:"messageNotNil,omitempty"`
	MessageEqualFold    *string  `json:"messageEqualFold,omitempty"`
	MessageContainsFold *string  `json:"messageContainsFold,omitempty"`

	// "error" field predicates.
	Error             *string  `json:"error,omitempty"`
	ErrorNEQ          *string  `json:"errorNEQ,omitempty"`
	ErrorIn           []string `json:"errorIn,omitempty"`
	ErrorNotIn        []string `json:"errorNotIn,omitempty"`
	ErrorGT           *string  `json:"errorGT,omitempty"`
	ErrorGTE          *string  `json:"errorGTE,omitempty"`
	ErrorLT           *string  `json:"errorLT,omitempty"`
	ErrorLTE          *string  `json:"errorLTE,omitempty"`
	ErrorContains     *string  `json:"errorContains,omitempty"`
	ErrorHasPrefix    *string  `json:"errorHasPrefix,omitempty"`
	ErrorHasSuffix    *string  `json:"errorHasSuffix,omitempty"`
	ErrorIsNil        bool     `json:"errorIsNil,omitempty"`
	ErrorNotNil       bool     `json:"errorNotNil,omitempty"`
	ErrorEqualFold    *string  `json:"errorEqualFold,omitempty"`
	ErrorContainsFold *string  `json:"errorContainsFold,omitempty"`

	// "user_id" field predicates.
	UserID             *ksuid.ID  `json:"userID,omitempty"`
	UserIDNEQ          *ksuid.ID  `json:"userIDNEQ,omitempty"`
	UserIDIn           []ksuid.ID `json:"userIDIn,omitempty"`
	UserIDNotIn        []ksuid.ID `json:"userIDNotIn,omitempty"`
	UserIDGT           *ksuid.ID  `json:"userIDGT,omitempty"`
	UserIDGTE          *ksuid.ID  `json:"userIDGTE,omitempty"`
	UserIDLT           *ksuid.ID  `json:"userIDLT,omitempty"`
	UserIDLTE          *ksuid.ID  `json:"userIDLTE,omitempty"`
	UserIDContains     *ksuid.ID  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *ksuid.ID  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *ksuid.ID  `json:"userIDHasSuffix,omitempty"`
	UserIDIsNil        bool       `json:"userIDIsNil,omitempty"`
	UserIDNotNil       bool       `json:"userIDNotNil,omitempty"`
	UserIDEqualFold    *ksuid.ID  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *ksuid.ID  `json:"userIDContainsFold,omitempty"`

	// "is_system_task" field predicates.
	IsSystemTask    *bool `json:"isSystemTask,omitempty"`
	IsSystemTaskNEQ *bool `json:"isSystemTaskNEQ,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TaskWhereInput) AddPredicates(predicates ...predicate.Task) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TaskWhereInput filter on the TaskQuery builder.
func (i *TaskWhereInput) Filter(q *TaskQuery) (*TaskQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTaskWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTaskWhereInput is returned in case the TaskWhereInput is empty.
var ErrEmptyTaskWhereInput = errors.New("ent: empty predicate TaskWhereInput")

// P returns a predicate for filtering tasks.
// An error is returned if the input is empty or invalid.
func (i *TaskWhereInput) P() (predicate.Task, error) {
	var predicates []predicate.Task
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, task.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Task, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, task.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Task, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, task.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, task.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, task.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, task.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, task.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, task.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, task.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, task.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, task.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, task.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, task.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, task.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, task.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, task.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, task.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, task.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, task.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, task.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, task.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, task.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, task.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, task.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, task.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, task.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, task.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Type != nil {
		predicates = append(predicates, task.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, task.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, task.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, task.TypeNotIn(i.TypeNotIn...))
	}
	if i.Status != nil {
		predicates = append(predicates, task.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, task.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, task.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, task.StatusNotIn(i.StatusNotIn...))
	}
	if i.Progress != nil {
		predicates = append(predicates, task.ProgressEQ(*i.Progress))
	}
	if i.ProgressNEQ != nil {
		predicates = append(predicates, task.ProgressNEQ(*i.ProgressNEQ))
	}
	if len(i.ProgressIn) > 0 {
		predicates = append(predicates, task.ProgressIn(i.ProgressIn...))
	}
	if len(i.ProgressNotIn) > 0 {
		predicates = append(predicates, task.ProgressNotIn(i.ProgressNotIn...))
	}
	if i.ProgressGT != nil {
		predicates = append(predicates, task.ProgressGT(*i.ProgressGT))
	}
	if i.ProgressGTE != nil {
		predicates = append(predicates, task.ProgressGTE(*i.ProgressGTE))
	}
	if i.ProgressLT != nil {
		predicates = append(predicates, task.ProgressLT(*i.ProgressLT))
	}
	if i.ProgressLTE != nil {
		predicates = append(predicates, task.ProgressLTE(*i.ProgressLTE))
	}
	if i.Message != nil {
		predicates = append(predicates, task.MessageEQ(*i.Message))
	}
	if i.MessageNEQ != nil {
		predicates = append(predicates, task.MessageNEQ(*i.MessageNEQ))
	}
	if len(i.MessageIn) > 0 {
		predicates = append(predicates, task.MessageIn(i.MessageIn...))
	}
	if len(i.MessageNotIn) > 0 {
		predicates = append(predicates, task.MessageNotIn(i.MessageNotIn...))
	}
	if i.MessageGT != nil {
		predicates = append(predicates, task.MessageGT(*i.MessageGT))
	}
	if i.MessageGTE != nil {
		predicates = append(predicates, task.MessageGTE(*i.MessageGTE))
	}
	if i.MessageLT != nil {
		predicates = append(predicates, task.MessageLT(*i.MessageLT))
	}
	if i.MessageLTE != nil {
		predicates = append(predicates, task.MessageLTE(*i.MessageLTE))
	}
	if i.MessageContains != nil {
		predicates = append(predicates, task.MessageContains(*i.MessageContains))
	}
	if i.MessageHasPrefix != nil {
		predicates = append(predicates, task.MessageHasPrefix(*i.MessageHasPrefix))
	}
	if i.MessageHasSuffix != nil {
		predicates = append(predicates, task.MessageHasSuffix(*i.MessageHasSuffix))
	}
	if i.MessageIsNil {
		predicates = append(predicates, task.MessageIsNil())
	}
	if i.MessageNotNil {
		predicates = append(predicates, task.MessageNotNil())
	}
	if i.MessageEqualFold != nil {
		predicates = append(predicates, task.MessageEqualFold(*i.MessageEqualFold))
	}
	if i.MessageContainsFold != nil {
		predicates = append(predicates, task.MessageContainsFold(*i.MessageContainsFold))
	}
	if i.Error != nil {
		predicates = append(predicates, task.ErrorEQ(*i.Error))
	}
	if i.ErrorNEQ != nil {
		predicates = append(predicates, task.ErrorNEQ(*i.ErrorNEQ))
	}
	if len(i.ErrorIn) > 0 {
		predicates = append(predicates, task.ErrorIn(i.ErrorIn...))
	}
	if len(i.ErrorNotIn) > 0 {
		predicates = append(predicates, task.ErrorNotIn(i.ErrorNotIn...))
	}
	if i.ErrorGT != nil {
		predicates = append(predicates, task.ErrorGT(*i.ErrorGT))
	}
	if i.ErrorGTE != nil {
		predicates = append(predicates, task.ErrorGTE(*i.ErrorGTE))
	}
	if i.ErrorLT != nil {
		predicates = append(predicates, task.ErrorLT(*i.ErrorLT))
	}
	if i.ErrorLTE != nil {
		predicates = append(predicates, task.ErrorLTE(*i.ErrorLTE))
	}
	if i.ErrorContains != nil {
		predicates = append(predicates, task.ErrorContains(*i.ErrorContains))
	}
	if i.ErrorHasPrefix != nil {
		predicates = append(predicates, task.ErrorHasPrefix(*i.ErrorHasPrefix))
	}
	if i.ErrorHasSuffix != nil {
		predicates = append(predicates, task.ErrorHasSuffix(*i.ErrorHasSuffix))
	}
	if i.ErrorIsNil {
		predicates = append(predicates, task.ErrorIsNil())
	}
	if i.ErrorNotNil {
		predicates = append(predicates, task.ErrorNotNil())
	}
	if i.ErrorEqualFold != nil {
		predicates = append(predicates, task.ErrorEqualFold(*i.ErrorEqualFold))
	}
	if i.ErrorContainsFold != nil {
		predicates = append(predicates, task.ErrorContainsFold(*i.ErrorContainsFold))
	}
	if i.UserID != nil {
		predicates = append(predicates, task.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, task.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, task.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, task.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, task.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, task.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, task.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, task.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, task.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, task.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, task.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDIsNil {
		predicates = append(predicates, task.UserIDIsNil())
	}
	if i.UserIDNotNil {
		predicates = append(predicates, task.UserIDNotNil())
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, task.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, task.UserIDContainsFold(*i.UserIDContainsFold))
	}
	if i.IsSystemTask != nil {
		predicates = append(predicates, task.IsSystemTaskEQ(*i.IsSystemTask))
	}
	if i.IsSystemTaskNEQ != nil {
		predicates = append(predicates, task.IsSystemTaskNEQ(*i.IsSystemTaskNEQ))
	}

	if i.HasUser != nil {
		p := task.HasUser()
		if !*i.HasUser {
			p = task.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, task.HasUserWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTaskWhereInput
	case 1:
		return predicates[0], nil
	default:
		return task.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`

	// "password_hash" field predicates.
	PasswordHash             *argon2id.Argon2IDHash  `json:"passwordHash,omitempty"`
	PasswordHashNEQ          *argon2id.Argon2IDHash  `json:"passwordHashNEQ,omitempty"`
	PasswordHashIn           []argon2id.Argon2IDHash `json:"passwordHashIn,omitempty"`
	PasswordHashNotIn        []argon2id.Argon2IDHash `json:"passwordHashNotIn,omitempty"`
	PasswordHashGT           *argon2id.Argon2IDHash  `json:"passwordHashGT,omitempty"`
	PasswordHashGTE          *argon2id.Argon2IDHash  `json:"passwordHashGTE,omitempty"`
	PasswordHashLT           *argon2id.Argon2IDHash  `json:"passwordHashLT,omitempty"`
	PasswordHashLTE          *argon2id.Argon2IDHash  `json:"passwordHashLTE,omitempty"`
	PasswordHashContains     *argon2id.Argon2IDHash  `json:"passwordHashContains,omitempty"`
	PasswordHashHasPrefix    *argon2id.Argon2IDHash  `json:"passwordHashHasPrefix,omitempty"`
	PasswordHashHasSuffix    *argon2id.Argon2IDHash  `json:"passwordHashHasSuffix,omitempty"`
	PasswordHashIsNil        bool                    `json:"passwordHashIsNil,omitempty"`
	PasswordHashNotNil       bool                    `json:"passwordHashNotNil,omitempty"`
	PasswordHashEqualFold    *argon2id.Argon2IDHash  `json:"passwordHashEqualFold,omitempty"`
	PasswordHashContainsFold *argon2id.Argon2IDHash  `json:"passwordHashContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "shelves" edge predicates.
	HasShelves     *bool              `json:"hasShelves,omitempty"`
	HasShelvesWith []*ShelfWhereInput `json:"hasShelvesWith,omitempty"`

	// "user_permissions" edge predicates.
	HasUserPermissions     *bool                        `json:"hasUserPermissions,omitempty"`
	HasUserPermissionsWith []*UserPermissionsWhereInput `json:"hasUserPermissionsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, user.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, user.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, user.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, user.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, user.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, user.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, user.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, user.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, user.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, user.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, user.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, user.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, user.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, user.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, user.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, user.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Username != nil {
		predicates = append(predicates, user.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, user.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, user.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, user.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, user.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, user.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, user.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, user.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, user.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, user.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, user.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, user.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, user.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.PasswordHash != nil {
		predicates = append(predicates, user.PasswordHashEQ(*i.PasswordHash))
	}
	if i.PasswordHashNEQ != nil {
		predicates = append(predicates, user.PasswordHashNEQ(*i.PasswordHashNEQ))
	}
	if len(i.PasswordHashIn) > 0 {
		predicates = append(predicates, user.PasswordHashIn(i.PasswordHashIn...))
	}
	if len(i.PasswordHashNotIn) > 0 {
		predicates = append(predicates, user.PasswordHashNotIn(i.PasswordHashNotIn...))
	}
	if i.PasswordHashGT != nil {
		predicates = append(predicates, user.PasswordHashGT(*i.PasswordHashGT))
	}
	if i.PasswordHashGTE != nil {
		predicates = append(predicates, user.PasswordHashGTE(*i.PasswordHashGTE))
	}
	if i.PasswordHashLT != nil {
		predicates = append(predicates, user.PasswordHashLT(*i.PasswordHashLT))
	}
	if i.PasswordHashLTE != nil {
		predicates = append(predicates, user.PasswordHashLTE(*i.PasswordHashLTE))
	}
	if i.PasswordHashContains != nil {
		predicates = append(predicates, user.PasswordHashContains(*i.PasswordHashContains))
	}
	if i.PasswordHashHasPrefix != nil {
		predicates = append(predicates, user.PasswordHashHasPrefix(*i.PasswordHashHasPrefix))
	}
	if i.PasswordHashHasSuffix != nil {
		predicates = append(predicates, user.PasswordHashHasSuffix(*i.PasswordHashHasSuffix))
	}
	if i.PasswordHashIsNil {
		predicates = append(predicates, user.PasswordHashIsNil())
	}
	if i.PasswordHashNotNil {
		predicates = append(predicates, user.PasswordHashNotNil())
	}
	if i.PasswordHashEqualFold != nil {
		predicates = append(predicates, user.PasswordHashEqualFold(*i.PasswordHashEqualFold))
	}
	if i.PasswordHashContainsFold != nil {
		predicates = append(predicates, user.PasswordHashContainsFold(*i.PasswordHashContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}

	if i.HasShelves != nil {
		p := user.HasShelves()
		if !*i.HasShelves {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasShelvesWith) > 0 {
		with := make([]predicate.Shelf, 0, len(i.HasShelvesWith))
		for _, w := range i.HasShelvesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasShelvesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasShelvesWith(with...))
	}
	if i.HasUserPermissions != nil {
		p := user.HasUserPermissions()
		if !*i.HasUserPermissions {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserPermissionsWith) > 0 {
		with := make([]predicate.UserPermissions, 0, len(i.HasUserPermissionsWith))
		for _, w := range i.HasUserPermissionsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserPermissionsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasUserPermissionsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}

// UserPermissionsWhereInput represents a where input for filtering UserPermissions queries.
type UserPermissionsWhereInput struct {
	Predicates []predicate.UserPermissions  `json:"-"`
	Not        *UserPermissionsWhereInput   `json:"not,omitempty"`
	Or         []*UserPermissionsWhereInput `json:"or,omitempty"`
	And        []*UserPermissionsWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *ksuid.ID  `json:"id,omitempty"`
	IDNEQ   *ksuid.ID  `json:"idNEQ,omitempty"`
	IDIn    []ksuid.ID `json:"idIn,omitempty"`
	IDNotIn []ksuid.ID `json:"idNotIn,omitempty"`
	IDGT    *ksuid.ID  `json:"idGT,omitempty"`
	IDGTE   *ksuid.ID  `json:"idGTE,omitempty"`
	IDLT    *ksuid.ID  `json:"idLT,omitempty"`
	IDLTE   *ksuid.ID  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "user_id" field predicates.
	UserID             *ksuid.ID  `json:"userID,omitempty"`
	UserIDNEQ          *ksuid.ID  `json:"userIDNEQ,omitempty"`
	UserIDIn           []ksuid.ID `json:"userIDIn,omitempty"`
	UserIDNotIn        []ksuid.ID `json:"userIDNotIn,omitempty"`
	UserIDGT           *ksuid.ID  `json:"userIDGT,omitempty"`
	UserIDGTE          *ksuid.ID  `json:"userIDGTE,omitempty"`
	UserIDLT           *ksuid.ID  `json:"userIDLT,omitempty"`
	UserIDLTE          *ksuid.ID  `json:"userIDLTE,omitempty"`
	UserIDContains     *ksuid.ID  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *ksuid.ID  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *ksuid.ID  `json:"userIDHasSuffix,omitempty"`
	UserIDIsNil        bool       `json:"userIDIsNil,omitempty"`
	UserIDNotNil       bool       `json:"userIDNotNil,omitempty"`
	UserIDEqualFold    *ksuid.ID  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *ksuid.ID  `json:"userIDContainsFold,omitempty"`

	// "Admin" field predicates.
	Admin    *bool `json:"admin,omitempty"`
	AdminNEQ *bool `json:"adminNEQ,omitempty"`

	// "CanCreatePublic" field predicates.
	CanCreatePublic    *bool `json:"cancreatepublic,omitempty"`
	CanCreatePublicNEQ *bool `json:"cancreatepublicNEQ,omitempty"`

	// "CanEdit" field predicates.
	CanEdit    *bool `json:"canedit,omitempty"`
	CanEditNEQ *bool `json:"caneditNEQ,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserPermissionsWhereInput) AddPredicates(predicates ...predicate.UserPermissions) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserPermissionsWhereInput filter on the UserPermissionsQuery builder.
func (i *UserPermissionsWhereInput) Filter(q *UserPermissionsQuery) (*UserPermissionsQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserPermissionsWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserPermissionsWhereInput is returned in case the UserPermissionsWhereInput is empty.
var ErrEmptyUserPermissionsWhereInput = errors.New("ent: empty predicate UserPermissionsWhereInput")

// P returns a predicate for filtering userpermissionsslice.
// An error is returned if the input is empty or invalid.
func (i *UserPermissionsWhereInput) P() (predicate.UserPermissions, error) {
	var predicates []predicate.UserPermissions
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, userpermissions.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.UserPermissions, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, userpermissions.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.UserPermissions, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, userpermissions.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, userpermissions.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, userpermissions.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, userpermissions.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, userpermissions.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, userpermissions.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, userpermissions.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, userpermissions.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, userpermissions.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, userpermissions.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, userpermissions.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, userpermissions.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, userpermissions.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, userpermissions.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, userpermissions.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, userpermissions.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, userpermissions.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, userpermissions.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, userpermissions.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, userpermissions.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, userpermissions.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, userpermissions.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, userpermissions.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, userpermissions.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, userpermissions.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, userpermissions.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, userpermissions.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, userpermissions.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, userpermissions.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, userpermissions.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, userpermissions.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, userpermissions.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, userpermissions.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, userpermissions.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, userpermissions.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, userpermissions.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDIsNil {
		predicates = append(predicates, userpermissions.UserIDIsNil())
	}
	if i.UserIDNotNil {
		predicates = append(predicates, userpermissions.UserIDNotNil())
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, userpermissions.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, userpermissions.UserIDContainsFold(*i.UserIDContainsFold))
	}
	if i.Admin != nil {
		predicates = append(predicates, userpermissions.AdminEQ(*i.Admin))
	}
	if i.AdminNEQ != nil {
		predicates = append(predicates, userpermissions.AdminNEQ(*i.AdminNEQ))
	}
	if i.CanCreatePublic != nil {
		predicates = append(predicates, userpermissions.CanCreatePublicEQ(*i.CanCreatePublic))
	}
	if i.CanCreatePublicNEQ != nil {
		predicates = append(predicates, userpermissions.CanCreatePublicNEQ(*i.CanCreatePublicNEQ))
	}
	if i.CanEdit != nil {
		predicates = append(predicates, userpermissions.CanEditEQ(*i.CanEdit))
	}
	if i.CanEditNEQ != nil {
		predicates = append(predicates, userpermissions.CanEditNEQ(*i.CanEditNEQ))
	}

	if i.HasUser != nil {
		p := userpermissions.HasUser()
		if !*i.HasUser {
			p = userpermissions.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, userpermissions.HasUserWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserPermissionsWhereInput
	case 1:
		return predicates[0], nil
	default:
		return userpermissions.And(predicates...), nil
	}
}
