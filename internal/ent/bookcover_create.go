// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/bookcover"
	"lybbrio/internal/ent/schema/ksuid"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookCoverCreate is the builder for creating a BookCover entity.
type BookCoverCreate struct {
	config
	mutation *BookCoverMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (bcc *BookCoverCreate) SetCreateTime(t time.Time) *BookCoverCreate {
	bcc.mutation.SetCreateTime(t)
	return bcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bcc *BookCoverCreate) SetNillableCreateTime(t *time.Time) *BookCoverCreate {
	if t != nil {
		bcc.SetCreateTime(*t)
	}
	return bcc
}

// SetUpdateTime sets the "update_time" field.
func (bcc *BookCoverCreate) SetUpdateTime(t time.Time) *BookCoverCreate {
	bcc.mutation.SetUpdateTime(t)
	return bcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bcc *BookCoverCreate) SetNillableUpdateTime(t *time.Time) *BookCoverCreate {
	if t != nil {
		bcc.SetUpdateTime(*t)
	}
	return bcc
}

// SetPath sets the "path" field.
func (bcc *BookCoverCreate) SetPath(s string) *BookCoverCreate {
	bcc.mutation.SetPath(s)
	return bcc
}

// SetSize sets the "size" field.
func (bcc *BookCoverCreate) SetSize(i int64) *BookCoverCreate {
	bcc.mutation.SetSize(i)
	return bcc
}

// SetWidth sets the "width" field.
func (bcc *BookCoverCreate) SetWidth(i int) *BookCoverCreate {
	bcc.mutation.SetWidth(i)
	return bcc
}

// SetHeight sets the "height" field.
func (bcc *BookCoverCreate) SetHeight(i int) *BookCoverCreate {
	bcc.mutation.SetHeight(i)
	return bcc
}

// SetURL sets the "url" field.
func (bcc *BookCoverCreate) SetURL(s string) *BookCoverCreate {
	bcc.mutation.SetURL(s)
	return bcc
}

// SetContentType sets the "contentType" field.
func (bcc *BookCoverCreate) SetContentType(s string) *BookCoverCreate {
	bcc.mutation.SetContentType(s)
	return bcc
}

// SetID sets the "id" field.
func (bcc *BookCoverCreate) SetID(k ksuid.ID) *BookCoverCreate {
	bcc.mutation.SetID(k)
	return bcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bcc *BookCoverCreate) SetNillableID(k *ksuid.ID) *BookCoverCreate {
	if k != nil {
		bcc.SetID(*k)
	}
	return bcc
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (bcc *BookCoverCreate) SetBookID(id ksuid.ID) *BookCoverCreate {
	bcc.mutation.SetBookID(id)
	return bcc
}

// SetBook sets the "book" edge to the Book entity.
func (bcc *BookCoverCreate) SetBook(b *Book) *BookCoverCreate {
	return bcc.SetBookID(b.ID)
}

// Mutation returns the BookCoverMutation object of the builder.
func (bcc *BookCoverCreate) Mutation() *BookCoverMutation {
	return bcc.mutation
}

// Save creates the BookCover in the database.
func (bcc *BookCoverCreate) Save(ctx context.Context) (*BookCover, error) {
	if err := bcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bcc.sqlSave, bcc.mutation, bcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bcc *BookCoverCreate) SaveX(ctx context.Context) *BookCover {
	v, err := bcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcc *BookCoverCreate) Exec(ctx context.Context) error {
	_, err := bcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcc *BookCoverCreate) ExecX(ctx context.Context) {
	if err := bcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcc *BookCoverCreate) defaults() error {
	if _, ok := bcc.mutation.CreateTime(); !ok {
		if bookcover.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized bookcover.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := bookcover.DefaultCreateTime()
		bcc.mutation.SetCreateTime(v)
	}
	if _, ok := bcc.mutation.UpdateTime(); !ok {
		if bookcover.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized bookcover.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := bookcover.DefaultUpdateTime()
		bcc.mutation.SetUpdateTime(v)
	}
	if _, ok := bcc.mutation.ID(); !ok {
		if bookcover.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized bookcover.DefaultID (forgotten import ent/runtime?)")
		}
		v := bookcover.DefaultID()
		bcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bcc *BookCoverCreate) check() error {
	if _, ok := bcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "BookCover.create_time"`)}
	}
	if _, ok := bcc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "BookCover.update_time"`)}
	}
	if _, ok := bcc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "BookCover.path"`)}
	}
	if v, ok := bcc.mutation.Path(); ok {
		if err := bookcover.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "BookCover.path": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "BookCover.size"`)}
	}
	if v, ok := bcc.mutation.Size(); ok {
		if err := bookcover.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "BookCover.size": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "BookCover.width"`)}
	}
	if v, ok := bcc.mutation.Width(); ok {
		if err := bookcover.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "BookCover.width": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "BookCover.height"`)}
	}
	if v, ok := bcc.mutation.Height(); ok {
		if err := bookcover.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf(`ent: validator failed for field "BookCover.height": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "BookCover.url"`)}
	}
	if v, ok := bcc.mutation.URL(); ok {
		if err := bookcover.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "BookCover.url": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.ContentType(); !ok {
		return &ValidationError{Name: "contentType", err: errors.New(`ent: missing required field "BookCover.contentType"`)}
	}
	if v, ok := bcc.mutation.ContentType(); ok {
		if err := bookcover.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "contentType", err: fmt.Errorf(`ent: validator failed for field "BookCover.contentType": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.BookID(); !ok {
		return &ValidationError{Name: "book", err: errors.New(`ent: missing required edge "BookCover.book"`)}
	}
	return nil
}

func (bcc *BookCoverCreate) sqlSave(ctx context.Context) (*BookCover, error) {
	if err := bcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(ksuid.ID); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BookCover.ID type: %T", _spec.ID.Value)
		}
	}
	bcc.mutation.id = &_node.ID
	bcc.mutation.done = true
	return _node, nil
}

func (bcc *BookCoverCreate) createSpec() (*BookCover, *sqlgraph.CreateSpec) {
	var (
		_node = &BookCover{config: bcc.config}
		_spec = sqlgraph.NewCreateSpec(bookcover.Table, sqlgraph.NewFieldSpec(bookcover.FieldID, field.TypeString))
	)
	_spec.OnConflict = bcc.conflict
	if id, ok := bcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bcc.mutation.CreateTime(); ok {
		_spec.SetField(bookcover.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bcc.mutation.UpdateTime(); ok {
		_spec.SetField(bookcover.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := bcc.mutation.Path(); ok {
		_spec.SetField(bookcover.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := bcc.mutation.Size(); ok {
		_spec.SetField(bookcover.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := bcc.mutation.Width(); ok {
		_spec.SetField(bookcover.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := bcc.mutation.Height(); ok {
		_spec.SetField(bookcover.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if value, ok := bcc.mutation.URL(); ok {
		_spec.SetField(bookcover.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := bcc.mutation.ContentType(); ok {
		_spec.SetField(bookcover.FieldContentType, field.TypeString, value)
		_node.ContentType = value
	}
	if nodes := bcc.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bookcover.BookTable,
			Columns: []string{bookcover.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.book_cover_book = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BookCover.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BookCoverUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bcc *BookCoverCreate) OnConflict(opts ...sql.ConflictOption) *BookCoverUpsertOne {
	bcc.conflict = opts
	return &BookCoverUpsertOne{
		create: bcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BookCover.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcc *BookCoverCreate) OnConflictColumns(columns ...string) *BookCoverUpsertOne {
	bcc.conflict = append(bcc.conflict, sql.ConflictColumns(columns...))
	return &BookCoverUpsertOne{
		create: bcc,
	}
}

type (
	// BookCoverUpsertOne is the builder for "upsert"-ing
	//  one BookCover node.
	BookCoverUpsertOne struct {
		create *BookCoverCreate
	}

	// BookCoverUpsert is the "OnConflict" setter.
	BookCoverUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *BookCoverUpsert) SetUpdateTime(v time.Time) *BookCoverUpsert {
	u.Set(bookcover.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BookCoverUpsert) UpdateUpdateTime() *BookCoverUpsert {
	u.SetExcluded(bookcover.FieldUpdateTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BookCover.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bookcover.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BookCoverUpsertOne) UpdateNewValues() *BookCoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(bookcover.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(bookcover.FieldCreateTime)
		}
		if _, exists := u.create.mutation.Path(); exists {
			s.SetIgnore(bookcover.FieldPath)
		}
		if _, exists := u.create.mutation.Size(); exists {
			s.SetIgnore(bookcover.FieldSize)
		}
		if _, exists := u.create.mutation.Width(); exists {
			s.SetIgnore(bookcover.FieldWidth)
		}
		if _, exists := u.create.mutation.Height(); exists {
			s.SetIgnore(bookcover.FieldHeight)
		}
		if _, exists := u.create.mutation.URL(); exists {
			s.SetIgnore(bookcover.FieldURL)
		}
		if _, exists := u.create.mutation.ContentType(); exists {
			s.SetIgnore(bookcover.FieldContentType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BookCover.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BookCoverUpsertOne) Ignore() *BookCoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BookCoverUpsertOne) DoNothing() *BookCoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BookCoverCreate.OnConflict
// documentation for more info.
func (u *BookCoverUpsertOne) Update(set func(*BookCoverUpsert)) *BookCoverUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BookCoverUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BookCoverUpsertOne) SetUpdateTime(v time.Time) *BookCoverUpsertOne {
	return u.Update(func(s *BookCoverUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BookCoverUpsertOne) UpdateUpdateTime() *BookCoverUpsertOne {
	return u.Update(func(s *BookCoverUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *BookCoverUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BookCoverCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BookCoverUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BookCoverUpsertOne) ID(ctx context.Context) (id ksuid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BookCoverUpsertOne.ID is not supported by MySQL driver. Use BookCoverUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BookCoverUpsertOne) IDX(ctx context.Context) ksuid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BookCoverCreateBulk is the builder for creating many BookCover entities in bulk.
type BookCoverCreateBulk struct {
	config
	err      error
	builders []*BookCoverCreate
	conflict []sql.ConflictOption
}

// Save creates the BookCover entities in the database.
func (bccb *BookCoverCreateBulk) Save(ctx context.Context) ([]*BookCover, error) {
	if bccb.err != nil {
		return nil, bccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bccb.builders))
	nodes := make([]*BookCover, len(bccb.builders))
	mutators := make([]Mutator, len(bccb.builders))
	for i := range bccb.builders {
		func(i int, root context.Context) {
			builder := bccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookCoverMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bccb *BookCoverCreateBulk) SaveX(ctx context.Context) []*BookCover {
	v, err := bccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bccb *BookCoverCreateBulk) Exec(ctx context.Context) error {
	_, err := bccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bccb *BookCoverCreateBulk) ExecX(ctx context.Context) {
	if err := bccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BookCover.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BookCoverUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bccb *BookCoverCreateBulk) OnConflict(opts ...sql.ConflictOption) *BookCoverUpsertBulk {
	bccb.conflict = opts
	return &BookCoverUpsertBulk{
		create: bccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BookCover.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bccb *BookCoverCreateBulk) OnConflictColumns(columns ...string) *BookCoverUpsertBulk {
	bccb.conflict = append(bccb.conflict, sql.ConflictColumns(columns...))
	return &BookCoverUpsertBulk{
		create: bccb,
	}
}

// BookCoverUpsertBulk is the builder for "upsert"-ing
// a bulk of BookCover nodes.
type BookCoverUpsertBulk struct {
	create *BookCoverCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BookCover.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bookcover.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BookCoverUpsertBulk) UpdateNewValues() *BookCoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(bookcover.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(bookcover.FieldCreateTime)
			}
			if _, exists := b.mutation.Path(); exists {
				s.SetIgnore(bookcover.FieldPath)
			}
			if _, exists := b.mutation.Size(); exists {
				s.SetIgnore(bookcover.FieldSize)
			}
			if _, exists := b.mutation.Width(); exists {
				s.SetIgnore(bookcover.FieldWidth)
			}
			if _, exists := b.mutation.Height(); exists {
				s.SetIgnore(bookcover.FieldHeight)
			}
			if _, exists := b.mutation.URL(); exists {
				s.SetIgnore(bookcover.FieldURL)
			}
			if _, exists := b.mutation.ContentType(); exists {
				s.SetIgnore(bookcover.FieldContentType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BookCover.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BookCoverUpsertBulk) Ignore() *BookCoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BookCoverUpsertBulk) DoNothing() *BookCoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BookCoverCreateBulk.OnConflict
// documentation for more info.
func (u *BookCoverUpsertBulk) Update(set func(*BookCoverUpsert)) *BookCoverUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BookCoverUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BookCoverUpsertBulk) SetUpdateTime(v time.Time) *BookCoverUpsertBulk {
	return u.Update(func(s *BookCoverUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BookCoverUpsertBulk) UpdateUpdateTime() *BookCoverUpsertBulk {
	return u.Update(func(s *BookCoverUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *BookCoverUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BookCoverCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BookCoverCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BookCoverUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
