// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/bookfile"
	"lybbrio/internal/ent/schema/ksuid"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookFileCreate is the builder for creating a BookFile entity.
type BookFileCreate struct {
	config
	mutation *BookFileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (bfc *BookFileCreate) SetCreateTime(t time.Time) *BookFileCreate {
	bfc.mutation.SetCreateTime(t)
	return bfc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bfc *BookFileCreate) SetNillableCreateTime(t *time.Time) *BookFileCreate {
	if t != nil {
		bfc.SetCreateTime(*t)
	}
	return bfc
}

// SetUpdateTime sets the "update_time" field.
func (bfc *BookFileCreate) SetUpdateTime(t time.Time) *BookFileCreate {
	bfc.mutation.SetUpdateTime(t)
	return bfc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bfc *BookFileCreate) SetNillableUpdateTime(t *time.Time) *BookFileCreate {
	if t != nil {
		bfc.SetUpdateTime(*t)
	}
	return bfc
}

// SetName sets the "name" field.
func (bfc *BookFileCreate) SetName(s string) *BookFileCreate {
	bfc.mutation.SetName(s)
	return bfc
}

// SetPath sets the "path" field.
func (bfc *BookFileCreate) SetPath(s string) *BookFileCreate {
	bfc.mutation.SetPath(s)
	return bfc
}

// SetSize sets the "size" field.
func (bfc *BookFileCreate) SetSize(i int64) *BookFileCreate {
	bfc.mutation.SetSize(i)
	return bfc
}

// SetFormat sets the "format" field.
func (bfc *BookFileCreate) SetFormat(b bookfile.Format) *BookFileCreate {
	bfc.mutation.SetFormat(b)
	return bfc
}

// SetID sets the "id" field.
func (bfc *BookFileCreate) SetID(k ksuid.ID) *BookFileCreate {
	bfc.mutation.SetID(k)
	return bfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bfc *BookFileCreate) SetNillableID(k *ksuid.ID) *BookFileCreate {
	if k != nil {
		bfc.SetID(*k)
	}
	return bfc
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (bfc *BookFileCreate) SetBookID(id ksuid.ID) *BookFileCreate {
	bfc.mutation.SetBookID(id)
	return bfc
}

// SetBook sets the "book" edge to the Book entity.
func (bfc *BookFileCreate) SetBook(b *Book) *BookFileCreate {
	return bfc.SetBookID(b.ID)
}

// Mutation returns the BookFileMutation object of the builder.
func (bfc *BookFileCreate) Mutation() *BookFileMutation {
	return bfc.mutation
}

// Save creates the BookFile in the database.
func (bfc *BookFileCreate) Save(ctx context.Context) (*BookFile, error) {
	if err := bfc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bfc.sqlSave, bfc.mutation, bfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bfc *BookFileCreate) SaveX(ctx context.Context) *BookFile {
	v, err := bfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bfc *BookFileCreate) Exec(ctx context.Context) error {
	_, err := bfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfc *BookFileCreate) ExecX(ctx context.Context) {
	if err := bfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bfc *BookFileCreate) defaults() error {
	if _, ok := bfc.mutation.CreateTime(); !ok {
		if bookfile.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized bookfile.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := bookfile.DefaultCreateTime()
		bfc.mutation.SetCreateTime(v)
	}
	if _, ok := bfc.mutation.UpdateTime(); !ok {
		if bookfile.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized bookfile.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := bookfile.DefaultUpdateTime()
		bfc.mutation.SetUpdateTime(v)
	}
	if _, ok := bfc.mutation.ID(); !ok {
		if bookfile.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized bookfile.DefaultID (forgotten import ent/runtime?)")
		}
		v := bookfile.DefaultID()
		bfc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bfc *BookFileCreate) check() error {
	if _, ok := bfc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "BookFile.create_time"`)}
	}
	if _, ok := bfc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "BookFile.update_time"`)}
	}
	if _, ok := bfc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BookFile.name"`)}
	}
	if v, ok := bfc.mutation.Name(); ok {
		if err := bookfile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BookFile.name": %w`, err)}
		}
	}
	if _, ok := bfc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "BookFile.path"`)}
	}
	if v, ok := bfc.mutation.Path(); ok {
		if err := bookfile.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "BookFile.path": %w`, err)}
		}
	}
	if _, ok := bfc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "BookFile.size"`)}
	}
	if v, ok := bfc.mutation.Size(); ok {
		if err := bookfile.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "BookFile.size": %w`, err)}
		}
	}
	if _, ok := bfc.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`ent: missing required field "BookFile.format"`)}
	}
	if v, ok := bfc.mutation.Format(); ok {
		if err := bookfile.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "BookFile.format": %w`, err)}
		}
	}
	if _, ok := bfc.mutation.BookID(); !ok {
		return &ValidationError{Name: "book", err: errors.New(`ent: missing required edge "BookFile.book"`)}
	}
	return nil
}

func (bfc *BookFileCreate) sqlSave(ctx context.Context) (*BookFile, error) {
	if err := bfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(ksuid.ID); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BookFile.ID type: %T", _spec.ID.Value)
		}
	}
	bfc.mutation.id = &_node.ID
	bfc.mutation.done = true
	return _node, nil
}

func (bfc *BookFileCreate) createSpec() (*BookFile, *sqlgraph.CreateSpec) {
	var (
		_node = &BookFile{config: bfc.config}
		_spec = sqlgraph.NewCreateSpec(bookfile.Table, sqlgraph.NewFieldSpec(bookfile.FieldID, field.TypeString))
	)
	_spec.OnConflict = bfc.conflict
	if id, ok := bfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bfc.mutation.CreateTime(); ok {
		_spec.SetField(bookfile.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bfc.mutation.UpdateTime(); ok {
		_spec.SetField(bookfile.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := bfc.mutation.Name(); ok {
		_spec.SetField(bookfile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bfc.mutation.Path(); ok {
		_spec.SetField(bookfile.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := bfc.mutation.Size(); ok {
		_spec.SetField(bookfile.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := bfc.mutation.Format(); ok {
		_spec.SetField(bookfile.FieldFormat, field.TypeEnum, value)
		_node.Format = value
	}
	if nodes := bfc.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bookfile.BookTable,
			Columns: []string{bookfile.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.book_file_book = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BookFile.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BookFileUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bfc *BookFileCreate) OnConflict(opts ...sql.ConflictOption) *BookFileUpsertOne {
	bfc.conflict = opts
	return &BookFileUpsertOne{
		create: bfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BookFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bfc *BookFileCreate) OnConflictColumns(columns ...string) *BookFileUpsertOne {
	bfc.conflict = append(bfc.conflict, sql.ConflictColumns(columns...))
	return &BookFileUpsertOne{
		create: bfc,
	}
}

type (
	// BookFileUpsertOne is the builder for "upsert"-ing
	//  one BookFile node.
	BookFileUpsertOne struct {
		create *BookFileCreate
	}

	// BookFileUpsert is the "OnConflict" setter.
	BookFileUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *BookFileUpsert) SetUpdateTime(v time.Time) *BookFileUpsert {
	u.Set(bookfile.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BookFileUpsert) UpdateUpdateTime() *BookFileUpsert {
	u.SetExcluded(bookfile.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *BookFileUpsert) SetName(v string) *BookFileUpsert {
	u.Set(bookfile.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BookFileUpsert) UpdateName() *BookFileUpsert {
	u.SetExcluded(bookfile.FieldName)
	return u
}

// SetPath sets the "path" field.
func (u *BookFileUpsert) SetPath(v string) *BookFileUpsert {
	u.Set(bookfile.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *BookFileUpsert) UpdatePath() *BookFileUpsert {
	u.SetExcluded(bookfile.FieldPath)
	return u
}

// SetSize sets the "size" field.
func (u *BookFileUpsert) SetSize(v int64) *BookFileUpsert {
	u.Set(bookfile.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *BookFileUpsert) UpdateSize() *BookFileUpsert {
	u.SetExcluded(bookfile.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *BookFileUpsert) AddSize(v int64) *BookFileUpsert {
	u.Add(bookfile.FieldSize, v)
	return u
}

// SetFormat sets the "format" field.
func (u *BookFileUpsert) SetFormat(v bookfile.Format) *BookFileUpsert {
	u.Set(bookfile.FieldFormat, v)
	return u
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *BookFileUpsert) UpdateFormat() *BookFileUpsert {
	u.SetExcluded(bookfile.FieldFormat)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BookFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bookfile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BookFileUpsertOne) UpdateNewValues() *BookFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(bookfile.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(bookfile.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BookFile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BookFileUpsertOne) Ignore() *BookFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BookFileUpsertOne) DoNothing() *BookFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BookFileCreate.OnConflict
// documentation for more info.
func (u *BookFileUpsertOne) Update(set func(*BookFileUpsert)) *BookFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BookFileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BookFileUpsertOne) SetUpdateTime(v time.Time) *BookFileUpsertOne {
	return u.Update(func(s *BookFileUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BookFileUpsertOne) UpdateUpdateTime() *BookFileUpsertOne {
	return u.Update(func(s *BookFileUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *BookFileUpsertOne) SetName(v string) *BookFileUpsertOne {
	return u.Update(func(s *BookFileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BookFileUpsertOne) UpdateName() *BookFileUpsertOne {
	return u.Update(func(s *BookFileUpsert) {
		s.UpdateName()
	})
}

// SetPath sets the "path" field.
func (u *BookFileUpsertOne) SetPath(v string) *BookFileUpsertOne {
	return u.Update(func(s *BookFileUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *BookFileUpsertOne) UpdatePath() *BookFileUpsertOne {
	return u.Update(func(s *BookFileUpsert) {
		s.UpdatePath()
	})
}

// SetSize sets the "size" field.
func (u *BookFileUpsertOne) SetSize(v int64) *BookFileUpsertOne {
	return u.Update(func(s *BookFileUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *BookFileUpsertOne) AddSize(v int64) *BookFileUpsertOne {
	return u.Update(func(s *BookFileUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *BookFileUpsertOne) UpdateSize() *BookFileUpsertOne {
	return u.Update(func(s *BookFileUpsert) {
		s.UpdateSize()
	})
}

// SetFormat sets the "format" field.
func (u *BookFileUpsertOne) SetFormat(v bookfile.Format) *BookFileUpsertOne {
	return u.Update(func(s *BookFileUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *BookFileUpsertOne) UpdateFormat() *BookFileUpsertOne {
	return u.Update(func(s *BookFileUpsert) {
		s.UpdateFormat()
	})
}

// Exec executes the query.
func (u *BookFileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BookFileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BookFileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BookFileUpsertOne) ID(ctx context.Context) (id ksuid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BookFileUpsertOne.ID is not supported by MySQL driver. Use BookFileUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BookFileUpsertOne) IDX(ctx context.Context) ksuid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BookFileCreateBulk is the builder for creating many BookFile entities in bulk.
type BookFileCreateBulk struct {
	config
	err      error
	builders []*BookFileCreate
	conflict []sql.ConflictOption
}

// Save creates the BookFile entities in the database.
func (bfcb *BookFileCreateBulk) Save(ctx context.Context) ([]*BookFile, error) {
	if bfcb.err != nil {
		return nil, bfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bfcb.builders))
	nodes := make([]*BookFile, len(bfcb.builders))
	mutators := make([]Mutator, len(bfcb.builders))
	for i := range bfcb.builders {
		func(i int, root context.Context) {
			builder := bfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bfcb *BookFileCreateBulk) SaveX(ctx context.Context) []*BookFile {
	v, err := bfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bfcb *BookFileCreateBulk) Exec(ctx context.Context) error {
	_, err := bfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfcb *BookFileCreateBulk) ExecX(ctx context.Context) {
	if err := bfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BookFile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BookFileUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bfcb *BookFileCreateBulk) OnConflict(opts ...sql.ConflictOption) *BookFileUpsertBulk {
	bfcb.conflict = opts
	return &BookFileUpsertBulk{
		create: bfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BookFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bfcb *BookFileCreateBulk) OnConflictColumns(columns ...string) *BookFileUpsertBulk {
	bfcb.conflict = append(bfcb.conflict, sql.ConflictColumns(columns...))
	return &BookFileUpsertBulk{
		create: bfcb,
	}
}

// BookFileUpsertBulk is the builder for "upsert"-ing
// a bulk of BookFile nodes.
type BookFileUpsertBulk struct {
	create *BookFileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BookFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bookfile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BookFileUpsertBulk) UpdateNewValues() *BookFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(bookfile.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(bookfile.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BookFile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BookFileUpsertBulk) Ignore() *BookFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BookFileUpsertBulk) DoNothing() *BookFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BookFileCreateBulk.OnConflict
// documentation for more info.
func (u *BookFileUpsertBulk) Update(set func(*BookFileUpsert)) *BookFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BookFileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BookFileUpsertBulk) SetUpdateTime(v time.Time) *BookFileUpsertBulk {
	return u.Update(func(s *BookFileUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BookFileUpsertBulk) UpdateUpdateTime() *BookFileUpsertBulk {
	return u.Update(func(s *BookFileUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *BookFileUpsertBulk) SetName(v string) *BookFileUpsertBulk {
	return u.Update(func(s *BookFileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BookFileUpsertBulk) UpdateName() *BookFileUpsertBulk {
	return u.Update(func(s *BookFileUpsert) {
		s.UpdateName()
	})
}

// SetPath sets the "path" field.
func (u *BookFileUpsertBulk) SetPath(v string) *BookFileUpsertBulk {
	return u.Update(func(s *BookFileUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *BookFileUpsertBulk) UpdatePath() *BookFileUpsertBulk {
	return u.Update(func(s *BookFileUpsert) {
		s.UpdatePath()
	})
}

// SetSize sets the "size" field.
func (u *BookFileUpsertBulk) SetSize(v int64) *BookFileUpsertBulk {
	return u.Update(func(s *BookFileUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *BookFileUpsertBulk) AddSize(v int64) *BookFileUpsertBulk {
	return u.Update(func(s *BookFileUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *BookFileUpsertBulk) UpdateSize() *BookFileUpsertBulk {
	return u.Update(func(s *BookFileUpsert) {
		s.UpdateSize()
	})
}

// SetFormat sets the "format" field.
func (u *BookFileUpsertBulk) SetFormat(v bookfile.Format) *BookFileUpsertBulk {
	return u.Update(func(s *BookFileUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *BookFileUpsertBulk) UpdateFormat() *BookFileUpsertBulk {
	return u.Update(func(s *BookFileUpsert) {
		s.UpdateFormat()
	})
}

// Exec executes the query.
func (u *BookFileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BookFileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BookFileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BookFileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
