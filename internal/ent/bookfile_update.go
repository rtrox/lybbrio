// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/bookfile"
	"lybbrio/internal/ent/predicate"
	"lybbrio/internal/ent/schema/ksuid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookFileUpdate is the builder for updating BookFile entities.
type BookFileUpdate struct {
	config
	hooks    []Hook
	mutation *BookFileMutation
}

// Where appends a list predicates to the BookFileUpdate builder.
func (bfu *BookFileUpdate) Where(ps ...predicate.BookFile) *BookFileUpdate {
	bfu.mutation.Where(ps...)
	return bfu
}

// SetUpdateTime sets the "update_time" field.
func (bfu *BookFileUpdate) SetUpdateTime(t time.Time) *BookFileUpdate {
	bfu.mutation.SetUpdateTime(t)
	return bfu
}

// SetName sets the "name" field.
func (bfu *BookFileUpdate) SetName(s string) *BookFileUpdate {
	bfu.mutation.SetName(s)
	return bfu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bfu *BookFileUpdate) SetNillableName(s *string) *BookFileUpdate {
	if s != nil {
		bfu.SetName(*s)
	}
	return bfu
}

// SetPath sets the "path" field.
func (bfu *BookFileUpdate) SetPath(s string) *BookFileUpdate {
	bfu.mutation.SetPath(s)
	return bfu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (bfu *BookFileUpdate) SetNillablePath(s *string) *BookFileUpdate {
	if s != nil {
		bfu.SetPath(*s)
	}
	return bfu
}

// SetSize sets the "size" field.
func (bfu *BookFileUpdate) SetSize(i int64) *BookFileUpdate {
	bfu.mutation.ResetSize()
	bfu.mutation.SetSize(i)
	return bfu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (bfu *BookFileUpdate) SetNillableSize(i *int64) *BookFileUpdate {
	if i != nil {
		bfu.SetSize(*i)
	}
	return bfu
}

// AddSize adds i to the "size" field.
func (bfu *BookFileUpdate) AddSize(i int64) *BookFileUpdate {
	bfu.mutation.AddSize(i)
	return bfu
}

// SetFormat sets the "format" field.
func (bfu *BookFileUpdate) SetFormat(b bookfile.Format) *BookFileUpdate {
	bfu.mutation.SetFormat(b)
	return bfu
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (bfu *BookFileUpdate) SetNillableFormat(b *bookfile.Format) *BookFileUpdate {
	if b != nil {
		bfu.SetFormat(*b)
	}
	return bfu
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (bfu *BookFileUpdate) SetBookID(id ksuid.ID) *BookFileUpdate {
	bfu.mutation.SetBookID(id)
	return bfu
}

// SetBook sets the "book" edge to the Book entity.
func (bfu *BookFileUpdate) SetBook(b *Book) *BookFileUpdate {
	return bfu.SetBookID(b.ID)
}

// Mutation returns the BookFileMutation object of the builder.
func (bfu *BookFileUpdate) Mutation() *BookFileMutation {
	return bfu.mutation
}

// ClearBook clears the "book" edge to the Book entity.
func (bfu *BookFileUpdate) ClearBook() *BookFileUpdate {
	bfu.mutation.ClearBook()
	return bfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bfu *BookFileUpdate) Save(ctx context.Context) (int, error) {
	if err := bfu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, bfu.sqlSave, bfu.mutation, bfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bfu *BookFileUpdate) SaveX(ctx context.Context) int {
	affected, err := bfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bfu *BookFileUpdate) Exec(ctx context.Context) error {
	_, err := bfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfu *BookFileUpdate) ExecX(ctx context.Context) {
	if err := bfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bfu *BookFileUpdate) defaults() error {
	if _, ok := bfu.mutation.UpdateTime(); !ok {
		if bookfile.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized bookfile.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := bookfile.UpdateDefaultUpdateTime()
		bfu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bfu *BookFileUpdate) check() error {
	if v, ok := bfu.mutation.Name(); ok {
		if err := bookfile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BookFile.name": %w`, err)}
		}
	}
	if v, ok := bfu.mutation.Path(); ok {
		if err := bookfile.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "BookFile.path": %w`, err)}
		}
	}
	if v, ok := bfu.mutation.Size(); ok {
		if err := bookfile.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "BookFile.size": %w`, err)}
		}
	}
	if v, ok := bfu.mutation.Format(); ok {
		if err := bookfile.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "BookFile.format": %w`, err)}
		}
	}
	if _, ok := bfu.mutation.BookID(); bfu.mutation.BookCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BookFile.book"`)
	}
	return nil
}

func (bfu *BookFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bookfile.Table, bookfile.Columns, sqlgraph.NewFieldSpec(bookfile.FieldID, field.TypeString))
	if ps := bfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bfu.mutation.UpdateTime(); ok {
		_spec.SetField(bookfile.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := bfu.mutation.Name(); ok {
		_spec.SetField(bookfile.FieldName, field.TypeString, value)
	}
	if value, ok := bfu.mutation.Path(); ok {
		_spec.SetField(bookfile.FieldPath, field.TypeString, value)
	}
	if value, ok := bfu.mutation.Size(); ok {
		_spec.SetField(bookfile.FieldSize, field.TypeInt64, value)
	}
	if value, ok := bfu.mutation.AddedSize(); ok {
		_spec.AddField(bookfile.FieldSize, field.TypeInt64, value)
	}
	if value, ok := bfu.mutation.Format(); ok {
		_spec.SetField(bookfile.FieldFormat, field.TypeEnum, value)
	}
	if bfu.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bookfile.BookTable,
			Columns: []string{bookfile.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfu.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bookfile.BookTable,
			Columns: []string{bookfile.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bfu.mutation.done = true
	return n, nil
}

// BookFileUpdateOne is the builder for updating a single BookFile entity.
type BookFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookFileMutation
}

// SetUpdateTime sets the "update_time" field.
func (bfuo *BookFileUpdateOne) SetUpdateTime(t time.Time) *BookFileUpdateOne {
	bfuo.mutation.SetUpdateTime(t)
	return bfuo
}

// SetName sets the "name" field.
func (bfuo *BookFileUpdateOne) SetName(s string) *BookFileUpdateOne {
	bfuo.mutation.SetName(s)
	return bfuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bfuo *BookFileUpdateOne) SetNillableName(s *string) *BookFileUpdateOne {
	if s != nil {
		bfuo.SetName(*s)
	}
	return bfuo
}

// SetPath sets the "path" field.
func (bfuo *BookFileUpdateOne) SetPath(s string) *BookFileUpdateOne {
	bfuo.mutation.SetPath(s)
	return bfuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (bfuo *BookFileUpdateOne) SetNillablePath(s *string) *BookFileUpdateOne {
	if s != nil {
		bfuo.SetPath(*s)
	}
	return bfuo
}

// SetSize sets the "size" field.
func (bfuo *BookFileUpdateOne) SetSize(i int64) *BookFileUpdateOne {
	bfuo.mutation.ResetSize()
	bfuo.mutation.SetSize(i)
	return bfuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (bfuo *BookFileUpdateOne) SetNillableSize(i *int64) *BookFileUpdateOne {
	if i != nil {
		bfuo.SetSize(*i)
	}
	return bfuo
}

// AddSize adds i to the "size" field.
func (bfuo *BookFileUpdateOne) AddSize(i int64) *BookFileUpdateOne {
	bfuo.mutation.AddSize(i)
	return bfuo
}

// SetFormat sets the "format" field.
func (bfuo *BookFileUpdateOne) SetFormat(b bookfile.Format) *BookFileUpdateOne {
	bfuo.mutation.SetFormat(b)
	return bfuo
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (bfuo *BookFileUpdateOne) SetNillableFormat(b *bookfile.Format) *BookFileUpdateOne {
	if b != nil {
		bfuo.SetFormat(*b)
	}
	return bfuo
}

// SetBookID sets the "book" edge to the Book entity by ID.
func (bfuo *BookFileUpdateOne) SetBookID(id ksuid.ID) *BookFileUpdateOne {
	bfuo.mutation.SetBookID(id)
	return bfuo
}

// SetBook sets the "book" edge to the Book entity.
func (bfuo *BookFileUpdateOne) SetBook(b *Book) *BookFileUpdateOne {
	return bfuo.SetBookID(b.ID)
}

// Mutation returns the BookFileMutation object of the builder.
func (bfuo *BookFileUpdateOne) Mutation() *BookFileMutation {
	return bfuo.mutation
}

// ClearBook clears the "book" edge to the Book entity.
func (bfuo *BookFileUpdateOne) ClearBook() *BookFileUpdateOne {
	bfuo.mutation.ClearBook()
	return bfuo
}

// Where appends a list predicates to the BookFileUpdate builder.
func (bfuo *BookFileUpdateOne) Where(ps ...predicate.BookFile) *BookFileUpdateOne {
	bfuo.mutation.Where(ps...)
	return bfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bfuo *BookFileUpdateOne) Select(field string, fields ...string) *BookFileUpdateOne {
	bfuo.fields = append([]string{field}, fields...)
	return bfuo
}

// Save executes the query and returns the updated BookFile entity.
func (bfuo *BookFileUpdateOne) Save(ctx context.Context) (*BookFile, error) {
	if err := bfuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bfuo.sqlSave, bfuo.mutation, bfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bfuo *BookFileUpdateOne) SaveX(ctx context.Context) *BookFile {
	node, err := bfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bfuo *BookFileUpdateOne) Exec(ctx context.Context) error {
	_, err := bfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfuo *BookFileUpdateOne) ExecX(ctx context.Context) {
	if err := bfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bfuo *BookFileUpdateOne) defaults() error {
	if _, ok := bfuo.mutation.UpdateTime(); !ok {
		if bookfile.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized bookfile.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := bookfile.UpdateDefaultUpdateTime()
		bfuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bfuo *BookFileUpdateOne) check() error {
	if v, ok := bfuo.mutation.Name(); ok {
		if err := bookfile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BookFile.name": %w`, err)}
		}
	}
	if v, ok := bfuo.mutation.Path(); ok {
		if err := bookfile.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "BookFile.path": %w`, err)}
		}
	}
	if v, ok := bfuo.mutation.Size(); ok {
		if err := bookfile.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "BookFile.size": %w`, err)}
		}
	}
	if v, ok := bfuo.mutation.Format(); ok {
		if err := bookfile.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "BookFile.format": %w`, err)}
		}
	}
	if _, ok := bfuo.mutation.BookID(); bfuo.mutation.BookCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BookFile.book"`)
	}
	return nil
}

func (bfuo *BookFileUpdateOne) sqlSave(ctx context.Context) (_node *BookFile, err error) {
	if err := bfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bookfile.Table, bookfile.Columns, sqlgraph.NewFieldSpec(bookfile.FieldID, field.TypeString))
	id, ok := bfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BookFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookfile.FieldID)
		for _, f := range fields {
			if !bookfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bookfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bfuo.mutation.UpdateTime(); ok {
		_spec.SetField(bookfile.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := bfuo.mutation.Name(); ok {
		_spec.SetField(bookfile.FieldName, field.TypeString, value)
	}
	if value, ok := bfuo.mutation.Path(); ok {
		_spec.SetField(bookfile.FieldPath, field.TypeString, value)
	}
	if value, ok := bfuo.mutation.Size(); ok {
		_spec.SetField(bookfile.FieldSize, field.TypeInt64, value)
	}
	if value, ok := bfuo.mutation.AddedSize(); ok {
		_spec.AddField(bookfile.FieldSize, field.TypeInt64, value)
	}
	if value, ok := bfuo.mutation.Format(); ok {
		_spec.SetField(bookfile.FieldFormat, field.TypeEnum, value)
	}
	if bfuo.mutation.BookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bookfile.BookTable,
			Columns: []string{bookfile.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfuo.mutation.BookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bookfile.BookTable,
			Columns: []string{bookfile.BookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BookFile{config: bfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bfuo.mutation.done = true
	return _node, nil
}
