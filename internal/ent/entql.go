// Code generated by ent, DO NOT EDIT.

package ent

import (
	"lybbrio/internal/ent/author"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/bookfile"
	"lybbrio/internal/ent/identifier"
	"lybbrio/internal/ent/language"
	"lybbrio/internal/ent/predicate"
	"lybbrio/internal/ent/publisher"
	"lybbrio/internal/ent/series"
	"lybbrio/internal/ent/shelf"
	"lybbrio/internal/ent/tag"
	"lybbrio/internal/ent/task"
	"lybbrio/internal/ent/user"
	"lybbrio/internal/ent/userpermissions"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 12)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   author.Table,
			Columns: author.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: author.FieldID,
			},
		},
		Type: "Author",
		Fields: map[string]*sqlgraph.FieldSpec{
			author.FieldCreateTime: {Type: field.TypeTime, Column: author.FieldCreateTime},
			author.FieldUpdateTime: {Type: field.TypeTime, Column: author.FieldUpdateTime},
			author.FieldCalibreID:  {Type: field.TypeInt64, Column: author.FieldCalibreID},
			author.FieldName:       {Type: field.TypeString, Column: author.FieldName},
			author.FieldSort:       {Type: field.TypeString, Column: author.FieldSort},
			author.FieldLink:       {Type: field.TypeString, Column: author.FieldLink},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   book.Table,
			Columns: book.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: book.FieldID,
			},
		},
		Type: "Book",
		Fields: map[string]*sqlgraph.FieldSpec{
			book.FieldCreateTime:    {Type: field.TypeTime, Column: book.FieldCreateTime},
			book.FieldUpdateTime:    {Type: field.TypeTime, Column: book.FieldUpdateTime},
			book.FieldCalibreID:     {Type: field.TypeInt64, Column: book.FieldCalibreID},
			book.FieldTitle:         {Type: field.TypeString, Column: book.FieldTitle},
			book.FieldSort:          {Type: field.TypeString, Column: book.FieldSort},
			book.FieldPublishedDate: {Type: field.TypeTime, Column: book.FieldPublishedDate},
			book.FieldPath:          {Type: field.TypeString, Column: book.FieldPath},
			book.FieldIsbn:          {Type: field.TypeString, Column: book.FieldIsbn},
			book.FieldDescription:   {Type: field.TypeString, Column: book.FieldDescription},
			book.FieldSeriesIndex:   {Type: field.TypeFloat64, Column: book.FieldSeriesIndex},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   bookfile.Table,
			Columns: bookfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: bookfile.FieldID,
			},
		},
		Type: "BookFile",
		Fields: map[string]*sqlgraph.FieldSpec{
			bookfile.FieldCreateTime: {Type: field.TypeTime, Column: bookfile.FieldCreateTime},
			bookfile.FieldUpdateTime: {Type: field.TypeTime, Column: bookfile.FieldUpdateTime},
			bookfile.FieldName:       {Type: field.TypeString, Column: bookfile.FieldName},
			bookfile.FieldPath:       {Type: field.TypeString, Column: bookfile.FieldPath},
			bookfile.FieldSize:       {Type: field.TypeInt64, Column: bookfile.FieldSize},
			bookfile.FieldFormat:     {Type: field.TypeEnum, Column: bookfile.FieldFormat},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   identifier.Table,
			Columns: identifier.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: identifier.FieldID,
			},
		},
		Type: "Identifier",
		Fields: map[string]*sqlgraph.FieldSpec{
			identifier.FieldCreateTime: {Type: field.TypeTime, Column: identifier.FieldCreateTime},
			identifier.FieldUpdateTime: {Type: field.TypeTime, Column: identifier.FieldUpdateTime},
			identifier.FieldCalibreID:  {Type: field.TypeInt64, Column: identifier.FieldCalibreID},
			identifier.FieldType:       {Type: field.TypeString, Column: identifier.FieldType},
			identifier.FieldValue:      {Type: field.TypeString, Column: identifier.FieldValue},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   language.Table,
			Columns: language.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: language.FieldID,
			},
		},
		Type: "Language",
		Fields: map[string]*sqlgraph.FieldSpec{
			language.FieldCreateTime: {Type: field.TypeTime, Column: language.FieldCreateTime},
			language.FieldUpdateTime: {Type: field.TypeTime, Column: language.FieldUpdateTime},
			language.FieldCalibreID:  {Type: field.TypeInt64, Column: language.FieldCalibreID},
			language.FieldCode:       {Type: field.TypeString, Column: language.FieldCode},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   publisher.Table,
			Columns: publisher.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: publisher.FieldID,
			},
		},
		Type: "Publisher",
		Fields: map[string]*sqlgraph.FieldSpec{
			publisher.FieldCreateTime: {Type: field.TypeTime, Column: publisher.FieldCreateTime},
			publisher.FieldUpdateTime: {Type: field.TypeTime, Column: publisher.FieldUpdateTime},
			publisher.FieldCalibreID:  {Type: field.TypeInt64, Column: publisher.FieldCalibreID},
			publisher.FieldName:       {Type: field.TypeString, Column: publisher.FieldName},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   series.Table,
			Columns: series.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: series.FieldID,
			},
		},
		Type: "Series",
		Fields: map[string]*sqlgraph.FieldSpec{
			series.FieldCreateTime: {Type: field.TypeTime, Column: series.FieldCreateTime},
			series.FieldUpdateTime: {Type: field.TypeTime, Column: series.FieldUpdateTime},
			series.FieldCalibreID:  {Type: field.TypeInt64, Column: series.FieldCalibreID},
			series.FieldName:       {Type: field.TypeString, Column: series.FieldName},
			series.FieldSort:       {Type: field.TypeString, Column: series.FieldSort},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shelf.Table,
			Columns: shelf.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: shelf.FieldID,
			},
		},
		Type: "Shelf",
		Fields: map[string]*sqlgraph.FieldSpec{
			shelf.FieldCreateTime:  {Type: field.TypeTime, Column: shelf.FieldCreateTime},
			shelf.FieldUpdateTime:  {Type: field.TypeTime, Column: shelf.FieldUpdateTime},
			shelf.FieldPublic:      {Type: field.TypeBool, Column: shelf.FieldPublic},
			shelf.FieldUserID:      {Type: field.TypeString, Column: shelf.FieldUserID},
			shelf.FieldName:        {Type: field.TypeString, Column: shelf.FieldName},
			shelf.FieldDescription: {Type: field.TypeString, Column: shelf.FieldDescription},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tag.Table,
			Columns: tag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: tag.FieldID,
			},
		},
		Type: "Tag",
		Fields: map[string]*sqlgraph.FieldSpec{
			tag.FieldCalibreID: {Type: field.TypeInt64, Column: tag.FieldCalibreID},
			tag.FieldName:      {Type: field.TypeString, Column: tag.FieldName},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: task.FieldID,
			},
		},
		Type: "Task",
		Fields: map[string]*sqlgraph.FieldSpec{
			task.FieldCreateTime:   {Type: field.TypeTime, Column: task.FieldCreateTime},
			task.FieldUpdateTime:   {Type: field.TypeTime, Column: task.FieldUpdateTime},
			task.FieldType:         {Type: field.TypeEnum, Column: task.FieldType},
			task.FieldStatus:       {Type: field.TypeEnum, Column: task.FieldStatus},
			task.FieldProgress:     {Type: field.TypeFloat64, Column: task.FieldProgress},
			task.FieldMessage:      {Type: field.TypeString, Column: task.FieldMessage},
			task.FieldError:        {Type: field.TypeString, Column: task.FieldError},
			task.FieldUserID:       {Type: field.TypeString, Column: task.FieldUserID},
			task.FieldIsSystemTask: {Type: field.TypeBool, Column: task.FieldIsSystemTask},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreateTime:   {Type: field.TypeTime, Column: user.FieldCreateTime},
			user.FieldUpdateTime:   {Type: field.TypeTime, Column: user.FieldUpdateTime},
			user.FieldUsername:     {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldPasswordHash: {Type: field.TypeString, Column: user.FieldPasswordHash},
			user.FieldEmail:        {Type: field.TypeString, Column: user.FieldEmail},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userpermissions.Table,
			Columns: userpermissions.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: userpermissions.FieldID,
			},
		},
		Type: "UserPermissions",
		Fields: map[string]*sqlgraph.FieldSpec{
			userpermissions.FieldCreateTime:      {Type: field.TypeTime, Column: userpermissions.FieldCreateTime},
			userpermissions.FieldUpdateTime:      {Type: field.TypeTime, Column: userpermissions.FieldUpdateTime},
			userpermissions.FieldUserID:          {Type: field.TypeString, Column: userpermissions.FieldUserID},
			userpermissions.FieldCanEdit:         {Type: field.TypeBool, Column: userpermissions.FieldCanEdit},
			userpermissions.FieldAdmin:           {Type: field.TypeBool, Column: userpermissions.FieldAdmin},
			userpermissions.FieldCanCreatePublic: {Type: field.TypeBool, Column: userpermissions.FieldCanCreatePublic},
		},
	}
	graph.MustAddE(
		"books",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   author.BooksTable,
			Columns: author.BooksPrimaryKey,
			Bidi:    false,
		},
		"Author",
		"Book",
	)
	graph.MustAddE(
		"authors",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.AuthorsTable,
			Columns: book.AuthorsPrimaryKey,
			Bidi:    false,
		},
		"Book",
		"Author",
	)
	graph.MustAddE(
		"publisher",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.PublisherTable,
			Columns: book.PublisherPrimaryKey,
			Bidi:    false,
		},
		"Book",
		"Publisher",
	)
	graph.MustAddE(
		"series",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.SeriesTable,
			Columns: book.SeriesPrimaryKey,
			Bidi:    false,
		},
		"Book",
		"Series",
	)
	graph.MustAddE(
		"identifiers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   book.IdentifiersTable,
			Columns: []string{book.IdentifiersColumn},
			Bidi:    false,
		},
		"Book",
		"Identifier",
	)
	graph.MustAddE(
		"tags",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.TagsTable,
			Columns: book.TagsPrimaryKey,
			Bidi:    false,
		},
		"Book",
		"Tag",
	)
	graph.MustAddE(
		"language",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.LanguageTable,
			Columns: book.LanguagePrimaryKey,
			Bidi:    false,
		},
		"Book",
		"Language",
	)
	graph.MustAddE(
		"shelf",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   book.ShelfTable,
			Columns: book.ShelfPrimaryKey,
			Bidi:    false,
		},
		"Book",
		"Shelf",
	)
	graph.MustAddE(
		"files",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   book.FilesTable,
			Columns: []string{book.FilesColumn},
			Bidi:    false,
		},
		"Book",
		"BookFile",
	)
	graph.MustAddE(
		"book",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bookfile.BookTable,
			Columns: []string{bookfile.BookColumn},
			Bidi:    false,
		},
		"BookFile",
		"Book",
	)
	graph.MustAddE(
		"book",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   identifier.BookTable,
			Columns: []string{identifier.BookColumn},
			Bidi:    false,
		},
		"Identifier",
		"Book",
	)
	graph.MustAddE(
		"books",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   language.BooksTable,
			Columns: language.BooksPrimaryKey,
			Bidi:    false,
		},
		"Language",
		"Book",
	)
	graph.MustAddE(
		"books",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   publisher.BooksTable,
			Columns: publisher.BooksPrimaryKey,
			Bidi:    false,
		},
		"Publisher",
		"Book",
	)
	graph.MustAddE(
		"books",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   series.BooksTable,
			Columns: series.BooksPrimaryKey,
			Bidi:    false,
		},
		"Series",
		"Book",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shelf.UserTable,
			Columns: []string{shelf.UserColumn},
			Bidi:    false,
		},
		"Shelf",
		"User",
	)
	graph.MustAddE(
		"books",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shelf.BooksTable,
			Columns: shelf.BooksPrimaryKey,
			Bidi:    false,
		},
		"Shelf",
		"Book",
	)
	graph.MustAddE(
		"books",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tag.BooksTable,
			Columns: tag.BooksPrimaryKey,
			Bidi:    false,
		},
		"Tag",
		"Book",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.UserTable,
			Columns: []string{task.UserColumn},
			Bidi:    false,
		},
		"Task",
		"User",
	)
	graph.MustAddE(
		"shelves",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ShelvesTable,
			Columns: []string{user.ShelvesColumn},
			Bidi:    false,
		},
		"User",
		"Shelf",
	)
	graph.MustAddE(
		"user_permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
		},
		"User",
		"UserPermissions",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpermissions.UserTable,
			Columns: []string{userpermissions.UserColumn},
			Bidi:    false,
		},
		"UserPermissions",
		"User",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AuthorQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AuthorQuery builder.
func (aq *AuthorQuery) Filter() *AuthorFilter {
	return &AuthorFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AuthorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AuthorMutation builder.
func (m *AuthorMutation) Filter() *AuthorFilter {
	return &AuthorFilter{config: m.config, predicateAdder: m}
}

// AuthorFilter provides a generic filtering capability at runtime for AuthorQuery.
type AuthorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AuthorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *AuthorFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(author.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *AuthorFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(author.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *AuthorFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(author.FieldUpdateTime))
}

// WhereCalibreID applies the entql int64 predicate on the calibre_id field.
func (f *AuthorFilter) WhereCalibreID(p entql.Int64P) {
	f.Where(p.Field(author.FieldCalibreID))
}

// WhereName applies the entql string predicate on the name field.
func (f *AuthorFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(author.FieldName))
}

// WhereSort applies the entql string predicate on the sort field.
func (f *AuthorFilter) WhereSort(p entql.StringP) {
	f.Where(p.Field(author.FieldSort))
}

// WhereLink applies the entql string predicate on the link field.
func (f *AuthorFilter) WhereLink(p entql.StringP) {
	f.Where(p.Field(author.FieldLink))
}

// WhereHasBooks applies a predicate to check if query has an edge books.
func (f *AuthorFilter) WhereHasBooks() {
	f.Where(entql.HasEdge("books"))
}

// WhereHasBooksWith applies a predicate to check if query has an edge books with a given conditions (other predicates).
func (f *AuthorFilter) WhereHasBooksWith(preds ...predicate.Book) {
	f.Where(entql.HasEdgeWith("books", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bq *BookQuery) addPredicate(pred func(s *sql.Selector)) {
	bq.predicates = append(bq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BookQuery builder.
func (bq *BookQuery) Filter() *BookFilter {
	return &BookFilter{config: bq.config, predicateAdder: bq}
}

// addPredicate implements the predicateAdder interface.
func (m *BookMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BookMutation builder.
func (m *BookMutation) Filter() *BookFilter {
	return &BookFilter{config: m.config, predicateAdder: m}
}

// BookFilter provides a generic filtering capability at runtime for BookQuery.
type BookFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BookFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *BookFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(book.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *BookFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(book.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *BookFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(book.FieldUpdateTime))
}

// WhereCalibreID applies the entql int64 predicate on the calibre_id field.
func (f *BookFilter) WhereCalibreID(p entql.Int64P) {
	f.Where(p.Field(book.FieldCalibreID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *BookFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(book.FieldTitle))
}

// WhereSort applies the entql string predicate on the sort field.
func (f *BookFilter) WhereSort(p entql.StringP) {
	f.Where(p.Field(book.FieldSort))
}

// WherePublishedDate applies the entql time.Time predicate on the published_date field.
func (f *BookFilter) WherePublishedDate(p entql.TimeP) {
	f.Where(p.Field(book.FieldPublishedDate))
}

// WherePath applies the entql string predicate on the path field.
func (f *BookFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(book.FieldPath))
}

// WhereIsbn applies the entql string predicate on the isbn field.
func (f *BookFilter) WhereIsbn(p entql.StringP) {
	f.Where(p.Field(book.FieldIsbn))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *BookFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(book.FieldDescription))
}

// WhereSeriesIndex applies the entql float64 predicate on the series_index field.
func (f *BookFilter) WhereSeriesIndex(p entql.Float64P) {
	f.Where(p.Field(book.FieldSeriesIndex))
}

// WhereHasAuthors applies a predicate to check if query has an edge authors.
func (f *BookFilter) WhereHasAuthors() {
	f.Where(entql.HasEdge("authors"))
}

// WhereHasAuthorsWith applies a predicate to check if query has an edge authors with a given conditions (other predicates).
func (f *BookFilter) WhereHasAuthorsWith(preds ...predicate.Author) {
	f.Where(entql.HasEdgeWith("authors", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPublisher applies a predicate to check if query has an edge publisher.
func (f *BookFilter) WhereHasPublisher() {
	f.Where(entql.HasEdge("publisher"))
}

// WhereHasPublisherWith applies a predicate to check if query has an edge publisher with a given conditions (other predicates).
func (f *BookFilter) WhereHasPublisherWith(preds ...predicate.Publisher) {
	f.Where(entql.HasEdgeWith("publisher", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSeries applies a predicate to check if query has an edge series.
func (f *BookFilter) WhereHasSeries() {
	f.Where(entql.HasEdge("series"))
}

// WhereHasSeriesWith applies a predicate to check if query has an edge series with a given conditions (other predicates).
func (f *BookFilter) WhereHasSeriesWith(preds ...predicate.Series) {
	f.Where(entql.HasEdgeWith("series", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIdentifiers applies a predicate to check if query has an edge identifiers.
func (f *BookFilter) WhereHasIdentifiers() {
	f.Where(entql.HasEdge("identifiers"))
}

// WhereHasIdentifiersWith applies a predicate to check if query has an edge identifiers with a given conditions (other predicates).
func (f *BookFilter) WhereHasIdentifiersWith(preds ...predicate.Identifier) {
	f.Where(entql.HasEdgeWith("identifiers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTags applies a predicate to check if query has an edge tags.
func (f *BookFilter) WhereHasTags() {
	f.Where(entql.HasEdge("tags"))
}

// WhereHasTagsWith applies a predicate to check if query has an edge tags with a given conditions (other predicates).
func (f *BookFilter) WhereHasTagsWith(preds ...predicate.Tag) {
	f.Where(entql.HasEdgeWith("tags", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLanguage applies a predicate to check if query has an edge language.
func (f *BookFilter) WhereHasLanguage() {
	f.Where(entql.HasEdge("language"))
}

// WhereHasLanguageWith applies a predicate to check if query has an edge language with a given conditions (other predicates).
func (f *BookFilter) WhereHasLanguageWith(preds ...predicate.Language) {
	f.Where(entql.HasEdgeWith("language", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShelf applies a predicate to check if query has an edge shelf.
func (f *BookFilter) WhereHasShelf() {
	f.Where(entql.HasEdge("shelf"))
}

// WhereHasShelfWith applies a predicate to check if query has an edge shelf with a given conditions (other predicates).
func (f *BookFilter) WhereHasShelfWith(preds ...predicate.Shelf) {
	f.Where(entql.HasEdgeWith("shelf", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFiles applies a predicate to check if query has an edge files.
func (f *BookFilter) WhereHasFiles() {
	f.Where(entql.HasEdge("files"))
}

// WhereHasFilesWith applies a predicate to check if query has an edge files with a given conditions (other predicates).
func (f *BookFilter) WhereHasFilesWith(preds ...predicate.BookFile) {
	f.Where(entql.HasEdgeWith("files", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bfq *BookFileQuery) addPredicate(pred func(s *sql.Selector)) {
	bfq.predicates = append(bfq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BookFileQuery builder.
func (bfq *BookFileQuery) Filter() *BookFileFilter {
	return &BookFileFilter{config: bfq.config, predicateAdder: bfq}
}

// addPredicate implements the predicateAdder interface.
func (m *BookFileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BookFileMutation builder.
func (m *BookFileMutation) Filter() *BookFileFilter {
	return &BookFileFilter{config: m.config, predicateAdder: m}
}

// BookFileFilter provides a generic filtering capability at runtime for BookFileQuery.
type BookFileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BookFileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *BookFileFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(bookfile.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *BookFileFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(bookfile.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *BookFileFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(bookfile.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *BookFileFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(bookfile.FieldName))
}

// WherePath applies the entql string predicate on the path field.
func (f *BookFileFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(bookfile.FieldPath))
}

// WhereSize applies the entql int64 predicate on the size field.
func (f *BookFileFilter) WhereSize(p entql.Int64P) {
	f.Where(p.Field(bookfile.FieldSize))
}

// WhereFormat applies the entql string predicate on the format field.
func (f *BookFileFilter) WhereFormat(p entql.StringP) {
	f.Where(p.Field(bookfile.FieldFormat))
}

// WhereHasBook applies a predicate to check if query has an edge book.
func (f *BookFileFilter) WhereHasBook() {
	f.Where(entql.HasEdge("book"))
}

// WhereHasBookWith applies a predicate to check if query has an edge book with a given conditions (other predicates).
func (f *BookFileFilter) WhereHasBookWith(preds ...predicate.Book) {
	f.Where(entql.HasEdgeWith("book", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iq *IdentifierQuery) addPredicate(pred func(s *sql.Selector)) {
	iq.predicates = append(iq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IdentifierQuery builder.
func (iq *IdentifierQuery) Filter() *IdentifierFilter {
	return &IdentifierFilter{config: iq.config, predicateAdder: iq}
}

// addPredicate implements the predicateAdder interface.
func (m *IdentifierMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IdentifierMutation builder.
func (m *IdentifierMutation) Filter() *IdentifierFilter {
	return &IdentifierFilter{config: m.config, predicateAdder: m}
}

// IdentifierFilter provides a generic filtering capability at runtime for IdentifierQuery.
type IdentifierFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IdentifierFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *IdentifierFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(identifier.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *IdentifierFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(identifier.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *IdentifierFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(identifier.FieldUpdateTime))
}

// WhereCalibreID applies the entql int64 predicate on the calibre_id field.
func (f *IdentifierFilter) WhereCalibreID(p entql.Int64P) {
	f.Where(p.Field(identifier.FieldCalibreID))
}

// WhereType applies the entql string predicate on the type field.
func (f *IdentifierFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(identifier.FieldType))
}

// WhereValue applies the entql string predicate on the value field.
func (f *IdentifierFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(identifier.FieldValue))
}

// WhereHasBook applies a predicate to check if query has an edge book.
func (f *IdentifierFilter) WhereHasBook() {
	f.Where(entql.HasEdge("book"))
}

// WhereHasBookWith applies a predicate to check if query has an edge book with a given conditions (other predicates).
func (f *IdentifierFilter) WhereHasBookWith(preds ...predicate.Book) {
	f.Where(entql.HasEdgeWith("book", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (lq *LanguageQuery) addPredicate(pred func(s *sql.Selector)) {
	lq.predicates = append(lq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LanguageQuery builder.
func (lq *LanguageQuery) Filter() *LanguageFilter {
	return &LanguageFilter{config: lq.config, predicateAdder: lq}
}

// addPredicate implements the predicateAdder interface.
func (m *LanguageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LanguageMutation builder.
func (m *LanguageMutation) Filter() *LanguageFilter {
	return &LanguageFilter{config: m.config, predicateAdder: m}
}

// LanguageFilter provides a generic filtering capability at runtime for LanguageQuery.
type LanguageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LanguageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *LanguageFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(language.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *LanguageFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(language.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *LanguageFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(language.FieldUpdateTime))
}

// WhereCalibreID applies the entql int64 predicate on the calibre_id field.
func (f *LanguageFilter) WhereCalibreID(p entql.Int64P) {
	f.Where(p.Field(language.FieldCalibreID))
}

// WhereCode applies the entql string predicate on the code field.
func (f *LanguageFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(language.FieldCode))
}

// WhereHasBooks applies a predicate to check if query has an edge books.
func (f *LanguageFilter) WhereHasBooks() {
	f.Where(entql.HasEdge("books"))
}

// WhereHasBooksWith applies a predicate to check if query has an edge books with a given conditions (other predicates).
func (f *LanguageFilter) WhereHasBooksWith(preds ...predicate.Book) {
	f.Where(entql.HasEdgeWith("books", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PublisherQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PublisherQuery builder.
func (pq *PublisherQuery) Filter() *PublisherFilter {
	return &PublisherFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PublisherMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PublisherMutation builder.
func (m *PublisherMutation) Filter() *PublisherFilter {
	return &PublisherFilter{config: m.config, predicateAdder: m}
}

// PublisherFilter provides a generic filtering capability at runtime for PublisherQuery.
type PublisherFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PublisherFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PublisherFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(publisher.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *PublisherFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(publisher.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *PublisherFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(publisher.FieldUpdateTime))
}

// WhereCalibreID applies the entql int64 predicate on the calibre_id field.
func (f *PublisherFilter) WhereCalibreID(p entql.Int64P) {
	f.Where(p.Field(publisher.FieldCalibreID))
}

// WhereName applies the entql string predicate on the name field.
func (f *PublisherFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(publisher.FieldName))
}

// WhereHasBooks applies a predicate to check if query has an edge books.
func (f *PublisherFilter) WhereHasBooks() {
	f.Where(entql.HasEdge("books"))
}

// WhereHasBooksWith applies a predicate to check if query has an edge books with a given conditions (other predicates).
func (f *PublisherFilter) WhereHasBooksWith(preds ...predicate.Book) {
	f.Where(entql.HasEdgeWith("books", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SeriesQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SeriesQuery builder.
func (sq *SeriesQuery) Filter() *SeriesFilter {
	return &SeriesFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SeriesMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SeriesMutation builder.
func (m *SeriesMutation) Filter() *SeriesFilter {
	return &SeriesFilter{config: m.config, predicateAdder: m}
}

// SeriesFilter provides a generic filtering capability at runtime for SeriesQuery.
type SeriesFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SeriesFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SeriesFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(series.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *SeriesFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(series.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *SeriesFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(series.FieldUpdateTime))
}

// WhereCalibreID applies the entql int64 predicate on the calibre_id field.
func (f *SeriesFilter) WhereCalibreID(p entql.Int64P) {
	f.Where(p.Field(series.FieldCalibreID))
}

// WhereName applies the entql string predicate on the name field.
func (f *SeriesFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(series.FieldName))
}

// WhereSort applies the entql string predicate on the sort field.
func (f *SeriesFilter) WhereSort(p entql.StringP) {
	f.Where(p.Field(series.FieldSort))
}

// WhereHasBooks applies a predicate to check if query has an edge books.
func (f *SeriesFilter) WhereHasBooks() {
	f.Where(entql.HasEdge("books"))
}

// WhereHasBooksWith applies a predicate to check if query has an edge books with a given conditions (other predicates).
func (f *SeriesFilter) WhereHasBooksWith(preds ...predicate.Book) {
	f.Where(entql.HasEdgeWith("books", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *ShelfQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShelfQuery builder.
func (sq *ShelfQuery) Filter() *ShelfFilter {
	return &ShelfFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShelfMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShelfMutation builder.
func (m *ShelfMutation) Filter() *ShelfFilter {
	return &ShelfFilter{config: m.config, predicateAdder: m}
}

// ShelfFilter provides a generic filtering capability at runtime for ShelfQuery.
type ShelfFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShelfFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ShelfFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(shelf.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *ShelfFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(shelf.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *ShelfFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(shelf.FieldUpdateTime))
}

// WherePublic applies the entql bool predicate on the public field.
func (f *ShelfFilter) WherePublic(p entql.BoolP) {
	f.Where(p.Field(shelf.FieldPublic))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *ShelfFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(shelf.FieldUserID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ShelfFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(shelf.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ShelfFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(shelf.FieldDescription))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *ShelfFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *ShelfFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBooks applies a predicate to check if query has an edge books.
func (f *ShelfFilter) WhereHasBooks() {
	f.Where(entql.HasEdge("books"))
}

// WhereHasBooksWith applies a predicate to check if query has an edge books with a given conditions (other predicates).
func (f *ShelfFilter) WhereHasBooksWith(preds ...predicate.Book) {
	f.Where(entql.HasEdgeWith("books", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TagQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TagQuery builder.
func (tq *TagQuery) Filter() *TagFilter {
	return &TagFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TagMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TagMutation builder.
func (m *TagMutation) Filter() *TagFilter {
	return &TagFilter{config: m.config, predicateAdder: m}
}

// TagFilter provides a generic filtering capability at runtime for TagQuery.
type TagFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TagFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TagFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(tag.FieldID))
}

// WhereCalibreID applies the entql int64 predicate on the calibre_id field.
func (f *TagFilter) WhereCalibreID(p entql.Int64P) {
	f.Where(p.Field(tag.FieldCalibreID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TagFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(tag.FieldName))
}

// WhereHasBooks applies a predicate to check if query has an edge books.
func (f *TagFilter) WhereHasBooks() {
	f.Where(entql.HasEdge("books"))
}

// WhereHasBooksWith applies a predicate to check if query has an edge books with a given conditions (other predicates).
func (f *TagFilter) WhereHasBooksWith(preds ...predicate.Book) {
	f.Where(entql.HasEdgeWith("books", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TaskQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TaskQuery builder.
func (tq *TaskQuery) Filter() *TaskFilter {
	return &TaskFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TaskMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TaskMutation builder.
func (m *TaskMutation) Filter() *TaskFilter {
	return &TaskFilter{config: m.config, predicateAdder: m}
}

// TaskFilter provides a generic filtering capability at runtime for TaskQuery.
type TaskFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TaskFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TaskFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(task.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *TaskFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(task.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *TaskFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(task.FieldUpdateTime))
}

// WhereType applies the entql string predicate on the type field.
func (f *TaskFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(task.FieldType))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *TaskFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(task.FieldStatus))
}

// WhereProgress applies the entql float64 predicate on the progress field.
func (f *TaskFilter) WhereProgress(p entql.Float64P) {
	f.Where(p.Field(task.FieldProgress))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *TaskFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(task.FieldMessage))
}

// WhereError applies the entql string predicate on the error field.
func (f *TaskFilter) WhereError(p entql.StringP) {
	f.Where(p.Field(task.FieldError))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *TaskFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(task.FieldUserID))
}

// WhereIsSystemTask applies the entql bool predicate on the is_system_task field.
func (f *TaskFilter) WhereIsSystemTask(p entql.BoolP) {
	f.Where(p.Field(task.FieldIsSystemTask))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *TaskFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *TaskFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UserFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UserFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdateTime))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WherePasswordHash applies the entql string predicate on the password_hash field.
func (f *UserFilter) WherePasswordHash(p entql.StringP) {
	f.Where(p.Field(user.FieldPasswordHash))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereHasShelves applies a predicate to check if query has an edge shelves.
func (f *UserFilter) WhereHasShelves() {
	f.Where(entql.HasEdge("shelves"))
}

// WhereHasShelvesWith applies a predicate to check if query has an edge shelves with a given conditions (other predicates).
func (f *UserFilter) WhereHasShelvesWith(preds ...predicate.Shelf) {
	f.Where(entql.HasEdgeWith("shelves", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserPermissions applies a predicate to check if query has an edge user_permissions.
func (f *UserFilter) WhereHasUserPermissions() {
	f.Where(entql.HasEdge("user_permissions"))
}

// WhereHasUserPermissionsWith applies a predicate to check if query has an edge user_permissions with a given conditions (other predicates).
func (f *UserFilter) WhereHasUserPermissionsWith(preds ...predicate.UserPermissions) {
	f.Where(entql.HasEdgeWith("user_permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (upq *UserPermissionsQuery) addPredicate(pred func(s *sql.Selector)) {
	upq.predicates = append(upq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserPermissionsQuery builder.
func (upq *UserPermissionsQuery) Filter() *UserPermissionsFilter {
	return &UserPermissionsFilter{config: upq.config, predicateAdder: upq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserPermissionsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserPermissionsMutation builder.
func (m *UserPermissionsMutation) Filter() *UserPermissionsFilter {
	return &UserPermissionsFilter{config: m.config, predicateAdder: m}
}

// UserPermissionsFilter provides a generic filtering capability at runtime for UserPermissionsQuery.
type UserPermissionsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserPermissionsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserPermissionsFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(userpermissions.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UserPermissionsFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(userpermissions.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UserPermissionsFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(userpermissions.FieldUpdateTime))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *UserPermissionsFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(userpermissions.FieldUserID))
}

// WhereCanEdit applies the entql bool predicate on the CanEdit field.
func (f *UserPermissionsFilter) WhereCanEdit(p entql.BoolP) {
	f.Where(p.Field(userpermissions.FieldCanEdit))
}

// WhereAdmin applies the entql bool predicate on the Admin field.
func (f *UserPermissionsFilter) WhereAdmin(p entql.BoolP) {
	f.Where(p.Field(userpermissions.FieldAdmin))
}

// WhereCanCreatePublic applies the entql bool predicate on the CanCreatePublic field.
func (f *UserPermissionsFilter) WhereCanCreatePublic(p entql.BoolP) {
	f.Where(p.Field(userpermissions.FieldCanCreatePublic))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserPermissionsFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserPermissionsFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
