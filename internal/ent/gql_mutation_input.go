// Code generated by ent, DO NOT EDIT.

package ent

import (
	"lybbrio/internal/ent/schema/ksuid"
	"time"
)

// CreateAuthorInput represents a mutation input for creating authors.
type CreateAuthorInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	CalibreID  *int64
	Name       string
	Sort       string
	Link       *string
	BookIDs    []ksuid.ID
}

// Mutate applies the CreateAuthorInput on the AuthorMutation builder.
func (i *CreateAuthorInput) Mutate(m *AuthorMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	m.SetName(i.Name)
	m.SetSort(i.Sort)
	if v := i.Link; v != nil {
		m.SetLink(*v)
	}
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
}

// SetInput applies the change-set in the CreateAuthorInput on the AuthorCreate builder.
func (c *AuthorCreate) SetInput(i CreateAuthorInput) *AuthorCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAuthorInput represents a mutation input for updating authors.
type UpdateAuthorInput struct {
	UpdateTime     *time.Time
	ClearCalibreID bool
	CalibreID      *int64
	Name           *string
	Sort           *string
	ClearLink      bool
	Link           *string
	ClearBooks     bool
	AddBookIDs     []ksuid.ID
	RemoveBookIDs  []ksuid.ID
}

// Mutate applies the UpdateAuthorInput on the AuthorMutation builder.
func (i *UpdateAuthorInput) Mutate(m *AuthorMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearCalibreID {
		m.ClearCalibreID()
	}
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearLink {
		m.ClearLink()
	}
	if v := i.Link; v != nil {
		m.SetLink(*v)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateAuthorInput on the AuthorUpdate builder.
func (c *AuthorUpdate) SetInput(i UpdateAuthorInput) *AuthorUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAuthorInput on the AuthorUpdateOne builder.
func (c *AuthorUpdateOne) SetInput(i UpdateAuthorInput) *AuthorUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateBookInput represents a mutation input for creating books.
type CreateBookInput struct {
	CreateTime    *time.Time
	UpdateTime    *time.Time
	CalibreID     *int64
	Title         string
	Sort          string
	PublishedDate *time.Time
	Path          string
	Isbn          *string
	Description   *string
	SeriesIndex   *float64
	AuthorIDs     []ksuid.ID
	PublisherIDs  []ksuid.ID
	SeriesIDs     []ksuid.ID
	IdentifierIDs []ksuid.ID
	TagIDs        []ksuid.ID
	LanguageIDs   []ksuid.ID
	ShelfIDs      []ksuid.ID
	FileIDs       []ksuid.ID
	CoverIDs      []ksuid.ID
}

// Mutate applies the CreateBookInput on the BookMutation builder.
func (i *CreateBookInput) Mutate(m *BookMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	m.SetTitle(i.Title)
	m.SetSort(i.Sort)
	if v := i.PublishedDate; v != nil {
		m.SetPublishedDate(*v)
	}
	m.SetPath(i.Path)
	if v := i.Isbn; v != nil {
		m.SetIsbn(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.SeriesIndex; v != nil {
		m.SetSeriesIndex(*v)
	}
	if v := i.AuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.PublisherIDs; len(v) > 0 {
		m.AddPublisherIDs(v...)
	}
	if v := i.SeriesIDs; len(v) > 0 {
		m.AddSeriesIDs(v...)
	}
	if v := i.IdentifierIDs; len(v) > 0 {
		m.AddIdentifierIDs(v...)
	}
	if v := i.TagIDs; len(v) > 0 {
		m.AddTagIDs(v...)
	}
	if v := i.LanguageIDs; len(v) > 0 {
		m.AddLanguageIDs(v...)
	}
	if v := i.ShelfIDs; len(v) > 0 {
		m.AddShelfIDs(v...)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.CoverIDs; len(v) > 0 {
		m.AddCoverIDs(v...)
	}
}

// SetInput applies the change-set in the CreateBookInput on the BookCreate builder.
func (c *BookCreate) SetInput(i CreateBookInput) *BookCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateBookInput represents a mutation input for updating books.
type UpdateBookInput struct {
	UpdateTime          *time.Time
	ClearCalibreID      bool
	CalibreID           *int64
	Title               *string
	Sort                *string
	ClearPublishedDate  bool
	PublishedDate       *time.Time
	Path                *string
	ClearIsbn           bool
	Isbn                *string
	ClearDescription    bool
	Description         *string
	ClearSeriesIndex    bool
	SeriesIndex         *float64
	ClearAuthors        bool
	AddAuthorIDs        []ksuid.ID
	RemoveAuthorIDs     []ksuid.ID
	ClearPublisher      bool
	AddPublisherIDs     []ksuid.ID
	RemovePublisherIDs  []ksuid.ID
	ClearSeries         bool
	AddSeriesIDs        []ksuid.ID
	RemoveSeriesIDs     []ksuid.ID
	ClearIdentifiers    bool
	AddIdentifierIDs    []ksuid.ID
	RemoveIdentifierIDs []ksuid.ID
	ClearTags           bool
	AddTagIDs           []ksuid.ID
	RemoveTagIDs        []ksuid.ID
	ClearLanguage       bool
	AddLanguageIDs      []ksuid.ID
	RemoveLanguageIDs   []ksuid.ID
	ClearShelf          bool
	AddShelfIDs         []ksuid.ID
	RemoveShelfIDs      []ksuid.ID
	ClearFiles          bool
	AddFileIDs          []ksuid.ID
	RemoveFileIDs       []ksuid.ID
	ClearCovers         bool
	AddCoverIDs         []ksuid.ID
	RemoveCoverIDs      []ksuid.ID
}

// Mutate applies the UpdateBookInput on the BookMutation builder.
func (i *UpdateBookInput) Mutate(m *BookMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearCalibreID {
		m.ClearCalibreID()
	}
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearPublishedDate {
		m.ClearPublishedDate()
	}
	if v := i.PublishedDate; v != nil {
		m.SetPublishedDate(*v)
	}
	if v := i.Path; v != nil {
		m.SetPath(*v)
	}
	if i.ClearIsbn {
		m.ClearIsbn()
	}
	if v := i.Isbn; v != nil {
		m.SetIsbn(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearSeriesIndex {
		m.ClearSeriesIndex()
	}
	if v := i.SeriesIndex; v != nil {
		m.SetSeriesIndex(*v)
	}
	if i.ClearAuthors {
		m.ClearAuthors()
	}
	if v := i.AddAuthorIDs; len(v) > 0 {
		m.AddAuthorIDs(v...)
	}
	if v := i.RemoveAuthorIDs; len(v) > 0 {
		m.RemoveAuthorIDs(v...)
	}
	if i.ClearPublisher {
		m.ClearPublisher()
	}
	if v := i.AddPublisherIDs; len(v) > 0 {
		m.AddPublisherIDs(v...)
	}
	if v := i.RemovePublisherIDs; len(v) > 0 {
		m.RemovePublisherIDs(v...)
	}
	if i.ClearSeries {
		m.ClearSeries()
	}
	if v := i.AddSeriesIDs; len(v) > 0 {
		m.AddSeriesIDs(v...)
	}
	if v := i.RemoveSeriesIDs; len(v) > 0 {
		m.RemoveSeriesIDs(v...)
	}
	if i.ClearIdentifiers {
		m.ClearIdentifiers()
	}
	if v := i.AddIdentifierIDs; len(v) > 0 {
		m.AddIdentifierIDs(v...)
	}
	if v := i.RemoveIdentifierIDs; len(v) > 0 {
		m.RemoveIdentifierIDs(v...)
	}
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.AddTagIDs; len(v) > 0 {
		m.AddTagIDs(v...)
	}
	if v := i.RemoveTagIDs; len(v) > 0 {
		m.RemoveTagIDs(v...)
	}
	if i.ClearLanguage {
		m.ClearLanguage()
	}
	if v := i.AddLanguageIDs; len(v) > 0 {
		m.AddLanguageIDs(v...)
	}
	if v := i.RemoveLanguageIDs; len(v) > 0 {
		m.RemoveLanguageIDs(v...)
	}
	if i.ClearShelf {
		m.ClearShelf()
	}
	if v := i.AddShelfIDs; len(v) > 0 {
		m.AddShelfIDs(v...)
	}
	if v := i.RemoveShelfIDs; len(v) > 0 {
		m.RemoveShelfIDs(v...)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
	if i.ClearCovers {
		m.ClearCovers()
	}
	if v := i.AddCoverIDs; len(v) > 0 {
		m.AddCoverIDs(v...)
	}
	if v := i.RemoveCoverIDs; len(v) > 0 {
		m.RemoveCoverIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateBookInput on the BookUpdate builder.
func (c *BookUpdate) SetInput(i UpdateBookInput) *BookUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateBookInput on the BookUpdateOne builder.
func (c *BookUpdateOne) SetInput(i UpdateBookInput) *BookUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateIdentifierInput represents a mutation input for creating identifiers.
type CreateIdentifierInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	CalibreID  *int64
	Type       string
	Value      string
	BookID     ksuid.ID
}

// Mutate applies the CreateIdentifierInput on the IdentifierMutation builder.
func (i *CreateIdentifierInput) Mutate(m *IdentifierMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	m.SetType(i.Type)
	m.SetValue(i.Value)
	m.SetBookID(i.BookID)
}

// SetInput applies the change-set in the CreateIdentifierInput on the IdentifierCreate builder.
func (c *IdentifierCreate) SetInput(i CreateIdentifierInput) *IdentifierCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateIdentifierInput represents a mutation input for updating identifiers.
type UpdateIdentifierInput struct {
	UpdateTime     *time.Time
	ClearCalibreID bool
	CalibreID      *int64
	Type           *string
	Value          *string
	BookID         *ksuid.ID
}

// Mutate applies the UpdateIdentifierInput on the IdentifierMutation builder.
func (i *UpdateIdentifierInput) Mutate(m *IdentifierMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearCalibreID {
		m.ClearCalibreID()
	}
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.Value; v != nil {
		m.SetValue(*v)
	}
	if v := i.BookID; v != nil {
		m.SetBookID(*v)
	}
}

// SetInput applies the change-set in the UpdateIdentifierInput on the IdentifierUpdate builder.
func (c *IdentifierUpdate) SetInput(i UpdateIdentifierInput) *IdentifierUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateIdentifierInput on the IdentifierUpdateOne builder.
func (c *IdentifierUpdateOne) SetInput(i UpdateIdentifierInput) *IdentifierUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLanguageInput represents a mutation input for creating languages.
type CreateLanguageInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	CalibreID  *int64
	Code       string
	BookIDs    []ksuid.ID
}

// Mutate applies the CreateLanguageInput on the LanguageMutation builder.
func (i *CreateLanguageInput) Mutate(m *LanguageMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	m.SetCode(i.Code)
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
}

// SetInput applies the change-set in the CreateLanguageInput on the LanguageCreate builder.
func (c *LanguageCreate) SetInput(i CreateLanguageInput) *LanguageCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLanguageInput represents a mutation input for updating languages.
type UpdateLanguageInput struct {
	UpdateTime     *time.Time
	ClearCalibreID bool
	CalibreID      *int64
	Code           *string
	ClearBooks     bool
	AddBookIDs     []ksuid.ID
	RemoveBookIDs  []ksuid.ID
}

// Mutate applies the UpdateLanguageInput on the LanguageMutation builder.
func (i *UpdateLanguageInput) Mutate(m *LanguageMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearCalibreID {
		m.ClearCalibreID()
	}
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateLanguageInput on the LanguageUpdate builder.
func (c *LanguageUpdate) SetInput(i UpdateLanguageInput) *LanguageUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLanguageInput on the LanguageUpdateOne builder.
func (c *LanguageUpdateOne) SetInput(i UpdateLanguageInput) *LanguageUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePublisherInput represents a mutation input for creating publishers.
type CreatePublisherInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	CalibreID  *int64
	Name       string
	BookIDs    []ksuid.ID
}

// Mutate applies the CreatePublisherInput on the PublisherMutation builder.
func (i *CreatePublisherInput) Mutate(m *PublisherMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	m.SetName(i.Name)
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePublisherInput on the PublisherCreate builder.
func (c *PublisherCreate) SetInput(i CreatePublisherInput) *PublisherCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePublisherInput represents a mutation input for updating publishers.
type UpdatePublisherInput struct {
	UpdateTime     *time.Time
	ClearCalibreID bool
	CalibreID      *int64
	Name           *string
	ClearBooks     bool
	AddBookIDs     []ksuid.ID
	RemoveBookIDs  []ksuid.ID
}

// Mutate applies the UpdatePublisherInput on the PublisherMutation builder.
func (i *UpdatePublisherInput) Mutate(m *PublisherMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearCalibreID {
		m.ClearCalibreID()
	}
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePublisherInput on the PublisherUpdate builder.
func (c *PublisherUpdate) SetInput(i UpdatePublisherInput) *PublisherUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePublisherInput on the PublisherUpdateOne builder.
func (c *PublisherUpdateOne) SetInput(i UpdatePublisherInput) *PublisherUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSeriesInput represents a mutation input for creating seriesslice.
type CreateSeriesInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	CalibreID  *int64
	Name       string
	Sort       string
	BookIDs    []ksuid.ID
}

// Mutate applies the CreateSeriesInput on the SeriesMutation builder.
func (i *CreateSeriesInput) Mutate(m *SeriesMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	m.SetName(i.Name)
	m.SetSort(i.Sort)
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
}

// SetInput applies the change-set in the CreateSeriesInput on the SeriesCreate builder.
func (c *SeriesCreate) SetInput(i CreateSeriesInput) *SeriesCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSeriesInput represents a mutation input for updating seriesslice.
type UpdateSeriesInput struct {
	UpdateTime     *time.Time
	ClearCalibreID bool
	CalibreID      *int64
	Name           *string
	Sort           *string
	ClearBooks     bool
	AddBookIDs     []ksuid.ID
	RemoveBookIDs  []ksuid.ID
}

// Mutate applies the UpdateSeriesInput on the SeriesMutation builder.
func (i *UpdateSeriesInput) Mutate(m *SeriesMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearCalibreID {
		m.ClearCalibreID()
	}
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateSeriesInput on the SeriesUpdate builder.
func (c *SeriesUpdate) SetInput(i UpdateSeriesInput) *SeriesUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSeriesInput on the SeriesUpdateOne builder.
func (c *SeriesUpdateOne) SetInput(i UpdateSeriesInput) *SeriesUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// UpdateShelfInput represents a mutation input for updating shelves.
type UpdateShelfInput struct {
	UpdateTime       *time.Time
	Public           *bool
	Name             *string
	ClearDescription bool
	Description      *string
	ClearBooks       bool
	AddBookIDs       []ksuid.ID
	RemoveBookIDs    []ksuid.ID
}

// Mutate applies the UpdateShelfInput on the ShelfMutation builder.
func (i *UpdateShelfInput) Mutate(m *ShelfMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Public; v != nil {
		m.SetPublic(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateShelfInput on the ShelfUpdate builder.
func (c *ShelfUpdate) SetInput(i UpdateShelfInput) *ShelfUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateShelfInput on the ShelfUpdateOne builder.
func (c *ShelfUpdateOne) SetInput(i UpdateShelfInput) *ShelfUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTagInput represents a mutation input for creating tags.
type CreateTagInput struct {
	CalibreID *int64
	Name      string
	BookIDs   []ksuid.ID
}

// Mutate applies the CreateTagInput on the TagMutation builder.
func (i *CreateTagInput) Mutate(m *TagMutation) {
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	m.SetName(i.Name)
	if v := i.BookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTagInput on the TagCreate builder.
func (c *TagCreate) SetInput(i CreateTagInput) *TagCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTagInput represents a mutation input for updating tags.
type UpdateTagInput struct {
	ClearCalibreID bool
	CalibreID      *int64
	Name           *string
	ClearBooks     bool
	AddBookIDs     []ksuid.ID
	RemoveBookIDs  []ksuid.ID
}

// Mutate applies the UpdateTagInput on the TagMutation builder.
func (i *UpdateTagInput) Mutate(m *TagMutation) {
	if i.ClearCalibreID {
		m.ClearCalibreID()
	}
	if v := i.CalibreID; v != nil {
		m.SetCalibreID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearBooks {
		m.ClearBooks()
	}
	if v := i.AddBookIDs; len(v) > 0 {
		m.AddBookIDs(v...)
	}
	if v := i.RemoveBookIDs; len(v) > 0 {
		m.RemoveBookIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTagInput on the TagUpdate builder.
func (c *TagUpdate) SetInput(i UpdateTagInput) *TagUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTagInput on the TagUpdateOne builder.
func (c *TagUpdateOne) SetInput(i UpdateTagInput) *TagUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserPermissionsInput represents a mutation input for creating userpermissionsslice.
type CreateUserPermissionsInput struct {
	CreateTime      *time.Time
	UpdateTime      *time.Time
	Admin           *bool
	CanCreatePublic *bool
	CanEdit         *bool
	UserID          *ksuid.ID
}

// Mutate applies the CreateUserPermissionsInput on the UserPermissionsMutation builder.
func (i *CreateUserPermissionsInput) Mutate(m *UserPermissionsMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Admin; v != nil {
		m.SetAdmin(*v)
	}
	if v := i.CanCreatePublic; v != nil {
		m.SetCanCreatePublic(*v)
	}
	if v := i.CanEdit; v != nil {
		m.SetCanEdit(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the CreateUserPermissionsInput on the UserPermissionsCreate builder.
func (c *UserPermissionsCreate) SetInput(i CreateUserPermissionsInput) *UserPermissionsCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserPermissionsInput represents a mutation input for updating userpermissionsslice.
type UpdateUserPermissionsInput struct {
	UpdateTime      *time.Time
	Admin           *bool
	CanCreatePublic *bool
	CanEdit         *bool
	ClearUser       bool
	UserID          *ksuid.ID
}

// Mutate applies the UpdateUserPermissionsInput on the UserPermissionsMutation builder.
func (i *UpdateUserPermissionsInput) Mutate(m *UserPermissionsMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Admin; v != nil {
		m.SetAdmin(*v)
	}
	if v := i.CanCreatePublic; v != nil {
		m.SetCanCreatePublic(*v)
	}
	if v := i.CanEdit; v != nil {
		m.SetCanEdit(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateUserPermissionsInput on the UserPermissionsUpdate builder.
func (c *UserPermissionsUpdate) SetInput(i UpdateUserPermissionsInput) *UserPermissionsUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserPermissionsInput on the UserPermissionsUpdateOne builder.
func (c *UserPermissionsUpdateOne) SetInput(i UpdateUserPermissionsInput) *UserPermissionsUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
