// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/schema/ksuid"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Book is the model entity for the Book schema.
type Book struct {
	config `json:"-"`
	// ID of the ent.
	ID ksuid.ID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// CalibreID holds the value of the "calibre_id" field.
	CalibreID int64 `json:"calibre_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Sort holds the value of the "sort" field.
	Sort string `json:"sort,omitempty"`
	// PublishedDate holds the value of the "published_date" field.
	PublishedDate time.Time `json:"published_date,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Isbn holds the value of the "isbn" field.
	Isbn string `json:"isbn,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// SeriesIndex holds the value of the "series_index" field.
	SeriesIndex float64 `json:"series_index,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookQuery when eager-loading is set.
	Edges        BookEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BookEdges holds the relations/edges for other nodes in the graph.
type BookEdges struct {
	// Authors holds the value of the authors edge.
	Authors []*Author `json:"authors,omitempty"`
	// Publisher holds the value of the publisher edge.
	Publisher []*Publisher `json:"publisher,omitempty"`
	// Series holds the value of the series edge.
	Series []*Series `json:"series,omitempty"`
	// Identifiers holds the value of the identifiers edge.
	Identifiers []*Identifier `json:"identifiers,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Language holds the value of the language edge.
	Language []*Language `json:"language,omitempty"`
	// Shelf holds the value of the shelf edge.
	Shelf []*Shelf `json:"shelf,omitempty"`
	// Files holds the value of the files edge.
	Files []*BookFile `json:"files,omitempty"`
	// Covers holds the value of the covers edge.
	Covers []*BookCover `json:"covers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
	// totalCount holds the count of the edges above.
	totalCount [9]map[string]int

	namedAuthors     map[string][]*Author
	namedPublisher   map[string][]*Publisher
	namedSeries      map[string][]*Series
	namedIdentifiers map[string][]*Identifier
	namedTags        map[string][]*Tag
	namedLanguage    map[string][]*Language
	namedShelf       map[string][]*Shelf
	namedFiles       map[string][]*BookFile
	namedCovers      map[string][]*BookCover
}

// AuthorsOrErr returns the Authors value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) AuthorsOrErr() ([]*Author, error) {
	if e.loadedTypes[0] {
		return e.Authors, nil
	}
	return nil, &NotLoadedError{edge: "authors"}
}

// PublisherOrErr returns the Publisher value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) PublisherOrErr() ([]*Publisher, error) {
	if e.loadedTypes[1] {
		return e.Publisher, nil
	}
	return nil, &NotLoadedError{edge: "publisher"}
}

// SeriesOrErr returns the Series value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) SeriesOrErr() ([]*Series, error) {
	if e.loadedTypes[2] {
		return e.Series, nil
	}
	return nil, &NotLoadedError{edge: "series"}
}

// IdentifiersOrErr returns the Identifiers value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) IdentifiersOrErr() ([]*Identifier, error) {
	if e.loadedTypes[3] {
		return e.Identifiers, nil
	}
	return nil, &NotLoadedError{edge: "identifiers"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[4] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) LanguageOrErr() ([]*Language, error) {
	if e.loadedTypes[5] {
		return e.Language, nil
	}
	return nil, &NotLoadedError{edge: "language"}
}

// ShelfOrErr returns the Shelf value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) ShelfOrErr() ([]*Shelf, error) {
	if e.loadedTypes[6] {
		return e.Shelf, nil
	}
	return nil, &NotLoadedError{edge: "shelf"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) FilesOrErr() ([]*BookFile, error) {
	if e.loadedTypes[7] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// CoversOrErr returns the Covers value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) CoversOrErr() ([]*BookCover, error) {
	if e.loadedTypes[8] {
		return e.Covers, nil
	}
	return nil, &NotLoadedError{edge: "covers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Book) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case book.FieldSeriesIndex:
			values[i] = new(sql.NullFloat64)
		case book.FieldCalibreID:
			values[i] = new(sql.NullInt64)
		case book.FieldID, book.FieldTitle, book.FieldSort, book.FieldPath, book.FieldIsbn, book.FieldDescription:
			values[i] = new(sql.NullString)
		case book.FieldCreateTime, book.FieldUpdateTime, book.FieldPublishedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Book fields.
func (b *Book) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case book.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				b.ID = ksuid.ID(value.String)
			}
		case book.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				b.CreateTime = value.Time
			}
		case book.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				b.UpdateTime = value.Time
			}
		case book.FieldCalibreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field calibre_id", values[i])
			} else if value.Valid {
				b.CalibreID = value.Int64
			}
		case book.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				b.Title = value.String
			}
		case book.FieldSort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				b.Sort = value.String
			}
		case book.FieldPublishedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_date", values[i])
			} else if value.Valid {
				b.PublishedDate = value.Time
			}
		case book.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				b.Path = value.String
			}
		case book.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				b.Isbn = value.String
			}
		case book.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				b.Description = value.String
			}
		case book.FieldSeriesIndex:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field series_index", values[i])
			} else if value.Valid {
				b.SeriesIndex = value.Float64
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Book.
// This includes values selected through modifiers, order, etc.
func (b *Book) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryAuthors queries the "authors" edge of the Book entity.
func (b *Book) QueryAuthors() *AuthorQuery {
	return NewBookClient(b.config).QueryAuthors(b)
}

// QueryPublisher queries the "publisher" edge of the Book entity.
func (b *Book) QueryPublisher() *PublisherQuery {
	return NewBookClient(b.config).QueryPublisher(b)
}

// QuerySeries queries the "series" edge of the Book entity.
func (b *Book) QuerySeries() *SeriesQuery {
	return NewBookClient(b.config).QuerySeries(b)
}

// QueryIdentifiers queries the "identifiers" edge of the Book entity.
func (b *Book) QueryIdentifiers() *IdentifierQuery {
	return NewBookClient(b.config).QueryIdentifiers(b)
}

// QueryTags queries the "tags" edge of the Book entity.
func (b *Book) QueryTags() *TagQuery {
	return NewBookClient(b.config).QueryTags(b)
}

// QueryLanguage queries the "language" edge of the Book entity.
func (b *Book) QueryLanguage() *LanguageQuery {
	return NewBookClient(b.config).QueryLanguage(b)
}

// QueryShelf queries the "shelf" edge of the Book entity.
func (b *Book) QueryShelf() *ShelfQuery {
	return NewBookClient(b.config).QueryShelf(b)
}

// QueryFiles queries the "files" edge of the Book entity.
func (b *Book) QueryFiles() *BookFileQuery {
	return NewBookClient(b.config).QueryFiles(b)
}

// QueryCovers queries the "covers" edge of the Book entity.
func (b *Book) QueryCovers() *BookCoverQuery {
	return NewBookClient(b.config).QueryCovers(b)
}

// Update returns a builder for updating this Book.
// Note that you need to call Book.Unwrap() before calling this method if this Book
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Book) Update() *BookUpdateOne {
	return NewBookClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Book entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Book) Unwrap() *Book {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Book is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Book) String() string {
	var builder strings.Builder
	builder.WriteString("Book(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("create_time=")
	builder.WriteString(b.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(b.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("calibre_id=")
	builder.WriteString(fmt.Sprintf("%v", b.CalibreID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(b.Title)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(b.Sort)
	builder.WriteString(", ")
	builder.WriteString("published_date=")
	builder.WriteString(b.PublishedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(b.Path)
	builder.WriteString(", ")
	builder.WriteString("isbn=")
	builder.WriteString(b.Isbn)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(b.Description)
	builder.WriteString(", ")
	builder.WriteString("series_index=")
	builder.WriteString(fmt.Sprintf("%v", b.SeriesIndex))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAuthors returns the Authors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Book) NamedAuthors(name string) ([]*Author, error) {
	if b.Edges.namedAuthors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedAuthors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Book) appendNamedAuthors(name string, edges ...*Author) {
	if b.Edges.namedAuthors == nil {
		b.Edges.namedAuthors = make(map[string][]*Author)
	}
	if len(edges) == 0 {
		b.Edges.namedAuthors[name] = []*Author{}
	} else {
		b.Edges.namedAuthors[name] = append(b.Edges.namedAuthors[name], edges...)
	}
}

// NamedPublisher returns the Publisher named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Book) NamedPublisher(name string) ([]*Publisher, error) {
	if b.Edges.namedPublisher == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedPublisher[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Book) appendNamedPublisher(name string, edges ...*Publisher) {
	if b.Edges.namedPublisher == nil {
		b.Edges.namedPublisher = make(map[string][]*Publisher)
	}
	if len(edges) == 0 {
		b.Edges.namedPublisher[name] = []*Publisher{}
	} else {
		b.Edges.namedPublisher[name] = append(b.Edges.namedPublisher[name], edges...)
	}
}

// NamedSeries returns the Series named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Book) NamedSeries(name string) ([]*Series, error) {
	if b.Edges.namedSeries == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedSeries[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Book) appendNamedSeries(name string, edges ...*Series) {
	if b.Edges.namedSeries == nil {
		b.Edges.namedSeries = make(map[string][]*Series)
	}
	if len(edges) == 0 {
		b.Edges.namedSeries[name] = []*Series{}
	} else {
		b.Edges.namedSeries[name] = append(b.Edges.namedSeries[name], edges...)
	}
}

// NamedIdentifiers returns the Identifiers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Book) NamedIdentifiers(name string) ([]*Identifier, error) {
	if b.Edges.namedIdentifiers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedIdentifiers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Book) appendNamedIdentifiers(name string, edges ...*Identifier) {
	if b.Edges.namedIdentifiers == nil {
		b.Edges.namedIdentifiers = make(map[string][]*Identifier)
	}
	if len(edges) == 0 {
		b.Edges.namedIdentifiers[name] = []*Identifier{}
	} else {
		b.Edges.namedIdentifiers[name] = append(b.Edges.namedIdentifiers[name], edges...)
	}
}

// NamedTags returns the Tags named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Book) NamedTags(name string) ([]*Tag, error) {
	if b.Edges.namedTags == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedTags[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Book) appendNamedTags(name string, edges ...*Tag) {
	if b.Edges.namedTags == nil {
		b.Edges.namedTags = make(map[string][]*Tag)
	}
	if len(edges) == 0 {
		b.Edges.namedTags[name] = []*Tag{}
	} else {
		b.Edges.namedTags[name] = append(b.Edges.namedTags[name], edges...)
	}
}

// NamedLanguage returns the Language named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Book) NamedLanguage(name string) ([]*Language, error) {
	if b.Edges.namedLanguage == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedLanguage[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Book) appendNamedLanguage(name string, edges ...*Language) {
	if b.Edges.namedLanguage == nil {
		b.Edges.namedLanguage = make(map[string][]*Language)
	}
	if len(edges) == 0 {
		b.Edges.namedLanguage[name] = []*Language{}
	} else {
		b.Edges.namedLanguage[name] = append(b.Edges.namedLanguage[name], edges...)
	}
}

// NamedShelf returns the Shelf named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Book) NamedShelf(name string) ([]*Shelf, error) {
	if b.Edges.namedShelf == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedShelf[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Book) appendNamedShelf(name string, edges ...*Shelf) {
	if b.Edges.namedShelf == nil {
		b.Edges.namedShelf = make(map[string][]*Shelf)
	}
	if len(edges) == 0 {
		b.Edges.namedShelf[name] = []*Shelf{}
	} else {
		b.Edges.namedShelf[name] = append(b.Edges.namedShelf[name], edges...)
	}
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Book) NamedFiles(name string) ([]*BookFile, error) {
	if b.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Book) appendNamedFiles(name string, edges ...*BookFile) {
	if b.Edges.namedFiles == nil {
		b.Edges.namedFiles = make(map[string][]*BookFile)
	}
	if len(edges) == 0 {
		b.Edges.namedFiles[name] = []*BookFile{}
	} else {
		b.Edges.namedFiles[name] = append(b.Edges.namedFiles[name], edges...)
	}
}

// NamedCovers returns the Covers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Book) NamedCovers(name string) ([]*BookCover, error) {
	if b.Edges.namedCovers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedCovers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Book) appendNamedCovers(name string, edges ...*BookCover) {
	if b.Edges.namedCovers == nil {
		b.Edges.namedCovers = make(map[string][]*BookCover)
	}
	if len(edges) == 0 {
		b.Edges.namedCovers[name] = []*BookCover{}
	} else {
		b.Edges.namedCovers[name] = append(b.Edges.namedCovers[name], edges...)
	}
}

// Books is a parsable slice of Book.
type Books []*Book
