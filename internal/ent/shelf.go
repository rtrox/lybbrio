// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"lybbrio/internal/ent/schema/ksuid"
	"lybbrio/internal/ent/shelf"
	"lybbrio/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Shelf is the model entity for the Shelf schema.
type Shelf struct {
	config `json:"-"`
	// ID of the ent.
	ID ksuid.ID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Public holds the value of the "public" field.
	Public bool `json:"public,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID ksuid.ID `json:"user_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShelfQuery when eager-loading is set.
	Edges        ShelfEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ShelfEdges holds the relations/edges for other nodes in the graph.
type ShelfEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Books holds the value of the books edge.
	Books []*Book `json:"books,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedBooks map[string][]*Book
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShelfEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// BooksOrErr returns the Books value or an error if the edge
// was not loaded in eager-loading.
func (e ShelfEdges) BooksOrErr() ([]*Book, error) {
	if e.loadedTypes[1] {
		return e.Books, nil
	}
	return nil, &NotLoadedError{edge: "books"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shelf) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shelf.FieldPublic:
			values[i] = new(sql.NullBool)
		case shelf.FieldID, shelf.FieldUserID, shelf.FieldName, shelf.FieldDescription:
			values[i] = new(sql.NullString)
		case shelf.FieldCreateTime, shelf.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shelf fields.
func (s *Shelf) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shelf.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = ksuid.ID(value.String)
			}
		case shelf.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case shelf.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case shelf.FieldPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public", values[i])
			} else if value.Valid {
				s.Public = value.Bool
			}
		case shelf.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				s.UserID = ksuid.ID(value.String)
			}
		case shelf.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case shelf.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Shelf.
// This includes values selected through modifiers, order, etc.
func (s *Shelf) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Shelf entity.
func (s *Shelf) QueryUser() *UserQuery {
	return NewShelfClient(s.config).QueryUser(s)
}

// QueryBooks queries the "books" edge of the Shelf entity.
func (s *Shelf) QueryBooks() *BookQuery {
	return NewShelfClient(s.config).QueryBooks(s)
}

// Update returns a builder for updating this Shelf.
// Note that you need to call Shelf.Unwrap() before calling this method if this Shelf
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shelf) Update() *ShelfUpdateOne {
	return NewShelfClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Shelf entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shelf) Unwrap() *Shelf {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shelf is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shelf) String() string {
	var builder strings.Builder
	builder.WriteString("Shelf(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("public=")
	builder.WriteString(fmt.Sprintf("%v", s.Public))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UserID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteByte(')')
	return builder.String()
}

// NamedBooks returns the Books named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Shelf) NamedBooks(name string) ([]*Book, error) {
	if s.Edges.namedBooks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedBooks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Shelf) appendNamedBooks(name string, edges ...*Book) {
	if s.Edges.namedBooks == nil {
		s.Edges.namedBooks = make(map[string][]*Book)
	}
	if len(edges) == 0 {
		s.Edges.namedBooks[name] = []*Book{}
	} else {
		s.Edges.namedBooks[name] = append(s.Edges.namedBooks[name], edges...)
	}
}

// Shelves is a parsable slice of Shelf.
type Shelves []*Shelf
