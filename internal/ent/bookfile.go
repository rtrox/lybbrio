// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/bookfile"
	"lybbrio/internal/ent/schema/ksuid"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BookFile is the model entity for the BookFile schema.
type BookFile struct {
	config `json:"-"`
	// ID of the ent.
	ID ksuid.ID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Size in bytes
	Size int64 `json:"size,omitempty"`
	// Format holds the value of the "format" field.
	Format bookfile.Format `json:"format,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookFileQuery when eager-loading is set.
	Edges          BookFileEdges `json:"edges"`
	book_file_book *ksuid.ID
	selectValues   sql.SelectValues
}

// BookFileEdges holds the relations/edges for other nodes in the graph.
type BookFileEdges struct {
	// Book holds the value of the book edge.
	Book *Book `json:"book,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// BookOrErr returns the Book value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookFileEdges) BookOrErr() (*Book, error) {
	if e.loadedTypes[0] {
		if e.Book == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: book.Label}
		}
		return e.Book, nil
	}
	return nil, &NotLoadedError{edge: "book"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BookFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bookfile.FieldSize:
			values[i] = new(sql.NullInt64)
		case bookfile.FieldID, bookfile.FieldName, bookfile.FieldPath, bookfile.FieldFormat:
			values[i] = new(sql.NullString)
		case bookfile.FieldCreateTime, bookfile.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case bookfile.ForeignKeys[0]: // book_file_book
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BookFile fields.
func (bf *BookFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bookfile.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bf.ID = ksuid.ID(value.String)
			}
		case bookfile.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				bf.CreateTime = value.Time
			}
		case bookfile.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				bf.UpdateTime = value.Time
			}
		case bookfile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bf.Name = value.String
			}
		case bookfile.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				bf.Path = value.String
			}
		case bookfile.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				bf.Size = value.Int64
			}
		case bookfile.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				bf.Format = bookfile.Format(value.String)
			}
		case bookfile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field book_file_book", values[i])
			} else if value.Valid {
				bf.book_file_book = new(ksuid.ID)
				*bf.book_file_book = ksuid.ID(value.String)
			}
		default:
			bf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BookFile.
// This includes values selected through modifiers, order, etc.
func (bf *BookFile) Value(name string) (ent.Value, error) {
	return bf.selectValues.Get(name)
}

// QueryBook queries the "book" edge of the BookFile entity.
func (bf *BookFile) QueryBook() *BookQuery {
	return NewBookFileClient(bf.config).QueryBook(bf)
}

// Update returns a builder for updating this BookFile.
// Note that you need to call BookFile.Unwrap() before calling this method if this BookFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (bf *BookFile) Update() *BookFileUpdateOne {
	return NewBookFileClient(bf.config).UpdateOne(bf)
}

// Unwrap unwraps the BookFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bf *BookFile) Unwrap() *BookFile {
	_tx, ok := bf.config.driver.(*txDriver)
	if !ok {
		panic("ent: BookFile is not a transactional entity")
	}
	bf.config.driver = _tx.drv
	return bf
}

// String implements the fmt.Stringer.
func (bf *BookFile) String() string {
	var builder strings.Builder
	builder.WriteString("BookFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bf.ID))
	builder.WriteString("create_time=")
	builder.WriteString(bf.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(bf.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(bf.Name)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(bf.Path)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", bf.Size))
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(fmt.Sprintf("%v", bf.Format))
	builder.WriteByte(')')
	return builder.String()
}

// BookFiles is a parsable slice of BookFile.
type BookFiles []*BookFile
