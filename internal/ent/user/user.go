// Code generated by ent, DO NOT EDIT.

package user

import (
	"lybbrio/internal/ent/schema/ksuid"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// EdgeShelves holds the string denoting the shelves edge name in mutations.
	EdgeShelves = "shelves"
	// EdgeUserPermissions holds the string denoting the user_permissions edge name in mutations.
	EdgeUserPermissions = "user_permissions"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ShelvesTable is the table that holds the shelves relation/edge.
	ShelvesTable = "shelves"
	// ShelvesInverseTable is the table name for the Shelf entity.
	// It exists in this package in order to avoid circular dependency with the "shelf" package.
	ShelvesInverseTable = "shelves"
	// ShelvesColumn is the table column denoting the shelves relation/edge.
	ShelvesColumn = "user_id"
	// UserPermissionsTable is the table that holds the user_permissions relation/edge.
	UserPermissionsTable = "user_permissions"
	// UserPermissionsInverseTable is the table name for the UserPermissions entity.
	// It exists in this package in order to avoid circular dependency with the "userpermissions" package.
	UserPermissionsInverseTable = "user_permissions"
	// UserPermissionsColumn is the table column denoting the user_permissions relation/edge.
	UserPermissionsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldUsername,
	FieldPasswordHash,
	FieldEmail,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "lybbrio/internal/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() ksuid.ID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByShelvesCount orders the results by shelves count.
func ByShelvesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShelvesStep(), opts...)
	}
}

// ByShelves orders the results by shelves terms.
func ByShelves(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShelvesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserPermissionsField orders the results by user_permissions field.
func ByUserPermissionsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserPermissionsStep(), sql.OrderByField(field, opts...))
	}
}
func newShelvesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShelvesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ShelvesTable, ShelvesColumn),
	)
}
func newUserPermissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserPermissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, UserPermissionsTable, UserPermissionsColumn),
	)
}
