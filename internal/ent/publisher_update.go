// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lybbrio/internal/ent/book"
	"lybbrio/internal/ent/predicate"
	"lybbrio/internal/ent/publisher"
	"lybbrio/internal/ent/schema/ksuid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PublisherUpdate is the builder for updating Publisher entities.
type PublisherUpdate struct {
	config
	hooks    []Hook
	mutation *PublisherMutation
}

// Where appends a list predicates to the PublisherUpdate builder.
func (pu *PublisherUpdate) Where(ps ...predicate.Publisher) *PublisherUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *PublisherUpdate) SetUpdateTime(t time.Time) *PublisherUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetCalibreID sets the "calibre_id" field.
func (pu *PublisherUpdate) SetCalibreID(i int64) *PublisherUpdate {
	pu.mutation.ResetCalibreID()
	pu.mutation.SetCalibreID(i)
	return pu
}

// SetNillableCalibreID sets the "calibre_id" field if the given value is not nil.
func (pu *PublisherUpdate) SetNillableCalibreID(i *int64) *PublisherUpdate {
	if i != nil {
		pu.SetCalibreID(*i)
	}
	return pu
}

// AddCalibreID adds i to the "calibre_id" field.
func (pu *PublisherUpdate) AddCalibreID(i int64) *PublisherUpdate {
	pu.mutation.AddCalibreID(i)
	return pu
}

// ClearCalibreID clears the value of the "calibre_id" field.
func (pu *PublisherUpdate) ClearCalibreID() *PublisherUpdate {
	pu.mutation.ClearCalibreID()
	return pu
}

// SetName sets the "name" field.
func (pu *PublisherUpdate) SetName(s string) *PublisherUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PublisherUpdate) SetNillableName(s *string) *PublisherUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (pu *PublisherUpdate) AddBookIDs(ids ...ksuid.ID) *PublisherUpdate {
	pu.mutation.AddBookIDs(ids...)
	return pu
}

// AddBooks adds the "books" edges to the Book entity.
func (pu *PublisherUpdate) AddBooks(b ...*Book) *PublisherUpdate {
	ids := make([]ksuid.ID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddBookIDs(ids...)
}

// Mutation returns the PublisherMutation object of the builder.
func (pu *PublisherUpdate) Mutation() *PublisherMutation {
	return pu.mutation
}

// ClearBooks clears all "books" edges to the Book entity.
func (pu *PublisherUpdate) ClearBooks() *PublisherUpdate {
	pu.mutation.ClearBooks()
	return pu
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (pu *PublisherUpdate) RemoveBookIDs(ids ...ksuid.ID) *PublisherUpdate {
	pu.mutation.RemoveBookIDs(ids...)
	return pu
}

// RemoveBooks removes "books" edges to Book entities.
func (pu *PublisherUpdate) RemoveBooks(b ...*Book) *PublisherUpdate {
	ids := make([]ksuid.ID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveBookIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PublisherUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PublisherUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PublisherUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PublisherUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PublisherUpdate) defaults() error {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		if publisher.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized publisher.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := publisher.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *PublisherUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := publisher.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Publisher.name": %w`, err)}
		}
	}
	return nil
}

func (pu *PublisherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(publisher.Table, publisher.Columns, sqlgraph.NewFieldSpec(publisher.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(publisher.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.CalibreID(); ok {
		_spec.SetField(publisher.FieldCalibreID, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedCalibreID(); ok {
		_spec.AddField(publisher.FieldCalibreID, field.TypeInt64, value)
	}
	if pu.mutation.CalibreIDCleared() {
		_spec.ClearField(publisher.FieldCalibreID, field.TypeInt64)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(publisher.FieldName, field.TypeString, value)
	}
	if pu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   publisher.BooksTable,
			Columns: publisher.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedBooksIDs(); len(nodes) > 0 && !pu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   publisher.BooksTable,
			Columns: publisher.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   publisher.BooksTable,
			Columns: publisher.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publisher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PublisherUpdateOne is the builder for updating a single Publisher entity.
type PublisherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublisherMutation
}

// SetUpdateTime sets the "update_time" field.
func (puo *PublisherUpdateOne) SetUpdateTime(t time.Time) *PublisherUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetCalibreID sets the "calibre_id" field.
func (puo *PublisherUpdateOne) SetCalibreID(i int64) *PublisherUpdateOne {
	puo.mutation.ResetCalibreID()
	puo.mutation.SetCalibreID(i)
	return puo
}

// SetNillableCalibreID sets the "calibre_id" field if the given value is not nil.
func (puo *PublisherUpdateOne) SetNillableCalibreID(i *int64) *PublisherUpdateOne {
	if i != nil {
		puo.SetCalibreID(*i)
	}
	return puo
}

// AddCalibreID adds i to the "calibre_id" field.
func (puo *PublisherUpdateOne) AddCalibreID(i int64) *PublisherUpdateOne {
	puo.mutation.AddCalibreID(i)
	return puo
}

// ClearCalibreID clears the value of the "calibre_id" field.
func (puo *PublisherUpdateOne) ClearCalibreID() *PublisherUpdateOne {
	puo.mutation.ClearCalibreID()
	return puo
}

// SetName sets the "name" field.
func (puo *PublisherUpdateOne) SetName(s string) *PublisherUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PublisherUpdateOne) SetNillableName(s *string) *PublisherUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (puo *PublisherUpdateOne) AddBookIDs(ids ...ksuid.ID) *PublisherUpdateOne {
	puo.mutation.AddBookIDs(ids...)
	return puo
}

// AddBooks adds the "books" edges to the Book entity.
func (puo *PublisherUpdateOne) AddBooks(b ...*Book) *PublisherUpdateOne {
	ids := make([]ksuid.ID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddBookIDs(ids...)
}

// Mutation returns the PublisherMutation object of the builder.
func (puo *PublisherUpdateOne) Mutation() *PublisherMutation {
	return puo.mutation
}

// ClearBooks clears all "books" edges to the Book entity.
func (puo *PublisherUpdateOne) ClearBooks() *PublisherUpdateOne {
	puo.mutation.ClearBooks()
	return puo
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (puo *PublisherUpdateOne) RemoveBookIDs(ids ...ksuid.ID) *PublisherUpdateOne {
	puo.mutation.RemoveBookIDs(ids...)
	return puo
}

// RemoveBooks removes "books" edges to Book entities.
func (puo *PublisherUpdateOne) RemoveBooks(b ...*Book) *PublisherUpdateOne {
	ids := make([]ksuid.ID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveBookIDs(ids...)
}

// Where appends a list predicates to the PublisherUpdate builder.
func (puo *PublisherUpdateOne) Where(ps ...predicate.Publisher) *PublisherUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PublisherUpdateOne) Select(field string, fields ...string) *PublisherUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Publisher entity.
func (puo *PublisherUpdateOne) Save(ctx context.Context) (*Publisher, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PublisherUpdateOne) SaveX(ctx context.Context) *Publisher {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PublisherUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PublisherUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PublisherUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		if publisher.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized publisher.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := publisher.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *PublisherUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := publisher.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Publisher.name": %w`, err)}
		}
	}
	return nil
}

func (puo *PublisherUpdateOne) sqlSave(ctx context.Context) (_node *Publisher, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(publisher.Table, publisher.Columns, sqlgraph.NewFieldSpec(publisher.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Publisher.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publisher.FieldID)
		for _, f := range fields {
			if !publisher.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publisher.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(publisher.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.CalibreID(); ok {
		_spec.SetField(publisher.FieldCalibreID, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedCalibreID(); ok {
		_spec.AddField(publisher.FieldCalibreID, field.TypeInt64, value)
	}
	if puo.mutation.CalibreIDCleared() {
		_spec.ClearField(publisher.FieldCalibreID, field.TypeInt64)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(publisher.FieldName, field.TypeString, value)
	}
	if puo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   publisher.BooksTable,
			Columns: publisher.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedBooksIDs(); len(nodes) > 0 && !puo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   publisher.BooksTable,
			Columns: publisher.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   publisher.BooksTable,
			Columns: publisher.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Publisher{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publisher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
