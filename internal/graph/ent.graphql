directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Author implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  calibreID: Int
  name: String!
  sort: String!
  link: String
  books(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Books returned from the connection."""
    orderBy: [BookOrder!]

    """Filtering options for Books returned from the connection."""
    where: BookWhereInput
  ): BookConnection!
}
"""A connection to a list of items."""
type AuthorConnection {
  """A list of edges."""
  edges: [AuthorEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AuthorEdge {
  """The item at the end of the edge."""
  node: Author
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Author connections"""
input AuthorOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Authors."""
  field: AuthorOrderField!
}
"""Properties by which Author connections can be ordered."""
enum AuthorOrderField {
  NAME
  BOOKS_COUNT
}
"""
AuthorWhereInput is used for filtering Author objects.
Input was generated by ent.
"""
input AuthorWhereInput {
  not: AuthorWhereInput
  and: [AuthorWhereInput!]
  or: [AuthorWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """calibre_id field predicates"""
  calibreID: Int
  calibreIDNEQ: Int
  calibreIDIn: [Int!]
  calibreIDNotIn: [Int!]
  calibreIDGT: Int
  calibreIDGTE: Int
  calibreIDLT: Int
  calibreIDLTE: Int
  calibreIDIsNil: Boolean
  calibreIDNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """sort field predicates"""
  sort: String
  sortNEQ: String
  sortIn: [String!]
  sortNotIn: [String!]
  sortGT: String
  sortGTE: String
  sortLT: String
  sortLTE: String
  sortContains: String
  sortHasPrefix: String
  sortHasSuffix: String
  sortEqualFold: String
  sortContainsFold: String
  """link field predicates"""
  link: String
  linkNEQ: String
  linkIn: [String!]
  linkNotIn: [String!]
  linkGT: String
  linkGTE: String
  linkLT: String
  linkLTE: String
  linkContains: String
  linkHasPrefix: String
  linkHasSuffix: String
  linkIsNil: Boolean
  linkNotNil: Boolean
  linkEqualFold: String
  linkContainsFold: String
  """books edge predicates"""
  hasBooks: Boolean
  hasBooksWith: [BookWhereInput!]
}
type Book implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  calibreID: Int
  title: String!
  sort: String!
  publishedDate: Time
  path: String!
  isbn: String
  description: String
  seriesIndex: Float
  authors: [Author!]
  publisher: [Publisher!]
  series: [Series!]
  identifiers: [Identifier!]
  tags: [Tag!]
  language: [Language!]
  shelf: [Shelf!]
  files: [BookFile!]
}
"""A connection to a list of items."""
type BookConnection {
  """A list of edges."""
  edges: [BookEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type BookEdge {
  """The item at the end of the edge."""
  node: Book
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type BookFile implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  name: String!
  path: String!
  """Size in bytes"""
  size: Int!
  format: BookFileFormat!
  book: Book!
}
"""BookFileFormat is enum for the field format"""
enum BookFileFormat @goModel(model: "lybbrio/internal/ent/bookfile.Format") {
  EPUB
  KEPUB
}
"""
BookFileWhereInput is used for filtering BookFile objects.
Input was generated by ent.
"""
input BookFileWhereInput {
  not: BookFileWhereInput
  and: [BookFileWhereInput!]
  or: [BookFileWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """path field predicates"""
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathEqualFold: String
  pathContainsFold: String
  """size field predicates"""
  size: Int
  sizeNEQ: Int
  sizeIn: [Int!]
  sizeNotIn: [Int!]
  sizeGT: Int
  sizeGTE: Int
  sizeLT: Int
  sizeLTE: Int
  """format field predicates"""
  format: BookFileFormat
  formatNEQ: BookFileFormat
  formatIn: [BookFileFormat!]
  formatNotIn: [BookFileFormat!]
  """book edge predicates"""
  hasBook: Boolean
  hasBookWith: [BookWhereInput!]
}
"""Ordering options for Book connections"""
input BookOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Books."""
  field: BookOrderField!
}
"""Properties by which Book connections can be ordered."""
enum BookOrderField {
  TITLE
  NAME
  PUB_DATE
  ISBN
  FILES_COUNT
}
"""
BookWhereInput is used for filtering Book objects.
Input was generated by ent.
"""
input BookWhereInput {
  not: BookWhereInput
  and: [BookWhereInput!]
  or: [BookWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """calibre_id field predicates"""
  calibreID: Int
  calibreIDNEQ: Int
  calibreIDIn: [Int!]
  calibreIDNotIn: [Int!]
  calibreIDGT: Int
  calibreIDGTE: Int
  calibreIDLT: Int
  calibreIDLTE: Int
  calibreIDIsNil: Boolean
  calibreIDNotNil: Boolean
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """sort field predicates"""
  sort: String
  sortNEQ: String
  sortIn: [String!]
  sortNotIn: [String!]
  sortGT: String
  sortGTE: String
  sortLT: String
  sortLTE: String
  sortContains: String
  sortHasPrefix: String
  sortHasSuffix: String
  sortEqualFold: String
  sortContainsFold: String
  """published_date field predicates"""
  publishedDate: Time
  publishedDateNEQ: Time
  publishedDateIn: [Time!]
  publishedDateNotIn: [Time!]
  publishedDateGT: Time
  publishedDateGTE: Time
  publishedDateLT: Time
  publishedDateLTE: Time
  publishedDateIsNil: Boolean
  publishedDateNotNil: Boolean
  """path field predicates"""
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathEqualFold: String
  pathContainsFold: String
  """isbn field predicates"""
  isbn: String
  isbnNEQ: String
  isbnIn: [String!]
  isbnNotIn: [String!]
  isbnGT: String
  isbnGTE: String
  isbnLT: String
  isbnLTE: String
  isbnContains: String
  isbnHasPrefix: String
  isbnHasSuffix: String
  isbnIsNil: Boolean
  isbnNotNil: Boolean
  isbnEqualFold: String
  isbnContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """series_index field predicates"""
  seriesIndex: Float
  seriesIndexNEQ: Float
  seriesIndexIn: [Float!]
  seriesIndexNotIn: [Float!]
  seriesIndexGT: Float
  seriesIndexGTE: Float
  seriesIndexLT: Float
  seriesIndexLTE: Float
  seriesIndexIsNil: Boolean
  seriesIndexNotNil: Boolean
  """authors edge predicates"""
  hasAuthors: Boolean
  hasAuthorsWith: [AuthorWhereInput!]
  """publisher edge predicates"""
  hasPublisher: Boolean
  hasPublisherWith: [PublisherWhereInput!]
  """series edge predicates"""
  hasSeries: Boolean
  hasSeriesWith: [SeriesWhereInput!]
  """identifiers edge predicates"""
  hasIdentifiers: Boolean
  hasIdentifiersWith: [IdentifierWhereInput!]
  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]
  """language edge predicates"""
  hasLanguage: Boolean
  hasLanguageWith: [LanguageWhereInput!]
  """shelf edge predicates"""
  hasShelf: Boolean
  hasShelfWith: [ShelfWhereInput!]
  """files edge predicates"""
  hasFiles: Boolean
  hasFilesWith: [BookFileWhereInput!]
}
"""
CreateAuthorInput is used for create Author object.
Input was generated by ent.
"""
input CreateAuthorInput {
  createTime: Time
  updateTime: Time
  calibreID: Int
  name: String!
  sort: String!
  link: String
  bookIDs: [ID!]
}
"""
CreateBookInput is used for create Book object.
Input was generated by ent.
"""
input CreateBookInput {
  createTime: Time
  updateTime: Time
  calibreID: Int
  title: String!
  sort: String!
  publishedDate: Time
  path: String!
  isbn: String
  description: String
  seriesIndex: Float
  authorIDs: [ID!]
  publisherIDs: [ID!]
  seriesIDs: [ID!]
  identifierIDs: [ID!]
  tagIDs: [ID!]
  languageIDs: [ID!]
  shelfIDs: [ID!]
  fileIDs: [ID!]
}
"""
CreateIdentifierInput is used for create Identifier object.
Input was generated by ent.
"""
input CreateIdentifierInput {
  createTime: Time
  updateTime: Time
  calibreID: Int
  type: String!
  value: String!
  bookID: ID!
}
"""
CreateLanguageInput is used for create Language object.
Input was generated by ent.
"""
input CreateLanguageInput {
  createTime: Time
  updateTime: Time
  calibreID: Int
  code: String!
  bookIDs: [ID!]
}
"""
CreatePublisherInput is used for create Publisher object.
Input was generated by ent.
"""
input CreatePublisherInput {
  createTime: Time
  updateTime: Time
  calibreID: Int
  name: String!
  bookIDs: [ID!]
}
"""
CreateSeriesInput is used for create Series object.
Input was generated by ent.
"""
input CreateSeriesInput {
  createTime: Time
  updateTime: Time
  calibreID: Int
  name: String!
  sort: String!
  bookIDs: [ID!]
}
"""
CreateTagInput is used for create Tag object.
Input was generated by ent.
"""
input CreateTagInput {
  calibreID: Int
  name: String!
  bookIDs: [ID!]
}
"""
CreateUserPermissionsInput is used for create UserPermissions object.
Input was generated by ent.
"""
input CreateUserPermissionsInput {
  createTime: Time
  updateTime: Time
  admin: Boolean
  cancreatepublic: Boolean
  canedit: Boolean
  userID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Identifier implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  calibreID: Int
  type: String!
  value: String!
  book: Book!
}
"""A connection to a list of items."""
type IdentifierConnection {
  """A list of edges."""
  edges: [IdentifierEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type IdentifierEdge {
  """The item at the end of the edge."""
  node: Identifier
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Identifier connections"""
input IdentifierOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Identifiers."""
  field: IdentifierOrderField!
}
"""Properties by which Identifier connections can be ordered."""
enum IdentifierOrderField {
  TYPE
  VALUE
}
"""
IdentifierWhereInput is used for filtering Identifier objects.
Input was generated by ent.
"""
input IdentifierWhereInput {
  not: IdentifierWhereInput
  and: [IdentifierWhereInput!]
  or: [IdentifierWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """calibre_id field predicates"""
  calibreID: Int
  calibreIDNEQ: Int
  calibreIDIn: [Int!]
  calibreIDNotIn: [Int!]
  calibreIDGT: Int
  calibreIDGTE: Int
  calibreIDLT: Int
  calibreIDLTE: Int
  calibreIDIsNil: Boolean
  calibreIDNotNil: Boolean
  """type field predicates"""
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """value field predicates"""
  value: String
  valueNEQ: String
  valueIn: [String!]
  valueNotIn: [String!]
  valueGT: String
  valueGTE: String
  valueLT: String
  valueLTE: String
  valueContains: String
  valueHasPrefix: String
  valueHasSuffix: String
  valueEqualFold: String
  valueContainsFold: String
  """book edge predicates"""
  hasBook: Boolean
  hasBookWith: [BookWhereInput!]
}
type Language implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  calibreID: Int
  code: String!
  books(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Books returned from the connection."""
    orderBy: [BookOrder!]

    """Filtering options for Books returned from the connection."""
    where: BookWhereInput
  ): BookConnection!
}
"""A connection to a list of items."""
type LanguageConnection {
  """A list of edges."""
  edges: [LanguageEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type LanguageEdge {
  """The item at the end of the edge."""
  node: Language
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Language connections"""
input LanguageOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Languages."""
  field: LanguageOrderField!
}
"""Properties by which Language connections can be ordered."""
enum LanguageOrderField {
  BOOKS_COUNT
}
"""
LanguageWhereInput is used for filtering Language objects.
Input was generated by ent.
"""
input LanguageWhereInput {
  not: LanguageWhereInput
  and: [LanguageWhereInput!]
  or: [LanguageWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """calibre_id field predicates"""
  calibreID: Int
  calibreIDNEQ: Int
  calibreIDIn: [Int!]
  calibreIDNotIn: [Int!]
  calibreIDGT: Int
  calibreIDGTE: Int
  calibreIDLT: Int
  calibreIDLTE: Int
  calibreIDIsNil: Boolean
  calibreIDNotNil: Boolean
  """code field predicates"""
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """books edge predicates"""
  hasBooks: Boolean
  hasBooksWith: [BookWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "lybbrio/internal/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Publisher implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  calibreID: Int
  name: String!
  books(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Books returned from the connection."""
    orderBy: [BookOrder!]

    """Filtering options for Books returned from the connection."""
    where: BookWhereInput
  ): BookConnection!
}
"""A connection to a list of items."""
type PublisherConnection {
  """A list of edges."""
  edges: [PublisherEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type PublisherEdge {
  """The item at the end of the edge."""
  node: Publisher
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Publisher connections"""
input PublisherOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Publishers."""
  field: PublisherOrderField!
}
"""Properties by which Publisher connections can be ordered."""
enum PublisherOrderField {
  NAME
  BOOKS_COUNT
}
"""
PublisherWhereInput is used for filtering Publisher objects.
Input was generated by ent.
"""
input PublisherWhereInput {
  not: PublisherWhereInput
  and: [PublisherWhereInput!]
  or: [PublisherWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """calibre_id field predicates"""
  calibreID: Int
  calibreIDNEQ: Int
  calibreIDIn: [Int!]
  calibreIDNotIn: [Int!]
  calibreIDGT: Int
  calibreIDGTE: Int
  calibreIDLT: Int
  calibreIDLTE: Int
  calibreIDIsNil: Boolean
  calibreIDNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """books edge predicates"""
  hasBooks: Boolean
  hasBooksWith: [BookWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  authors(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Authors returned from the connection."""
    orderBy: [AuthorOrder!]

    """Filtering options for Authors returned from the connection."""
    where: AuthorWhereInput
  ): AuthorConnection!
  books(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Books returned from the connection."""
    orderBy: [BookOrder!]

    """Filtering options for Books returned from the connection."""
    where: BookWhereInput
  ): BookConnection!
  bookFiles: [BookFile!]!
  identifiers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Identifiers returned from the connection."""
    orderBy: [IdentifierOrder!]

    """Filtering options for Identifiers returned from the connection."""
    where: IdentifierWhereInput
  ): IdentifierConnection!
  languages(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Languages returned from the connection."""
    orderBy: [LanguageOrder!]

    """Filtering options for Languages returned from the connection."""
    where: LanguageWhereInput
  ): LanguageConnection!
  publishers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Publishers returned from the connection."""
    orderBy: [PublisherOrder!]

    """Filtering options for Publishers returned from the connection."""
    where: PublisherWhereInput
  ): PublisherConnection!
  seriesSlice(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for SeriesSlice returned from the connection."""
    orderBy: [SeriesOrder!]

    """Filtering options for SeriesSlice returned from the connection."""
    where: SeriesWhereInput
  ): SeriesConnection!
  shelves(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Shelves returned from the connection."""
    orderBy: [ShelfOrder!]

    """Filtering options for Shelves returned from the connection."""
    where: ShelfWhereInput
  ): ShelfConnection!
  tags(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Tags returned from the connection."""
    orderBy: [TagOrder!]

    """Filtering options for Tags returned from the connection."""
    where: TagWhereInput
  ): TagConnection!
  tasks(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Tasks returned from the connection."""
    orderBy: [TaskOrder!]

    """Filtering options for Tasks returned from the connection."""
    where: TaskWhereInput
  ): TaskConnection!
  users: [User!]!
}
type Series implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  calibreID: Int
  name: String!
  sort: String!
  books: [Book!]
}
"""A connection to a list of items."""
type SeriesConnection {
  """A list of edges."""
  edges: [SeriesEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type SeriesEdge {
  """The item at the end of the edge."""
  node: Series
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Series connections"""
input SeriesOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order SeriesSlice."""
  field: SeriesOrderField!
}
"""Properties by which Series connections can be ordered."""
enum SeriesOrderField {
  NAME
}
"""
SeriesWhereInput is used for filtering Series objects.
Input was generated by ent.
"""
input SeriesWhereInput {
  not: SeriesWhereInput
  and: [SeriesWhereInput!]
  or: [SeriesWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """calibre_id field predicates"""
  calibreID: Int
  calibreIDNEQ: Int
  calibreIDIn: [Int!]
  calibreIDNotIn: [Int!]
  calibreIDGT: Int
  calibreIDGTE: Int
  calibreIDLT: Int
  calibreIDLTE: Int
  calibreIDIsNil: Boolean
  calibreIDNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """sort field predicates"""
  sort: String
  sortNEQ: String
  sortIn: [String!]
  sortNotIn: [String!]
  sortGT: String
  sortGTE: String
  sortLT: String
  sortLTE: String
  sortContains: String
  sortHasPrefix: String
  sortHasSuffix: String
  sortEqualFold: String
  sortContainsFold: String
  """books edge predicates"""
  hasBooks: Boolean
  hasBooksWith: [BookWhereInput!]
}
type Shelf implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  public: Boolean!
  userID: ID!
  name: String!
  description: String
  user: User!
  books(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Books returned from the connection."""
    orderBy: [BookOrder!]

    """Filtering options for Books returned from the connection."""
    where: BookWhereInput
  ): BookConnection!
}
"""A connection to a list of items."""
type ShelfConnection {
  """A list of edges."""
  edges: [ShelfEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ShelfEdge {
  """The item at the end of the edge."""
  node: Shelf
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Shelf connections"""
input ShelfOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Shelves."""
  field: ShelfOrderField!
}
"""Properties by which Shelf connections can be ordered."""
enum ShelfOrderField {
  NAME
  BOOKS_COUNT
}
"""
ShelfWhereInput is used for filtering Shelf objects.
Input was generated by ent.
"""
input ShelfWhereInput {
  not: ShelfWhereInput
  and: [ShelfWhereInput!]
  or: [ShelfWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """public field predicates"""
  public: Boolean
  publicNEQ: Boolean
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDEqualFold: ID
  userIDContainsFold: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """books edge predicates"""
  hasBooks: Boolean
  hasBooksWith: [BookWhereInput!]
}
type Tag implements Node {
  id: ID!
  calibreID: Int
  name: String!
  books(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Books returned from the connection."""
    orderBy: [BookOrder!]

    """Filtering options for Books returned from the connection."""
    where: BookWhereInput
  ): BookConnection!
}
"""A connection to a list of items."""
type TagConnection {
  """A list of edges."""
  edges: [TagEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge."""
  node: Tag
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Tag connections"""
input TagOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tags."""
  field: TagOrderField!
}
"""Properties by which Tag connections can be ordered."""
enum TagOrderField {
  NAME
  BOOKS_COUNT
}
"""
TagWhereInput is used for filtering Tag objects.
Input was generated by ent.
"""
input TagWhereInput {
  not: TagWhereInput
  and: [TagWhereInput!]
  or: [TagWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """calibre_id field predicates"""
  calibreID: Int
  calibreIDNEQ: Int
  calibreIDIn: [Int!]
  calibreIDNotIn: [Int!]
  calibreIDGT: Int
  calibreIDGTE: Int
  calibreIDLT: Int
  calibreIDLTE: Int
  calibreIDIsNil: Boolean
  calibreIDNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """books edge predicates"""
  hasBooks: Boolean
  hasBooksWith: [BookWhereInput!]
}
type Task implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  type: TaskTaskType!
  status: TaskStatus!
  """Progress of the task. 0-1"""
  progress: Float!
  """Message of the task"""
  message: String
  """Error message of the task"""
  error: String
  """The user who created this task. Empty for System Task"""
  userID: ID
  """Whether this task is created by the system"""
  isSystemTask: Boolean!
  user: User
}
"""A connection to a list of items."""
type TaskConnection {
  """A list of edges."""
  edges: [TaskEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge."""
  node: Task
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Task connections"""
input TaskOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tasks."""
  field: TaskOrderField!
}
"""Properties by which Task connections can be ordered."""
enum TaskOrderField {
  TYPE
  STATUS
}
"""TaskStatus is enum for the field status"""
enum TaskStatus @goModel(model: "lybbrio/internal/ent/schema/task_enums.Status") {
  pending
  in_progress
  success
  failure
}
"""TaskTaskType is enum for the field type"""
enum TaskTaskType @goModel(model: "lybbrio/internal/ent/schema/task_enums.TaskType") {
  noop
  calibre_import
}
"""
TaskWhereInput is used for filtering Task objects.
Input was generated by ent.
"""
input TaskWhereInput {
  not: TaskWhereInput
  and: [TaskWhereInput!]
  or: [TaskWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """type field predicates"""
  type: TaskTaskType
  typeNEQ: TaskTaskType
  typeIn: [TaskTaskType!]
  typeNotIn: [TaskTaskType!]
  """status field predicates"""
  status: TaskStatus
  statusNEQ: TaskStatus
  statusIn: [TaskStatus!]
  statusNotIn: [TaskStatus!]
  """progress field predicates"""
  progress: Float
  progressNEQ: Float
  progressIn: [Float!]
  progressNotIn: [Float!]
  progressGT: Float
  progressGTE: Float
  progressLT: Float
  progressLTE: Float
  """message field predicates"""
  message: String
  messageNEQ: String
  messageIn: [String!]
  messageNotIn: [String!]
  messageGT: String
  messageGTE: String
  messageLT: String
  messageLTE: String
  messageContains: String
  messageHasPrefix: String
  messageHasSuffix: String
  messageIsNil: Boolean
  messageNotNil: Boolean
  messageEqualFold: String
  messageContainsFold: String
  """error field predicates"""
  error: String
  errorNEQ: String
  errorIn: [String!]
  errorNotIn: [String!]
  errorGT: String
  errorGTE: String
  errorLT: String
  errorLTE: String
  errorContains: String
  errorHasPrefix: String
  errorHasSuffix: String
  errorIsNil: Boolean
  errorNotNil: Boolean
  errorEqualFold: String
  errorContainsFold: String
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """is_system_task field predicates"""
  isSystemTask: Boolean
  isSystemTaskNEQ: Boolean
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""
UpdateAuthorInput is used for update Author object.
Input was generated by ent.
"""
input UpdateAuthorInput {
  updateTime: Time
  calibreID: Int
  clearCalibreID: Boolean
  name: String
  sort: String
  link: String
  clearLink: Boolean
  addBookIDs: [ID!]
  removeBookIDs: [ID!]
  clearBooks: Boolean
}
"""
UpdateBookInput is used for update Book object.
Input was generated by ent.
"""
input UpdateBookInput {
  updateTime: Time
  calibreID: Int
  clearCalibreID: Boolean
  title: String
  sort: String
  publishedDate: Time
  clearPublishedDate: Boolean
  path: String
  isbn: String
  clearIsbn: Boolean
  description: String
  clearDescription: Boolean
  seriesIndex: Float
  clearSeriesIndex: Boolean
  addAuthorIDs: [ID!]
  removeAuthorIDs: [ID!]
  clearAuthors: Boolean
  addPublisherIDs: [ID!]
  removePublisherIDs: [ID!]
  clearPublisher: Boolean
  addSeriesIDs: [ID!]
  removeSeriesIDs: [ID!]
  clearSeries: Boolean
  addIdentifierIDs: [ID!]
  removeIdentifierIDs: [ID!]
  clearIdentifiers: Boolean
  addTagIDs: [ID!]
  removeTagIDs: [ID!]
  clearTags: Boolean
  addLanguageIDs: [ID!]
  removeLanguageIDs: [ID!]
  clearLanguage: Boolean
  addShelfIDs: [ID!]
  removeShelfIDs: [ID!]
  clearShelf: Boolean
  addFileIDs: [ID!]
  removeFileIDs: [ID!]
  clearFiles: Boolean
}
"""
UpdateIdentifierInput is used for update Identifier object.
Input was generated by ent.
"""
input UpdateIdentifierInput {
  updateTime: Time
  calibreID: Int
  clearCalibreID: Boolean
  type: String
  value: String
  bookID: ID
}
"""
UpdateLanguageInput is used for update Language object.
Input was generated by ent.
"""
input UpdateLanguageInput {
  updateTime: Time
  calibreID: Int
  clearCalibreID: Boolean
  code: String
  addBookIDs: [ID!]
  removeBookIDs: [ID!]
  clearBooks: Boolean
}
"""
UpdatePublisherInput is used for update Publisher object.
Input was generated by ent.
"""
input UpdatePublisherInput {
  updateTime: Time
  calibreID: Int
  clearCalibreID: Boolean
  name: String
  addBookIDs: [ID!]
  removeBookIDs: [ID!]
  clearBooks: Boolean
}
"""
UpdateSeriesInput is used for update Series object.
Input was generated by ent.
"""
input UpdateSeriesInput {
  updateTime: Time
  calibreID: Int
  clearCalibreID: Boolean
  name: String
  sort: String
  addBookIDs: [ID!]
  removeBookIDs: [ID!]
  clearBooks: Boolean
}
"""
UpdateShelfInput is used for update Shelf object.
Input was generated by ent.
"""
input UpdateShelfInput {
  updateTime: Time
  public: Boolean
  name: String
  description: String
  clearDescription: Boolean
  addBookIDs: [ID!]
  removeBookIDs: [ID!]
  clearBooks: Boolean
}
"""
UpdateTagInput is used for update Tag object.
Input was generated by ent.
"""
input UpdateTagInput {
  calibreID: Int
  clearCalibreID: Boolean
  name: String
  addBookIDs: [ID!]
  removeBookIDs: [ID!]
  clearBooks: Boolean
}
"""
UpdateUserPermissionsInput is used for update UserPermissions object.
Input was generated by ent.
"""
input UpdateUserPermissionsInput {
  updateTime: Time
  admin: Boolean
  cancreatepublic: Boolean
  canedit: Boolean
  userID: ID
  clearUser: Boolean
}
type User implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  username: String!
  email: String!
  shelves: [Shelf!]
  userPermissions: UserPermissions!
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  USERNAME
}
type UserPermissions implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  userID: ID
  admin: Boolean!
  cancreatepublic: Boolean! @goField(name: "CanCreatePublic", forceResolver: false)
  canedit: Boolean! @goField(name: "CanEdit", forceResolver: false)
  user: User
}
"""
UserPermissionsWhereInput is used for filtering UserPermissions objects.
Input was generated by ent.
"""
input UserPermissionsWhereInput {
  not: UserPermissionsWhereInput
  and: [UserPermissionsWhereInput!]
  or: [UserPermissionsWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """Admin field predicates"""
  admin: Boolean
  adminNEQ: Boolean
  """CanCreatePublic field predicates"""
  cancreatepublic: Boolean
  cancreatepublicNEQ: Boolean
  """CanEdit field predicates"""
  canedit: Boolean
  caneditNEQ: Boolean
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """shelves edge predicates"""
  hasShelves: Boolean
  hasShelvesWith: [ShelfWhereInput!]
  """user_permissions edge predicates"""
  hasUserPermissions: Boolean
  hasUserPermissionsWith: [UserPermissionsWhereInput!]
}
